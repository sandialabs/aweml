/* Generated by Cython 0.28.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\numpy\\core\\include\\numpy\\arrayobject.h",
            "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\numpy\\core\\include\\numpy\\ufuncobject.h",
            "awe_ml\\classification_values.h",
            "awe_ml\\full_tree_data.h"
        ],
        "include_dirs": [
            "awe_ml",
            "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\numpy\\core\\include",
            "."
        ],
        "language": "c++",
        "name": "awe_ml.classifier_cython",
        "sources": [
            "C:\\Users\\sagarwa\\PycharmProjects\\TreeClassifier\\awe_ml\\awe_ml/classifier_cython.pyx"
        ]
    },
    "module_name": "awe_ml.classifier_cython"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_5"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__awe_ml__classifier_cython
#define __PYX_HAVE_API__awe_ml__classifier_cython
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <math.h>
#include <vector>
#include <utility>
#include <unordered_map>
#include <map>
#include <unordered_set>
#include <stdlib.h>
#include <set>
#include <algorithm>
#include "classification_values.h"
#include "full_tree_data.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "awe_ml\\helperfunctions.pxi",
  "awe_ml\\classifier_cython.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":767
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "awe_ml/binning.pxd":6
 * from libcpp.string cimport string
 * cimport numpy as np
 * ctypedef np.int32_t np_long             # <<<<<<<<<<<<<<
 * ctypedef np.float64_t np_float
 * 
 */
typedef __pyx_t_5numpy_int32_t __pyx_t_6awe_ml_7binning_np_long;

/* "awe_ml/binning.pxd":7
 * cimport numpy as np
 * ctypedef np.int32_t np_long
 * ctypedef np.float64_t np_float             # <<<<<<<<<<<<<<
 * 
 * cpdef bin_data(train_data, np_long nbins=*, np_long max_bins=*, object categorical_feature_inds=*, str binning_method=*,bint retbins=*)
 */
typedef __pyx_t_5numpy_float64_t __pyx_t_6awe_ml_7binning_np_float;

/* "awe_ml/classifier_cython.pyx":55
 * 
 * 
 * ctypedef np.int32_t np_long             # <<<<<<<<<<<<<<
 * ctypedef np.float64_t np_float
 * 
 */
typedef __pyx_t_5numpy_int32_t __pyx_t_6awe_ml_17classifier_cython_np_long;

/* "awe_ml/classifier_cython.pyx":56
 * 
 * ctypedef np.int32_t np_long
 * ctypedef np.float64_t np_float             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef __pyx_t_5numpy_float64_t __pyx_t_6awe_ml_17classifier_cython_np_float;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":773
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_6awe_ml_7binning_bin_data;

/* "awe_ml/binning.pxd":9
 * ctypedef np.float64_t np_float
 * 
 * cpdef bin_data(train_data, np_long nbins=*, np_long max_bins=*, object categorical_feature_inds=*, str binning_method=*,bint retbins=*)             # <<<<<<<<<<<<<<
 * 
 * cpdef np_long[:,:] bin_data_given_bins(object data,list categorical_bin_list,list numeric_bin_list)
 */
struct __pyx_opt_args_6awe_ml_7binning_bin_data {
  int __pyx_n;
  __pyx_t_6awe_ml_7binning_np_long nbins;
  __pyx_t_6awe_ml_7binning_np_long max_bins;
  PyObject *categorical_feature_inds;
  PyObject *binning_method;
  int retbins;
};
struct __pyx_t_6awe_ml_17classifier_cython_node_info_t;
struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit;
struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability;
struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability;

/* "awe_ml/data_structures.pxi":3
 * 
 * 
 * cdef struct node_info_t:             # <<<<<<<<<<<<<<
 *     np_long counts_index, parents_index_begin, parents_index_end, updated_index, size, depth, parents_index_step
 * 
 */
struct __pyx_t_6awe_ml_17classifier_cython_node_info_t {
  __pyx_t_6awe_ml_17classifier_cython_np_long counts_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long parents_index_begin;
  __pyx_t_6awe_ml_17classifier_cython_np_long parents_index_end;
  __pyx_t_6awe_ml_17classifier_cython_np_long updated_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long size;
  __pyx_t_6awe_ml_17classifier_cython_np_long depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long parents_index_step;
};

/* "awe_ml/classifier_cython.pyx":630
 * 
 * 
 *     cpdef fit(self, X_in, y_in, list feature_names_txt=None, list categorical_bin_list=None, list numeric_bin_list=None):             # <<<<<<<<<<<<<<
 *         """
 *         Train the classifier on data X with targets y
 */
struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit {
  int __pyx_n;
  PyObject *feature_names_txt;
  PyObject *categorical_bin_list;
  PyObject *numeric_bin_list;
};

/* "awe_ml/classifier_cython.pyx":1737
 * 
 * 
 *     cpdef np.ndarray[np_float, ndim=1] find_probability(self, np_long[:] example, bint save_intermediates = False):             # <<<<<<<<<<<<<<
 *         """
 *         run classifier and find probability given a single example
 */
struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability {
  int __pyx_n;
  int save_intermediates;
};

/* "awe_ml/classifier_cython.pyx":2152
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cpdef analyze_single_probability(self,example, str filename_prefix="./results"):#None):#             # <<<<<<<<<<<<<<
 *         """
 *         Analyzes a prediction and breaks down the components that go into the prediction
 */
struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability {
  int __pyx_n;
  PyObject *filename_prefix;
};

/* "awe_ml/classifier_cython.pyx":147
 * 
 * @cython.auto_pickle(False)
 * cdef class AWE_ML_Cython:             # <<<<<<<<<<<<<<
 * 
 *     cdef np_long n_features
 */
struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython {
  PyObject_HEAD
  struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_vtab;
  __pyx_t_6awe_ml_17classifier_cython_np_long n_features;
  __pyx_t_6awe_ml_17classifier_cython_np_float ave_corr;
  PyObject *feature_names_txt;
  PyObject *classes_;
  __pyx_t_6awe_ml_17classifier_cython_np_long n_classes;
  std::string independence_model_c;
  __pyx_t_6awe_ml_17classifier_cython_np_long max_fully_connected_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long n_max_classify;
  __pyx_t_6awe_ml_17classifier_cython_np_long max_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long n_min_to_add_leaf;
  __pyx_t_6awe_ml_17classifier_cython_np_long features_per_node;
  PyObject *node_split_model;
  PyObject *probability_scaling_method;
  PyObject *usefulness_model;
  PyObject *independence_model;
  PyObject *_estimator_type;
  __pyx_t_6awe_ml_17classifier_cython_np_float node_split_fraction;
  __pyx_t_6awe_ml_17classifier_cython_np_float noise_exponent;
  __pyx_t_6awe_ml_17classifier_cython_np_float n_noise;
  __pyx_t_6awe_ml_17classifier_cython_np_float noise_scale;
  PyObject *noise_exponent2;
  __Pyx_memviewslice X;
  __Pyx_memviewslice y;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  n_feature_categories_;
  std::vector<ClassificationValues<__pyx_t_6awe_ml_17classifier_cython_np_float> >  classification_values_list;
  std::vector<FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long> >  full_tree_vector;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  full_tree_indicies_list;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  full_tree_to_local_tree_lookup_list;
  std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  local_weight_tree;
  std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  node_info;
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  children_list;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  feature_pair_to_comb_feat_ind;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  comb_feat_ind_to_feature_pair;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  correlation_map;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> >  node_label_to_index_dict_list;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > >  nodes;
  __pyx_t_6awe_ml_17classifier_cython_np_long nbins;
  __pyx_t_6awe_ml_17classifier_cython_np_long max_bins;
  PyObject *categorical_feature_inds;
  PyObject *binning_method;
  PyObject *categorical_bin_list;
  PyObject *numeric_bin_list;
  PyObject *noise_exponent_obj;
  PyObject *node_split_fraction_obj;
  PyObject *n_noise_obj;
};


/* "View.MemoryView":104
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":278
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":329
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":960
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "awe_ml/classifier_cython.pyx":147
 * 
 * @cython.auto_pickle(False)
 * cdef class AWE_ML_Cython:             # <<<<<<<<<<<<<<
 * 
 *     cdef np_long n_features
 */

struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython {
  std::string (*get_name)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long);
  PyObject *(*fit)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit *__pyx_optional_args);
  __pyx_t_6awe_ml_17classifier_cython_np_float (*compute_noise_value)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long const &);
  PyObject *(*create_and_process_node)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, __pyx_t_6awe_ml_17classifier_cython_np_long &);
  PyObject *(*create_children)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &);
  void (*add_parent_label)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, __pyx_t_6awe_ml_17classifier_cython_np_long &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, __pyx_t_6awe_ml_17classifier_cython_np_long &);
  PyObject *(*create_classifier_tree)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *);
  PyObject *(*find_used_feature_combos)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __Pyx_memviewslice, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &);
  __Pyx_memviewslice (*validate_X)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *);
  PyObject *(*predict_proba)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *, int __pyx_skip_dispatch);
  PyArrayObject *(*find_probability)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __Pyx_memviewslice, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability *__pyx_optional_args);
  PyObject *(*analyze_single_probability)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_vtabptr_6awe_ml_17classifier_cython_AWE_ML_Cython;
static CYTHON_INLINE __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_compute_noise_value(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long const &);


/* "View.MemoryView":104
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":329
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":960
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* None.proto */
#include <new>

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *, int writable_flag);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long(const char *itemp, PyObject *obj);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

struct __pyx_t_6awe_ml_17classifier_cython_node_info_t;
static PyObject* __pyx_convert__to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(struct __pyx_t_6awe_ml_17classifier_cython_node_info_t s);
/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_6awe_ml_7binning_np_long(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_6awe_ml_7binning_np_long(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_float(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_float(const char *itemp, PyObject *obj);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_int32 __Pyx_PyInt_As_npy_int32(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *, int writable_flag);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static std::string __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_get_name(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind); /* proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X_in, PyObject *__pyx_v_y_in, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit *__pyx_optional_args); /* proto*/
static CYTHON_INLINE __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_compute_noise_value(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long const &__pyx_v_total_count); /* proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_and_process_node(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_depth, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_child_label, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_data_by_class, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_parent_label, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_comb_feat_ind); /* proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_children(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_parent_depth, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_parent_label, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_parent_data_by_class); /* proto*/
static void __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_add_parent_label(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_child_label, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_depth, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_parent_label, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_comb_feat_ind); /* proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_classifier_tree(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_used_feature_combos(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __Pyx_memviewslice __pyx_v_example, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_full_tree_indicies_list, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_full_tree_to_local_tree_lookup_list, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &__pyx_v_compressed_comb_feat_ind_child_tree, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &__pyx_v_compressed_full_tree_ind_child_tree); /* proto*/
static __Pyx_memviewslice __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_validate_X(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X); /* proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_predict_proba(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch); /* proto*/
static PyArrayObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __Pyx_memviewslice __pyx_v_example, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_example, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability *__pyx_optional_args); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'awe_ml.binning' */
static PyObject *(*__pyx_f_6awe_ml_7binning_bin_data)(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_7binning_bin_data *__pyx_optional_args); /*proto*/
static __Pyx_memviewslice (*__pyx_f_6awe_ml_7binning_bin_data_given_bins)(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'awe_ml.classifier_cython' */
static PyTypeObject *__pyx_ptype_6awe_ml_17classifier_cython_AWE_ML_Cython = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static void __pyx_f_6awe_ml_17classifier_cython_pair_sort(std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_simple(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_t_6awe_ml_17classifier_cython_np_float *, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_scaled_per_class(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_t_6awe_ml_17classifier_cython_np_float *, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_none(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_t_6awe_ml_17classifier_cython_np_float *, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal(__pyx_t_6awe_ml_17classifier_cython_np_float const &, __pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_t_6awe_ml_17classifier_cython_np_float const &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal_class_imbalance(__pyx_t_6awe_ml_17classifier_cython_np_float const &, __pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_t_6awe_ml_17classifier_cython_np_float const &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  const &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &); /*proto*/
static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_logit(__pyx_t_6awe_ml_17classifier_cython_np_float const &, __pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_t_6awe_ml_17classifier_cython_np_float const &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &); /*proto*/
static void __pyx_f_6awe_ml_17classifier_cython_initialize_node(struct __pyx_t_6awe_ml_17classifier_cython_node_info_t &, __pyx_t_6awe_ml_17classifier_cython_np_long const &, __pyx_t_6awe_ml_17classifier_cython_np_long const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(const std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_long(const std::vector<long>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float(const std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(std::pair<std::vector<long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(std::pair<std::vector<long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(const std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(const std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(const std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(const std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(const std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &); /*proto*/
static PyObject *__pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  const &); /*proto*/
static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  const &); /*proto*/
static PyObject *__pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  const &); /*proto*/
static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float(std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *); /*proto*/
static std::vector<long>  __pyx_convert_vector_from_py_long(PyObject *); /*proto*/
static std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *); /*proto*/
static std::pair<std::vector<long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(PyObject *); /*proto*/
static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *); /*proto*/
static std::pair<std::vector<long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(PyObject *); /*proto*/
static std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *); /*proto*/
static std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(PyObject *); /*proto*/
static std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(PyObject *); /*proto*/
static std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(PyObject *); /*proto*/
static struct __pyx_t_6awe_ml_17classifier_cython_node_info_t __pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(PyObject *); /*proto*/
static std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  __pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(PyObject *); /*proto*/
static std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(PyObject *); /*proto*/
static std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *); /*proto*/
static std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *); /*proto*/
static std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *); /*proto*/
static std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *); /*proto*/
static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *); /*proto*/
static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *); /*proto*/
static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float = { "np_float", NULL, sizeof(__pyx_t_6awe_ml_17classifier_cython_np_float), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_long = { "np_long", NULL, sizeof(__pyx_t_6awe_ml_17classifier_cython_np_long), { 0 }, 0, IS_UNSIGNED(__pyx_t_6awe_ml_17classifier_cython_np_long) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_6awe_ml_17classifier_cython_np_long), 0 };
#define __Pyx_MODULE_NAME "awe_ml.classifier_cython"
extern int __pyx_module_is_main_awe_ml__classifier_cython;
int __pyx_module_is_main_awe_ml__classifier_cython = 0;

/* Implementation of 'awe_ml.classifier_cython' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_C[] = "C";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_a[] = "a= ";
static const char __pyx_k_b[] = "b= ";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_FX[] = "_FX), ";
static const char __pyx_k__4[] = "=";
static const char __pyx_k_f1[] = "\nf1=";
static const char __pyx_k_f2[] = " f2=";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_io[] = "io";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_F_2[] = "_F";
static const char __pyx_k_W_C[] = "W(C";
static const char __pyx_k__14[] = ", ";
static const char __pyx_k__15[] = "#";
static const char __pyx_k__16[] = "), ";
static const char __pyx_k__17[] = "\n";
static const char __pyx_k_fit[] = "fit";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_X_in[] = "X_in";
static const char __pyx_k_amax[] = "amax";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_deep[] = "deep";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_full[] = "full";
static const char __pyx_k_gini[] = "gini";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_n_11[] = " n_11=";
static const char __pyx_k_n_1x[] = " n_1x=";
static const char __pyx_k_n_x1[] = " n_x1=";
static const char __pyx_k_n_xx[] = "n_xx=";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_qcut[] = "qcut";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_y_in[] = "y_in";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_bin_0[] = "bin #{0}";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_level[] = "level, ";
static const char __pyx_k_nbins[] = "nbins";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_argmax[] = "argmax";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_simple[] = "simple";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_BytesIO[] = "BytesIO";
static const char __pyx_k_NP_LONG[] = "NP_LONG";
static const char __pyx_k_argsort[] = "argsort";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_classes[] = "classes_";
static const char __pyx_k_example[] = "example";
static const char __pyx_k_f1_comb[] = "f1_comb=";
static const char __pyx_k_f2_comb[] = " f2_comb=";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_n_noise[] = "n_noise";
static const char __pyx_k_newaxis[] = "newaxis";
static const char __pyx_k_results[] = "./results";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_NP_FLOAT[] = "NP_FLOAT";
static const char __pyx_k_ave_corr[] = "ave_corr";
static const char __pyx_k_classify[] = "classify";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_max_bins[] = "max_bins";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_read_csv[] = "read_csv";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_0_4g_1_4g[] = "[{0:.4g} : {1:.4g}]";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_check_X_y[] = "check_X_y";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_max_depth[] = "max_depth";
static const char __pyx_k_n_classes[] = "n_classes";
static const char __pyx_k_node_info[] = "node_info";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_y_numeric[] = "y_numeric";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_classifier[] = "classifier";
static const char __pyx_k_combos_csv[] = "_combos.csv";
static const char __pyx_k_n_features[] = "n_features";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_0_4g_1_4g_2[] = "({0:.4g} : {1:.4g}]";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_check_array[] = "check_array";
static const char __pyx_k_correlation[] = "correlation = ";
static const char __pyx_k_gini_random[] = "gini_random";
static const char __pyx_k_n_noise_obj[] = "n_noise_obj";
static const char __pyx_k_noise_scale[] = "noise_scale";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_counts_index[] = "counts_index";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_children_list[] = "children_list";
static const char __pyx_k_predict_proba[] = "predict_proba";
static const char __pyx_k_probabilities[] = "probabilities";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_unique_labels[] = "unique_labels";
static const char __pyx_k_updated_index[] = "updated_index";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_binning_method[] = "binning_method";
static const char __pyx_k_n_max_classify[] = "n_max_classify";
static const char __pyx_k_noise_exponent[] = "noise_exponent";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_correlation_map[] = "correlation_map";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_filename_prefix[] = "filename_prefix";
static const char __pyx_k_noise_exponent2[] = "noise_exponent2";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_top_of_tree_csv[] = "_top_of_tree.csv";
static const char __pyx_k_This_should_be_0[] = "This should be 0:";
static const char __pyx_k_This_should_be_1[] = "This should be -1:";
static const char __pyx_k_find_probability[] = "find_probability";
static const char __pyx_k_force_all_finite[] = "force_all_finite";
static const char __pyx_k_full_tree_vector[] = "full_tree_vector";
static const char __pyx_k_node_split_model[] = "node_split_model";
static const char __pyx_k_numeric_bin_list[] = "numeric_bin_list";
static const char __pyx_k_usefulness_model[] = "usefulness_model";
static const char __pyx_k_feature_names_txt[] = "feature_names_txt";
static const char __pyx_k_features_per_node[] = "features_per_node";
static const char __pyx_k_local_weight_tree[] = "local_weight_tree";
static const char __pyx_k_n_min_to_add_leaf[] = "n_min_to_add_leaf";
static const char __pyx_k_parents_index_end[] = "parents_index_end";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_This_should_be_1_2[] = "This should be 1:";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_independence_model[] = "independence_model";
static const char __pyx_k_noise_exponent_obj[] = "noise_exponent_obj";
static const char __pyx_k_parents_index_step[] = "parents_index_step";
static const char __pyx_k_save_intermediates[] = "save_intermediates";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_average_correlation[] = "average correlation = ";
static const char __pyx_k_node_split_fraction[] = "node_split_fraction";
static const char __pyx_k_parents_index_begin[] = "parents_index_begin";
static const char __pyx_k_categorical_bin_list[] = "categorical_bin_list";
static const char __pyx_k_independence_model_c[] = "independence_model_c";
static const char __pyx_k_n_feature_categories[] = "n_feature_categories_";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_Unknown_Scaling_Model[] = "Unknown Scaling Model ";
static const char __pyx_k_by_feature_shared_csv[] = "_by_feature_shared.csv";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_imbalanced_reciprocal[] = "imbalanced_reciprocal";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_Unkown_node_split_model[] = "Unkown node split model ";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_full_tree_indicies_list[] = "full_tree_indicies_list";
static const char __pyx_k_node_split_fraction_obj[] = "node_split_fraction_obj";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_Unknown_Usefulness_Model[] = "Unknown Usefulness Model ";
static const char __pyx_k_categorical_feature_inds[] = "categorical_feature_inds";
static const char __pyx_k_sklearn_utils_multiclass[] = "sklearn.utils.multiclass";
static const char __pyx_k_sklearn_utils_validation[] = "sklearn.utils.validation";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_max_fully_connected_depth[] = "max_fully_connected_depth";
static const char __pyx_k_analyze_single_probability[] = "analyze_single_probability";
static const char __pyx_k_classification_values_list[] = "classification_values_list";
static const char __pyx_k_probability_scaling_method[] = "probability_scaling_method";
static const char __pyx_k_unknown_independence_model[] = "unknown independence model";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_comb_feat_ind_to_feature_pair[] = "comb_feat_ind_to_feature_pair";
static const char __pyx_k_feature_pair_to_comb_feat_ind[] = "feature_pair_to_comb_feat_ind";
static const char __pyx_k_node_label_to_index_dict_list[] = "node_label_to_index_dict_list";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Can_only_use_independence_models[] = "Can only use independence models when max_fully_connected_depth>=2";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Cannot_set_parameter_no_such_par[] = "Cannot set parameter {}, no such parameter exists";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Input_does_not_have_correct_numb[] = "Input does not have correct number of features";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'counts_index'";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Trying_to_predict_without_callin[] = "Trying to predict without calling fit";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_feature_feature_name_dimension_d[] = "feature feature name dimension, {}, does not agree with array shape {}";
static const char __pyx_k_feature_weighted_probability_ori[] = "feature, weighted_probability, original_probability, weight\n";
static const char __pyx_k_full_tree_to_local_tree_lookup_l[] = "full_tree_to_local_tree_lookup_list";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_parent_not_found_something_is_br[] = "parent not found something is broken";
static const char __pyx_k_something_is_wrong_with_yo_indep[] = "something is wrong with yo independence, code broken";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'parents_index_begin'";
static const char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 'parents_index_end'";
static const char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'updated_index'";
static const char __pyx_k_No_value_specified_for_struct_at_5[] = "No value specified for struct attribute 'size'";
static const char __pyx_k_No_value_specified_for_struct_at_6[] = "No value specified for struct attribute 'depth'";
static const char __pyx_k_No_value_specified_for_struct_at_7[] = "No value specified for struct attribute 'parents_index_step'";
static PyObject *__pyx_kp_u_0_4g_1_4g;
static PyObject *__pyx_kp_u_0_4g_1_4g_2;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_BytesIO;
static PyObject *__pyx_n_u_C;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_u_Can_only_use_independence_models;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_kp_u_Cannot_set_parameter_no_such_par;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_u_F;
static PyObject *__pyx_kp_u_FX;
static PyObject *__pyx_n_u_F_2;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_u_Input_does_not_have_correct_numb;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_NP_FLOAT;
static PyObject *__pyx_n_s_NP_LONG;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_3;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_4;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_5;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_6;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_7;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_u_P;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_u_This_should_be_0;
static PyObject *__pyx_kp_u_This_should_be_1;
static PyObject *__pyx_kp_u_This_should_be_1_2;
static PyObject *__pyx_kp_u_Trying_to_predict_without_callin;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_u_Unknown_Scaling_Model;
static PyObject *__pyx_kp_u_Unknown_Usefulness_Model;
static PyObject *__pyx_kp_u_Unkown_node_split_model;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_kp_u_W_C;
static PyObject *__pyx_n_u_X;
static PyObject *__pyx_n_s_X_in;
static PyObject *__pyx_kp_u__14;
static PyObject *__pyx_kp_u__15;
static PyObject *__pyx_kp_u__16;
static PyObject *__pyx_kp_u__17;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u_a;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_amax;
static PyObject *__pyx_n_s_analyze_single_probability;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_argmax;
static PyObject *__pyx_n_s_argsort;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_astype;
static PyObject *__pyx_n_u_ave_corr;
static PyObject *__pyx_kp_u_average_correlation;
static PyObject *__pyx_kp_u_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_kp_u_bin_0;
static PyObject *__pyx_n_s_binning_method;
static PyObject *__pyx_n_u_binning_method;
static PyObject *__pyx_kp_u_by_feature_shared_csv;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_categorical_bin_list;
static PyObject *__pyx_n_u_categorical_bin_list;
static PyObject *__pyx_n_s_categorical_feature_inds;
static PyObject *__pyx_n_u_categorical_feature_inds;
static PyObject *__pyx_n_s_check_X_y;
static PyObject *__pyx_n_s_check_array;
static PyObject *__pyx_n_u_children_list;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_u_classes;
static PyObject *__pyx_n_u_classification_values_list;
static PyObject *__pyx_n_u_classifier;
static PyObject *__pyx_n_s_classify;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_u_comb_feat_ind_to_feature_pair;
static PyObject *__pyx_kp_u_combos_csv;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_kp_u_correlation;
static PyObject *__pyx_n_u_correlation_map;
static PyObject *__pyx_n_s_counts_index;
static PyObject *__pyx_n_s_deep;
static PyObject *__pyx_n_s_depth;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_example;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_kp_u_f1;
static PyObject *__pyx_kp_u_f1_comb;
static PyObject *__pyx_kp_u_f2;
static PyObject *__pyx_kp_u_f2_comb;
static PyObject *__pyx_kp_u_feature_feature_name_dimension_d;
static PyObject *__pyx_n_s_feature_names_txt;
static PyObject *__pyx_n_u_feature_names_txt;
static PyObject *__pyx_n_u_feature_pair_to_comb_feat_ind;
static PyObject *__pyx_kp_b_feature_weighted_probability_ori;
static PyObject *__pyx_n_s_features_per_node;
static PyObject *__pyx_n_u_features_per_node;
static PyObject *__pyx_n_s_filename_prefix;
static PyObject *__pyx_n_s_find_probability;
static PyObject *__pyx_n_s_fit;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_force_all_finite;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_full;
static PyObject *__pyx_n_u_full_tree_indicies_list;
static PyObject *__pyx_n_u_full_tree_to_local_tree_lookup_l;
static PyObject *__pyx_n_u_full_tree_vector;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_u_gini;
static PyObject *__pyx_n_u_gini_random;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_u_imbalanced_reciprocal;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_independence_model;
static PyObject *__pyx_n_u_independence_model;
static PyObject *__pyx_n_u_independence_model_c;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_io;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_kp_u_level;
static PyObject *__pyx_n_u_local_weight_tree;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_bins;
static PyObject *__pyx_n_u_max_bins;
static PyObject *__pyx_n_s_max_depth;
static PyObject *__pyx_n_u_max_depth;
static PyObject *__pyx_n_s_max_fully_connected_depth;
static PyObject *__pyx_n_u_max_fully_connected_depth;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_kp_u_n_11;
static PyObject *__pyx_kp_u_n_1x;
static PyObject *__pyx_n_u_n_classes;
static PyObject *__pyx_n_u_n_feature_categories;
static PyObject *__pyx_n_u_n_features;
static PyObject *__pyx_n_s_n_max_classify;
static PyObject *__pyx_n_u_n_max_classify;
static PyObject *__pyx_n_s_n_min_to_add_leaf;
static PyObject *__pyx_n_u_n_min_to_add_leaf;
static PyObject *__pyx_n_s_n_noise;
static PyObject *__pyx_n_u_n_noise;
static PyObject *__pyx_n_u_n_noise_obj;
static PyObject *__pyx_kp_u_n_x1;
static PyObject *__pyx_kp_u_n_xx;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nbins;
static PyObject *__pyx_n_u_nbins;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_newaxis;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_u_node_info;
static PyObject *__pyx_n_u_node_label_to_index_dict_list;
static PyObject *__pyx_n_s_node_split_fraction;
static PyObject *__pyx_n_u_node_split_fraction;
static PyObject *__pyx_n_u_node_split_fraction_obj;
static PyObject *__pyx_n_s_node_split_model;
static PyObject *__pyx_n_u_node_split_model;
static PyObject *__pyx_n_u_nodes;
static PyObject *__pyx_n_s_noise_exponent;
static PyObject *__pyx_n_u_noise_exponent;
static PyObject *__pyx_n_s_noise_exponent2;
static PyObject *__pyx_n_u_noise_exponent2;
static PyObject *__pyx_n_u_noise_exponent_obj;
static PyObject *__pyx_n_u_noise_scale;
static PyObject *__pyx_n_u_none;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numeric_bin_list;
static PyObject *__pyx_n_u_numeric_bin_list;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_kp_u_parent_not_found_something_is_br;
static PyObject *__pyx_n_s_parents_index_begin;
static PyObject *__pyx_n_s_parents_index_end;
static PyObject *__pyx_n_s_parents_index_step;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_predict_proba;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_probabilities;
static PyObject *__pyx_n_s_probability_scaling_method;
static PyObject *__pyx_n_u_probability_scaling_method;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_u_qcut;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_csv;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_u_results;
static PyObject *__pyx_n_s_save_intermediates;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_u_simple;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sklearn_utils_multiclass;
static PyObject *__pyx_n_s_sklearn_utils_validation;
static PyObject *__pyx_kp_u_something_is_wrong_with_yo_indep;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_kp_u_top_of_tree_csv;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unique_labels;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_kp_u_unknown_independence_model;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_updated_index;
static PyObject *__pyx_n_s_usefulness_model;
static PyObject *__pyx_n_u_usefulness_model;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_u_x;
static PyObject *__pyx_n_u_y;
static PyObject *__pyx_n_s_y_in;
static PyObject *__pyx_n_s_y_numeric;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_fully_connected_depth, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_depth, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_features_per_node, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_max_classify, PyObject *__pyx_v_n_noise, PyObject *__pyx_v_usefulness_model, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_min_to_add_leaf, PyObject *__pyx_v_node_split_model, PyObject *__pyx_v_node_split_fraction, PyObject *__pyx_v_probability_scaling_method, PyObject *__pyx_v_noise_exponent, PyObject *__pyx_v_noise_exponent2, PyObject *__pyx_v_independence_model, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_nbins, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_bins, PyObject *__pyx_v_categorical_feature_inds, PyObject *__pyx_v_binning_method, PyObject *__pyx_v_feature_names_txt, PyObject *__pyx_v_categorical_bin_list, PyObject *__pyx_v_numeric_bin_list); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_2__getstate__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_4__setstate__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_state_dict); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_6get_params(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_deep); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8set_params(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_parameters); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_10fit(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X_in, PyObject *__pyx_v_y_in, PyObject *__pyx_v_feature_names_txt, PyObject *__pyx_v_categorical_bin_list, PyObject *__pyx_v_numeric_bin_list); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_12predict(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14classify(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_probabilities, PyObject *__pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16predict_proba(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18find_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __Pyx_memviewslice __pyx_v_example, int __pyx_v_save_intermediates); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_20analyze_single_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_example, PyObject *__pyx_v_filename_prefix); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes____get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9n_classes___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6awe_ml_17classifier_cython_AWE_ML_Cython(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static PyObject *__pyx_float_0_4;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__7;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__13;
static PyObject *__pyx_slice__19;
static PyObject *__pyx_slice__21;
static PyObject *__pyx_slice__23;
static PyObject *__pyx_slice__25;
static PyObject *__pyx_slice__58;
static PyObject *__pyx_slice__59;
static PyObject *__pyx_slice__60;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_codeobj__70;
/* Late includes */

/* "awe_ml/classifier_cython.pyx":125
 * ########################################################################
 * 
 * cdef void pair_sort (pair[np_long,np_long] & pair_to_sort):             # <<<<<<<<<<<<<<
 *     """
 *     Sort a pair of long in place
 */

static void __pyx_f_6awe_ml_17classifier_cython_pair_sort(std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_pair_to_sort) {
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_temp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_2;
  __Pyx_RefNannySetupContext("pair_sort", 0);

  /* "awe_ml/classifier_cython.pyx":132
 *     """
 *     cdef np_long temp
 *     if pair_to_sort.second<pair_to_sort.first: #sort the label pair             # <<<<<<<<<<<<<<
 *         temp = pair_to_sort.first
 *         pair_to_sort.first = pair_to_sort.second
 */
  __pyx_t_1 = ((__pyx_v_pair_to_sort.second < __pyx_v_pair_to_sort.first) != 0);
  if (__pyx_t_1) {

    /* "awe_ml/classifier_cython.pyx":133
 *     cdef np_long temp
 *     if pair_to_sort.second<pair_to_sort.first: #sort the label pair
 *         temp = pair_to_sort.first             # <<<<<<<<<<<<<<
 *         pair_to_sort.first = pair_to_sort.second
 *         pair_to_sort.second = temp
 */
    __pyx_t_2 = __pyx_v_pair_to_sort.first;
    __pyx_v_temp = __pyx_t_2;

    /* "awe_ml/classifier_cython.pyx":134
 *     if pair_to_sort.second<pair_to_sort.first: #sort the label pair
 *         temp = pair_to_sort.first
 *         pair_to_sort.first = pair_to_sort.second             # <<<<<<<<<<<<<<
 *         pair_to_sort.second = temp
 * 
 */
    __pyx_t_2 = __pyx_v_pair_to_sort.second;
    __pyx_v_pair_to_sort.first = __pyx_t_2;

    /* "awe_ml/classifier_cython.pyx":135
 *         temp = pair_to_sort.first
 *         pair_to_sort.first = pair_to_sort.second
 *         pair_to_sort.second = temp             # <<<<<<<<<<<<<<
 * 
 * ########### Define helper functions used to calculate intermediate values (usefulnes, scaling weight)
 */
    __pyx_v_pair_to_sort.second = __pyx_v_temp;

    /* "awe_ml/classifier_cython.pyx":132
 *     """
 *     cdef np_long temp
 *     if pair_to_sort.second<pair_to_sort.first: #sort the label pair             # <<<<<<<<<<<<<<
 *         temp = pair_to_sort.first
 *         pair_to_sort.first = pair_to_sort.second
 */
  }

  /* "awe_ml/classifier_cython.pyx":125
 * ########################################################################
 * 
 * cdef void pair_sort (pair[np_long,np_long] & pair_to_sort):             # <<<<<<<<<<<<<<
 *     """
 *     Sort a pair of long in place
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/helperfunctions.pxi":5
 * ########### Define helper functions used to calculate intermediate values (usefulnes, scaling weight)
 * @cython.profile(False)
 * cdef inline void calculate_usefulness_simple(np_float * p_child, np_float * p_parent, vector[np_float] & return_vec):             # <<<<<<<<<<<<<<
 *     """
 *     Calculate simple usefulness model (all input vectors of length self.n_classes) cython calls python when retuning a memview
 */

static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_simple(__pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p_child, __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p_parent, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &__pyx_v_return_vec) {
  unsigned int __pyx_v_class_num;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_usefulness;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_1;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("calculate_usefulness_simple", 0);

  /* "awe_ml/helperfunctions.pxi":14
 *     """
 *     cdef unsigned int class_num
 *     cdef np_float usefulness=0             # <<<<<<<<<<<<<<
 * 
 *     for class_num in range(return_vec.size()):
 */
  __pyx_v_usefulness = 0.0;

  /* "awe_ml/helperfunctions.pxi":16
 *     cdef np_float usefulness=0
 * 
 *     for class_num in range(return_vec.size()):             # <<<<<<<<<<<<<<
 * 
 *         if p_child[class_num] !=p_parent[class_num]:
 */
  __pyx_t_1 = __pyx_v_return_vec.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_class_num = __pyx_t_3;

    /* "awe_ml/helperfunctions.pxi":18
 *     for class_num in range(return_vec.size()):
 * 
 *         if p_child[class_num] !=p_parent[class_num]:             # <<<<<<<<<<<<<<
 *             usefulness+= abs(p_child[class_num]-p_parent[class_num])/(p_child[class_num]+p_parent[class_num])
 * 
 */
    __pyx_t_4 = (((__pyx_v_p_child[__pyx_v_class_num]) != (__pyx_v_p_parent[__pyx_v_class_num])) != 0);
    if (__pyx_t_4) {

      /* "awe_ml/helperfunctions.pxi":19
 * 
 *         if p_child[class_num] !=p_parent[class_num]:
 *             usefulness+= abs(p_child[class_num]-p_parent[class_num])/(p_child[class_num]+p_parent[class_num])             # <<<<<<<<<<<<<<
 * 
 *     # store result to pre-initialized data result memory
 */
      __pyx_v_usefulness = (__pyx_v_usefulness + (((__pyx_t_6awe_ml_17classifier_cython_np_float)fabs(((__pyx_v_p_child[__pyx_v_class_num]) - (__pyx_v_p_parent[__pyx_v_class_num])))) / ((__pyx_v_p_child[__pyx_v_class_num]) + (__pyx_v_p_parent[__pyx_v_class_num]))));

      /* "awe_ml/helperfunctions.pxi":18
 *     for class_num in range(return_vec.size()):
 * 
 *         if p_child[class_num] !=p_parent[class_num]:             # <<<<<<<<<<<<<<
 *             usefulness+= abs(p_child[class_num]-p_parent[class_num])/(p_child[class_num]+p_parent[class_num])
 * 
 */
    }
  }

  /* "awe_ml/helperfunctions.pxi":22
 * 
 *     # store result to pre-initialized data result memory
 *     for class_num in range(return_vec.size()):             # <<<<<<<<<<<<<<
 *         return_vec[class_num]=usefulness
 * 
 */
  __pyx_t_1 = __pyx_v_return_vec.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_class_num = __pyx_t_3;

    /* "awe_ml/helperfunctions.pxi":23
 *     # store result to pre-initialized data result memory
 *     for class_num in range(return_vec.size()):
 *         return_vec[class_num]=usefulness             # <<<<<<<<<<<<<<
 * 
 * @cython.profile(False)
 */
    (__pyx_v_return_vec[__pyx_v_class_num]) = __pyx_v_usefulness;
  }

  /* "awe_ml/helperfunctions.pxi":5
 * ########### Define helper functions used to calculate intermediate values (usefulnes, scaling weight)
 * @cython.profile(False)
 * cdef inline void calculate_usefulness_simple(np_float * p_child, np_float * p_parent, vector[np_float] & return_vec):             # <<<<<<<<<<<<<<
 *     """
 *     Calculate simple usefulness model (all input vectors of length self.n_classes) cython calls python when retuning a memview
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/helperfunctions.pxi":26
 * 
 * @cython.profile(False)
 * cdef inline void calculate_usefulness_scaled_per_class(np_float * child_scaled_p, np_float * parent_scaled_p, vector[np_float] & return_vec):             # <<<<<<<<<<<<<<
 *     """
 *     Calculate usefulness model based on probability scaling independently for each class
 */

static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_scaled_per_class(__pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_child_scaled_p, __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_parent_scaled_p, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &__pyx_v_return_vec) {
  unsigned int __pyx_v_class_num;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_1;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_2;
  unsigned int __pyx_t_3;
  __Pyx_RefNannySetupContext("calculate_usefulness_scaled_per_class", 0);

  /* "awe_ml/helperfunctions.pxi":32
 *     cdef unsigned int class_num
 * 
 *     for class_num in range(return_vec.size()):             # <<<<<<<<<<<<<<
 *         return_vec[class_num]= abs(child_scaled_p[class_num]-parent_scaled_p[class_num])
 * 
 */
  __pyx_t_1 = __pyx_v_return_vec.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_class_num = __pyx_t_3;

    /* "awe_ml/helperfunctions.pxi":33
 * 
 *     for class_num in range(return_vec.size()):
 *         return_vec[class_num]= abs(child_scaled_p[class_num]-parent_scaled_p[class_num])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_return_vec[__pyx_v_class_num]) = fabs(((__pyx_v_child_scaled_p[__pyx_v_class_num]) - (__pyx_v_parent_scaled_p[__pyx_v_class_num])));
  }

  /* "awe_ml/helperfunctions.pxi":26
 * 
 * @cython.profile(False)
 * cdef inline void calculate_usefulness_scaled_per_class(np_float * child_scaled_p, np_float * parent_scaled_p, vector[np_float] & return_vec):             # <<<<<<<<<<<<<<
 *     """
 *     Calculate usefulness model based on probability scaling independently for each class
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/helperfunctions.pxi":39
 * 
 * @cython.profile(False)
 * cdef inline void calculate_usefulness_none(np_float * p_child, np_float * p_parent, vector[np_float] & return_vec):             # <<<<<<<<<<<<<<
 *     # store 1 to pre-initialized data result memory
 *     cdef unsigned int class_num
 */

static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_none(CYTHON_UNUSED __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p_child, CYTHON_UNUSED __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p_parent, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &__pyx_v_return_vec) {
  unsigned int __pyx_v_class_num;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_1;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_2;
  unsigned int __pyx_t_3;
  __Pyx_RefNannySetupContext("calculate_usefulness_none", 0);

  /* "awe_ml/helperfunctions.pxi":42
 *     # store 1 to pre-initialized data result memory
 *     cdef unsigned int class_num
 *     for class_num in range(return_vec.size()):             # <<<<<<<<<<<<<<
 *         return_vec[class_num]=1
 * 
 */
  __pyx_t_1 = __pyx_v_return_vec.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_class_num = __pyx_t_3;

    /* "awe_ml/helperfunctions.pxi":43
 *     cdef unsigned int class_num
 *     for class_num in range(return_vec.size()):
 *         return_vec[class_num]=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_return_vec[__pyx_v_class_num]) = 1.0;
  }

  /* "awe_ml/helperfunctions.pxi":39
 * 
 * @cython.profile(False)
 * cdef inline void calculate_usefulness_none(np_float * p_child, np_float * p_parent, vector[np_float] & return_vec):             # <<<<<<<<<<<<<<
 *     # store 1 to pre-initialized data result memory
 *     cdef unsigned int class_num
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/helperfunctions.pxi":63
 * 
 * @cython.profile(False)
 * cdef inline void compute_scaling_weights_reciprocal(const np_float & n_noise, np_float * p, const np_float & total_count, vector[np_float] & result):             # <<<<<<<<<<<<<<
 *     """
 *     computes the weight scaling that increases the weight as the probability approaches 0 or 1
 */

static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal(__pyx_t_6awe_ml_17classifier_cython_np_float const &__pyx_v_n_noise, __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p, __pyx_t_6awe_ml_17classifier_cython_np_float const &__pyx_v_total_count, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &__pyx_v_result) {
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_clipped_p;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_p_limit;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_v_class_ind;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_2;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_3;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_4;
  __Pyx_RefNannySetupContext("compute_scaling_weights_reciprocal", 0);

  /* "awe_ml/helperfunctions.pxi":73
 *     """
 *     # clip probability for computing scale based on the counts
 *     cdef np_float clipped_p, p_limit = 0.5             # <<<<<<<<<<<<<<
 * 
 *     if total_count>2*n_noise:
 */
  __pyx_v_p_limit = 0.5;

  /* "awe_ml/helperfunctions.pxi":75
 *     cdef np_float clipped_p, p_limit = 0.5
 * 
 *     if total_count>2*n_noise:             # <<<<<<<<<<<<<<
 *         p_limit =  n_noise/total_count
 * 
 */
  __pyx_t_1 = ((__pyx_v_total_count > (2.0 * __pyx_v_n_noise)) != 0);
  if (__pyx_t_1) {

    /* "awe_ml/helperfunctions.pxi":76
 * 
 *     if total_count>2*n_noise:
 *         p_limit =  n_noise/total_count             # <<<<<<<<<<<<<<
 * 
 *     for class_ind in range(result.size()):
 */
    __pyx_v_p_limit = (((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_n_noise) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_total_count));

    /* "awe_ml/helperfunctions.pxi":75
 *     cdef np_float clipped_p, p_limit = 0.5
 * 
 *     if total_count>2*n_noise:             # <<<<<<<<<<<<<<
 *         p_limit =  n_noise/total_count
 * 
 */
  }

  /* "awe_ml/helperfunctions.pxi":78
 *         p_limit =  n_noise/total_count
 * 
 *     for class_ind in range(result.size()):             # <<<<<<<<<<<<<<
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit
 */
  __pyx_t_2 = __pyx_v_result.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_class_ind = __pyx_t_4;

    /* "awe_ml/helperfunctions.pxi":79
 * 
 *     for class_ind in range(result.size()):
 *         if p[class_ind]<p_limit:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):
 */
    __pyx_t_1 = (((__pyx_v_p[__pyx_v_class_ind]) < __pyx_v_p_limit) != 0);
    if (__pyx_t_1) {

      /* "awe_ml/helperfunctions.pxi":80
 *     for class_ind in range(result.size()):
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit             # <<<<<<<<<<<<<<
 *         elif p[class_ind]>(1-p_limit):
 *             clipped_p = 1-p_limit
 */
      __pyx_v_clipped_p = __pyx_v_p_limit;

      /* "awe_ml/helperfunctions.pxi":79
 * 
 *     for class_ind in range(result.size()):
 *         if p[class_ind]<p_limit:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):
 */
      goto __pyx_L6;
    }

    /* "awe_ml/helperfunctions.pxi":81
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):             # <<<<<<<<<<<<<<
 *             clipped_p = 1-p_limit
 *         else:
 */
    __pyx_t_1 = (((__pyx_v_p[__pyx_v_class_ind]) > (1.0 - __pyx_v_p_limit)) != 0);
    if (__pyx_t_1) {

      /* "awe_ml/helperfunctions.pxi":82
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):
 *             clipped_p = 1-p_limit             # <<<<<<<<<<<<<<
 *         else:
 *             clipped_p = p[class_ind]
 */
      __pyx_v_clipped_p = (1.0 - __pyx_v_p_limit);

      /* "awe_ml/helperfunctions.pxi":81
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):             # <<<<<<<<<<<<<<
 *             clipped_p = 1-p_limit
 *         else:
 */
      goto __pyx_L6;
    }

    /* "awe_ml/helperfunctions.pxi":84
 *             clipped_p = 1-p_limit
 *         else:
 *             clipped_p = p[class_ind]             # <<<<<<<<<<<<<<
 * 
 *         result[class_ind]= 1/(clipped_p*(1-clipped_p))
 */
    /*else*/ {
      __pyx_v_clipped_p = (__pyx_v_p[__pyx_v_class_ind]);
    }
    __pyx_L6:;

    /* "awe_ml/helperfunctions.pxi":86
 *             clipped_p = p[class_ind]
 * 
 *         result[class_ind]= 1/(clipped_p*(1-clipped_p))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_result[__pyx_v_class_ind]) = (1.0 / (__pyx_v_clipped_p * (1.0 - __pyx_v_clipped_p)));
  }

  /* "awe_ml/helperfunctions.pxi":63
 * 
 * @cython.profile(False)
 * cdef inline void compute_scaling_weights_reciprocal(const np_float & n_noise, np_float * p, const np_float & total_count, vector[np_float] & result):             # <<<<<<<<<<<<<<
 *     """
 *     computes the weight scaling that increases the weight as the probability approaches 0 or 1
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/helperfunctions.pxi":90
 * 
 * @cython.profile(False)
 * cdef inline void compute_scaling_weights_reciprocal_class_imbalance (const np_float & n_noise, np_float * p, const np_float & total_count, const vector[np_float] & class_p, vector[np_float] & result):             # <<<<<<<<<<<<<<
 *     """
 *     computes the weight scaling that increases the weight as the probability approaches 0 or 1
 */

static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal_class_imbalance(__pyx_t_6awe_ml_17classifier_cython_np_float const &__pyx_v_n_noise, __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p, __pyx_t_6awe_ml_17classifier_cython_np_float const &__pyx_v_total_count, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  const &__pyx_v_class_p, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &__pyx_v_result) {
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_clipped_p;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_p_limit_max;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_p_limit_min;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_v_class_ind;
  __Pyx_RefNannyDeclarations
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_1;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_2;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_3;
  double __pyx_t_4;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_5;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("compute_scaling_weights_reciprocal_class_imbalance", 0);

  /* "awe_ml/helperfunctions.pxi":104
 * 
 * 
 *     for class_ind in range(result.size()):             # <<<<<<<<<<<<<<
 *         p_limit_max =  max(1-class_p[class_ind]*n_noise/total_count,0.5)
 *         p_limit_min =  min((1-class_p[class_ind])*n_noise/total_count,0.5)
 */
  __pyx_t_1 = __pyx_v_result.size();
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_class_ind = __pyx_t_3;

    /* "awe_ml/helperfunctions.pxi":105
 * 
 *     for class_ind in range(result.size()):
 *         p_limit_max =  max(1-class_p[class_ind]*n_noise/total_count,0.5)             # <<<<<<<<<<<<<<
 *         p_limit_min =  min((1-class_p[class_ind])*n_noise/total_count,0.5)
 * 
 */
    __pyx_t_4 = 0.5;
    __pyx_t_5 = (1.0 - (((__pyx_v_class_p[__pyx_v_class_ind]) * __pyx_v_n_noise) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_total_count)));
    if (((__pyx_t_4 > __pyx_t_5) != 0)) {
      __pyx_t_6 = __pyx_t_4;
    } else {
      __pyx_t_6 = __pyx_t_5;
    }
    __pyx_v_p_limit_max = __pyx_t_6;

    /* "awe_ml/helperfunctions.pxi":106
 *     for class_ind in range(result.size()):
 *         p_limit_max =  max(1-class_p[class_ind]*n_noise/total_count,0.5)
 *         p_limit_min =  min((1-class_p[class_ind])*n_noise/total_count,0.5)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = 0.5;
    __pyx_t_6 = (((1.0 - (__pyx_v_class_p[__pyx_v_class_ind])) * __pyx_v_n_noise) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_total_count));
    if (((__pyx_t_4 < __pyx_t_6) != 0)) {
      __pyx_t_5 = __pyx_t_4;
    } else {
      __pyx_t_5 = __pyx_t_6;
    }
    __pyx_v_p_limit_min = __pyx_t_5;

    /* "awe_ml/helperfunctions.pxi":109
 * 
 * 
 *         if p[class_ind]<p_limit_min:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit_min
 *         elif p[class_ind]>p_limit_max:
 */
    __pyx_t_7 = (((__pyx_v_p[__pyx_v_class_ind]) < __pyx_v_p_limit_min) != 0);
    if (__pyx_t_7) {

      /* "awe_ml/helperfunctions.pxi":110
 * 
 *         if p[class_ind]<p_limit_min:
 *             clipped_p = p_limit_min             # <<<<<<<<<<<<<<
 *         elif p[class_ind]>p_limit_max:
 *             clipped_p = p_limit_max
 */
      __pyx_v_clipped_p = __pyx_v_p_limit_min;

      /* "awe_ml/helperfunctions.pxi":109
 * 
 * 
 *         if p[class_ind]<p_limit_min:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit_min
 *         elif p[class_ind]>p_limit_max:
 */
      goto __pyx_L5;
    }

    /* "awe_ml/helperfunctions.pxi":111
 *         if p[class_ind]<p_limit_min:
 *             clipped_p = p_limit_min
 *         elif p[class_ind]>p_limit_max:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit_max
 *         else:
 */
    __pyx_t_7 = (((__pyx_v_p[__pyx_v_class_ind]) > __pyx_v_p_limit_max) != 0);
    if (__pyx_t_7) {

      /* "awe_ml/helperfunctions.pxi":112
 *             clipped_p = p_limit_min
 *         elif p[class_ind]>p_limit_max:
 *             clipped_p = p_limit_max             # <<<<<<<<<<<<<<
 *         else:
 *             clipped_p = p[class_ind]
 */
      __pyx_v_clipped_p = __pyx_v_p_limit_max;

      /* "awe_ml/helperfunctions.pxi":111
 *         if p[class_ind]<p_limit_min:
 *             clipped_p = p_limit_min
 *         elif p[class_ind]>p_limit_max:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit_max
 *         else:
 */
      goto __pyx_L5;
    }

    /* "awe_ml/helperfunctions.pxi":114
 *             clipped_p = p_limit_max
 *         else:
 *             clipped_p = p[class_ind]             # <<<<<<<<<<<<<<
 * 
 *         result[class_ind]= 1/(clipped_p*(1-clipped_p))
 */
    /*else*/ {
      __pyx_v_clipped_p = (__pyx_v_p[__pyx_v_class_ind]);
    }
    __pyx_L5:;

    /* "awe_ml/helperfunctions.pxi":116
 *             clipped_p = p[class_ind]
 * 
 *         result[class_ind]= 1/(clipped_p*(1-clipped_p))             # <<<<<<<<<<<<<<
 * 
 * #
 */
    (__pyx_v_result[__pyx_v_class_ind]) = (1.0 / (__pyx_v_clipped_p * (1.0 - __pyx_v_clipped_p)));
  }

  /* "awe_ml/helperfunctions.pxi":90
 * 
 * @cython.profile(False)
 * cdef inline void compute_scaling_weights_reciprocal_class_imbalance (const np_float & n_noise, np_float * p, const np_float & total_count, const vector[np_float] & class_p, vector[np_float] & result):             # <<<<<<<<<<<<<<
 *     """
 *     computes the weight scaling that increases the weight as the probability approaches 0 or 1
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/helperfunctions.pxi":151
 * 
 * @cython.profile(False)
 * cdef inline void compute_scaling_weights_logit(const np_float & n_noise, np_float * p, const np_float & total_count, vector[np_float] & result):             # <<<<<<<<<<<<<<
 *     # clip probability for computing scale based on the counts
 *     cdef np_float clipped_p, p_limit = 0.5
 */

static CYTHON_INLINE void __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_logit(__pyx_t_6awe_ml_17classifier_cython_np_float const &__pyx_v_n_noise, __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p, __pyx_t_6awe_ml_17classifier_cython_np_float const &__pyx_v_total_count, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &__pyx_v_result) {
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_clipped_p;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_p_limit;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_v_class_ind;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_2;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_3;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_4;
  __Pyx_RefNannySetupContext("compute_scaling_weights_logit", 0);

  /* "awe_ml/helperfunctions.pxi":153
 * cdef inline void compute_scaling_weights_logit(const np_float & n_noise, np_float * p, const np_float & total_count, vector[np_float] & result):
 *     # clip probability for computing scale based on the counts
 *     cdef np_float clipped_p, p_limit = 0.5             # <<<<<<<<<<<<<<
 * 
 *     if total_count>2*n_noise:
 */
  __pyx_v_p_limit = 0.5;

  /* "awe_ml/helperfunctions.pxi":155
 *     cdef np_float clipped_p, p_limit = 0.5
 * 
 *     if total_count>2*n_noise:             # <<<<<<<<<<<<<<
 *         p_limit =  n_noise/total_count
 * 
 */
  __pyx_t_1 = ((__pyx_v_total_count > (2.0 * __pyx_v_n_noise)) != 0);
  if (__pyx_t_1) {

    /* "awe_ml/helperfunctions.pxi":156
 * 
 *     if total_count>2*n_noise:
 *         p_limit =  n_noise/total_count             # <<<<<<<<<<<<<<
 * 
 *     for class_ind in range(result.size()):
 */
    __pyx_v_p_limit = (((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_n_noise) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_total_count));

    /* "awe_ml/helperfunctions.pxi":155
 *     cdef np_float clipped_p, p_limit = 0.5
 * 
 *     if total_count>2*n_noise:             # <<<<<<<<<<<<<<
 *         p_limit =  n_noise/total_count
 * 
 */
  }

  /* "awe_ml/helperfunctions.pxi":158
 *         p_limit =  n_noise/total_count
 * 
 *     for class_ind in range(result.size()):             # <<<<<<<<<<<<<<
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit
 */
  __pyx_t_2 = __pyx_v_result.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_class_ind = __pyx_t_4;

    /* "awe_ml/helperfunctions.pxi":159
 * 
 *     for class_ind in range(result.size()):
 *         if p[class_ind]<p_limit:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):
 */
    __pyx_t_1 = (((__pyx_v_p[__pyx_v_class_ind]) < __pyx_v_p_limit) != 0);
    if (__pyx_t_1) {

      /* "awe_ml/helperfunctions.pxi":160
 *     for class_ind in range(result.size()):
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit             # <<<<<<<<<<<<<<
 *         elif p[class_ind]>(1-p_limit):
 *             clipped_p = 1-p_limit
 */
      __pyx_v_clipped_p = __pyx_v_p_limit;

      /* "awe_ml/helperfunctions.pxi":159
 * 
 *     for class_ind in range(result.size()):
 *         if p[class_ind]<p_limit:             # <<<<<<<<<<<<<<
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):
 */
      goto __pyx_L6;
    }

    /* "awe_ml/helperfunctions.pxi":161
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):             # <<<<<<<<<<<<<<
 *             clipped_p = 1-p_limit
 *         else:
 */
    __pyx_t_1 = (((__pyx_v_p[__pyx_v_class_ind]) > (1.0 - __pyx_v_p_limit)) != 0);
    if (__pyx_t_1) {

      /* "awe_ml/helperfunctions.pxi":162
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):
 *             clipped_p = 1-p_limit             # <<<<<<<<<<<<<<
 *         else:
 *             clipped_p = p[class_ind]
 */
      __pyx_v_clipped_p = (1.0 - __pyx_v_p_limit);

      /* "awe_ml/helperfunctions.pxi":161
 *         if p[class_ind]<p_limit:
 *             clipped_p = p_limit
 *         elif p[class_ind]>(1-p_limit):             # <<<<<<<<<<<<<<
 *             clipped_p = 1-p_limit
 *         else:
 */
      goto __pyx_L6;
    }

    /* "awe_ml/helperfunctions.pxi":164
 *             clipped_p = 1-p_limit
 *         else:
 *             clipped_p = p[class_ind]             # <<<<<<<<<<<<<<
 * 
 *         if clipped_p==0.5:
 */
    /*else*/ {
      __pyx_v_clipped_p = (__pyx_v_p[__pyx_v_class_ind]);
    }
    __pyx_L6:;

    /* "awe_ml/helperfunctions.pxi":166
 *             clipped_p = p[class_ind]
 * 
 *         if clipped_p==0.5:             # <<<<<<<<<<<<<<
 *             result[class_ind] = 4
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_clipped_p == 0.5) != 0);
    if (__pyx_t_1) {

      /* "awe_ml/helperfunctions.pxi":167
 * 
 *         if clipped_p==0.5:
 *             result[class_ind] = 4             # <<<<<<<<<<<<<<
 *         else:
 *             result[class_ind] = log(clipped_p/(1-clipped_p)) / (clipped_p-0.5)
 */
      (__pyx_v_result[__pyx_v_class_ind]) = 4.0;

      /* "awe_ml/helperfunctions.pxi":166
 *             clipped_p = p[class_ind]
 * 
 *         if clipped_p==0.5:             # <<<<<<<<<<<<<<
 *             result[class_ind] = 4
 *         else:
 */
      goto __pyx_L7;
    }

    /* "awe_ml/helperfunctions.pxi":169
 *             result[class_ind] = 4
 *         else:
 *             result[class_ind] = log(clipped_p/(1-clipped_p)) / (clipped_p-0.5)             # <<<<<<<<<<<<<<
 */
    /*else*/ {
      (__pyx_v_result[__pyx_v_class_ind]) = (((__pyx_t_6awe_ml_17classifier_cython_np_float)log((__pyx_v_clipped_p / (1.0 - __pyx_v_clipped_p)))) / (__pyx_v_clipped_p - 0.5));
    }
    __pyx_L7:;
  }

  /* "awe_ml/helperfunctions.pxi":151
 * 
 * @cython.profile(False)
 * cdef inline void compute_scaling_weights_logit(const np_float & n_noise, np_float * p, const np_float & total_count, vector[np_float] & result):             # <<<<<<<<<<<<<<
 *     # clip probability for computing scale based on the counts
 *     cdef np_float clipped_p, p_limit = 0.5
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/data_structures.pxi":7
 * 
 * @cython.profile(False)
 * cdef void initialize_node(node_info_t & node, const np_long & n_classes, const np_long & depth ):             # <<<<<<<<<<<<<<
 *     node.depth = depth
 *     node.counts_index = 0
 */

static void __pyx_f_6awe_ml_17classifier_cython_initialize_node(struct __pyx_t_6awe_ml_17classifier_cython_node_info_t &__pyx_v_node, __pyx_t_6awe_ml_17classifier_cython_np_long const &__pyx_v_n_classes, __pyx_t_6awe_ml_17classifier_cython_np_long const &__pyx_v_depth) {
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __Pyx_RefNannySetupContext("initialize_node", 0);

  /* "awe_ml/data_structures.pxi":8
 * @cython.profile(False)
 * cdef void initialize_node(node_info_t & node, const np_long & n_classes, const np_long & depth ):
 *     node.depth = depth             # <<<<<<<<<<<<<<
 *     node.counts_index = 0
 *     node.parents_index_step = depth-1  #for level 1 the parent has no label, i.e. there is no feature # for top level node
 */
  __pyx_v_node.depth = __pyx_v_depth;

  /* "awe_ml/data_structures.pxi":9
 * cdef void initialize_node(node_info_t & node, const np_long & n_classes, const np_long & depth ):
 *     node.depth = depth
 *     node.counts_index = 0             # <<<<<<<<<<<<<<
 *     node.parents_index_step = depth-1  #for level 1 the parent has no label, i.e. there is no feature # for top level node
 *     node.parents_index_begin = n_classes
 */
  __pyx_v_node.counts_index = 0;

  /* "awe_ml/data_structures.pxi":10
 *     node.depth = depth
 *     node.counts_index = 0
 *     node.parents_index_step = depth-1  #for level 1 the parent has no label, i.e. there is no feature # for top level node             # <<<<<<<<<<<<<<
 *     node.parents_index_begin = n_classes
 *     node.parents_index_end = n_classes + depth*node.parents_index_step
 */
  __pyx_v_node.parents_index_step = (__pyx_v_depth - 1);

  /* "awe_ml/data_structures.pxi":11
 *     node.counts_index = 0
 *     node.parents_index_step = depth-1  #for level 1 the parent has no label, i.e. there is no feature # for top level node
 *     node.parents_index_begin = n_classes             # <<<<<<<<<<<<<<
 *     node.parents_index_end = n_classes + depth*node.parents_index_step
 *     node.updated_index = node.parents_index_end
 */
  __pyx_v_node.parents_index_begin = __pyx_v_n_classes;

  /* "awe_ml/data_structures.pxi":12
 *     node.parents_index_step = depth-1  #for level 1 the parent has no label, i.e. there is no feature # for top level node
 *     node.parents_index_begin = n_classes
 *     node.parents_index_end = n_classes + depth*node.parents_index_step             # <<<<<<<<<<<<<<
 *     node.updated_index = node.parents_index_end
 *     node.size = node.updated_index+1
 */
  __pyx_v_node.parents_index_end = (__pyx_v_n_classes + (__pyx_v_depth * __pyx_v_node.parents_index_step));

  /* "awe_ml/data_structures.pxi":13
 *     node.parents_index_begin = n_classes
 *     node.parents_index_end = n_classes + depth*node.parents_index_step
 *     node.updated_index = node.parents_index_end             # <<<<<<<<<<<<<<
 *     node.size = node.updated_index+1
 * 
 */
  __pyx_t_1 = __pyx_v_node.parents_index_end;
  __pyx_v_node.updated_index = __pyx_t_1;

  /* "awe_ml/data_structures.pxi":14
 *     node.parents_index_end = n_classes + depth*node.parents_index_step
 *     node.updated_index = node.parents_index_end
 *     node.size = node.updated_index+1             # <<<<<<<<<<<<<<
 * 
 * #### define data structure to store indicies into a classfication values list
 */
  __pyx_v_node.size = (__pyx_v_node.updated_index + 1);

  /* "awe_ml/data_structures.pxi":7
 * 
 * @cython.profile(False)
 * cdef void initialize_node(node_info_t & node, const np_long & n_classes, const np_long & depth ):             # <<<<<<<<<<<<<<
 *     node.depth = depth
 *     node.counts_index = 0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/classifier_cython.pyx":198
 * 
 * 
 *     def __init__(self, np_long max_fully_connected_depth=2, np_long max_depth = 4, np_long features_per_node=5, np_long n_max_classify=10,             # <<<<<<<<<<<<<<
 *                  object n_noise=0.5, str usefulness_model = "simple",  #simple
 *                  np_long n_min_to_add_leaf=2, str node_split_model = "gini_random", object node_split_fraction=0.4,
 */

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__[] = "\n        Assumes all categorical features are enumerated from 0 to N-1.  Will fail if they are not correctly enumerated\n        Missing values are encoded as -1\n\n\n        :param max_fully_connected_depth: the max depth of fully connected layers (2 means all pairs of features)\n        :param n_max_classify:\n        :param n_jobs: number of parallel job to run\n        :param max_depth: Max depth of the tree including entropy and other feature based nodes, 0 means unlimited\n        :param n_min_to_add_leaf: minimum number of data points to add a leaf node.\n        :param numerical_features:  which features are continuous. By default, it's assumed all features are categorical.\n        :param node_split_model: What method to use when choosing features at each node.  Options are:\n            gini:  gini coeficient\n            gini_random:  randomly choose node_split_fraction of features and then take top features by gini\n        :param node_split_fraction: what fraction of features to use when doing gini random\n        :param probability_scaling_method: method for scaling the raw probabilites.  options are \"logit\" and \"reciprocal\"\n        :param noise_exponent:  exponent used when deciding how much to weight child vs parent node when child does not have enough data\n        :param usefulness_model: what model to use to account for the usefulness of a feature.  options are, \"none\", \"simple\", and \"KL\"\n        :param n_noise:  The number of examples that might be wrong due to noise.  Used to limit the probability scaling\n        :param features_per_node: The number of features to add levels that are not fully connected\n        :param independence_model:  What model to use for feature independence, options are \"none\" and \"standard\"\n\n        :param nbins: how many bins to divide data into, 0 means do not bin data\n        :param max_bins:  if num bins in a column <= max bins do not bin data, if max_bins==0, assume all data is categorical\n   ""     :param categorical_feature_inds: what features are categorical for binning\n        :param binning_method:  method used to bin data, only option currently is \"qcut\": Data is divided into equal sized bins.\n                            If most frequent value is first/last data value and has more counts than n_entries / nbins create\n                            single bin for most frequent value and split other values equally\n\n        :param feature_names_txt: list of strings of labels for each feature for explainability output\n        :param categorical_bin_list: list of tuples (col, dictionary mapping category number to category)\n        :param numeric_bin_list: list of tuples (col, numpy array of bins) Each bin includes rightmost edge, not left (leftmost edge is also included)\n        :return:\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__;
#endif
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_fully_connected_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_features_per_node;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_max_classify;
  PyObject *__pyx_v_n_noise = 0;
  PyObject *__pyx_v_usefulness_model = 0;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_min_to_add_leaf;
  PyObject *__pyx_v_node_split_model = 0;
  PyObject *__pyx_v_node_split_fraction = 0;
  PyObject *__pyx_v_probability_scaling_method = 0;
  PyObject *__pyx_v_noise_exponent = 0;
  PyObject *__pyx_v_noise_exponent2 = 0;
  PyObject *__pyx_v_independence_model = 0;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_nbins;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_bins;
  PyObject *__pyx_v_categorical_feature_inds = 0;
  PyObject *__pyx_v_binning_method = 0;
  PyObject *__pyx_v_feature_names_txt = 0;
  PyObject *__pyx_v_categorical_bin_list = 0;
  PyObject *__pyx_v_numeric_bin_list = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_fully_connected_depth,&__pyx_n_s_max_depth,&__pyx_n_s_features_per_node,&__pyx_n_s_n_max_classify,&__pyx_n_s_n_noise,&__pyx_n_s_usefulness_model,&__pyx_n_s_n_min_to_add_leaf,&__pyx_n_s_node_split_model,&__pyx_n_s_node_split_fraction,&__pyx_n_s_probability_scaling_method,&__pyx_n_s_noise_exponent,&__pyx_n_s_noise_exponent2,&__pyx_n_s_independence_model,&__pyx_n_s_nbins,&__pyx_n_s_max_bins,&__pyx_n_s_categorical_feature_inds,&__pyx_n_s_binning_method,&__pyx_n_s_feature_names_txt,&__pyx_n_s_categorical_bin_list,&__pyx_n_s_numeric_bin_list,0};
    PyObject* values[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_float_0_5);
    values[5] = ((PyObject*)__pyx_n_u_simple);
    values[7] = ((PyObject*)__pyx_n_u_gini_random);
    values[8] = ((PyObject *)__pyx_float_0_4);
    values[9] = ((PyObject*)__pyx_n_u_imbalanced_reciprocal);
    values[10] = ((PyObject *)__pyx_float_0_5);

    /* "awe_ml/classifier_cython.pyx":201
 *                  object n_noise=0.5, str usefulness_model = "simple",  #simple
 *                  np_long n_min_to_add_leaf=2, str node_split_model = "gini_random", object node_split_fraction=0.4,
 *                  str probability_scaling_method = "imbalanced_reciprocal", object noise_exponent=0.5, object noise_exponent2=None,  #imbalanced_reciprocal             # <<<<<<<<<<<<<<
 *                  str independence_model = "none",
 *                  np_long nbins = 5, np_long max_bins =20, object categorical_feature_inds = None, str binning_method = "qcut",
 */
    values[11] = ((PyObject *)Py_None);
    values[12] = ((PyObject*)__pyx_n_u_none);

    /* "awe_ml/classifier_cython.pyx":203
 *                  str probability_scaling_method = "imbalanced_reciprocal", object noise_exponent=0.5, object noise_exponent2=None,  #imbalanced_reciprocal
 *                  str independence_model = "none",
 *                  np_long nbins = 5, np_long max_bins =20, object categorical_feature_inds = None, str binning_method = "qcut",             # <<<<<<<<<<<<<<
 *                  list feature_names_txt=None, list categorical_bin_list=None, list numeric_bin_list=None): #n_jobs=1, numerical_features = None
 *         """
 */
    values[15] = ((PyObject *)Py_None);
    values[16] = ((PyObject*)__pyx_n_u_qcut);

    /* "awe_ml/classifier_cython.pyx":204
 *                  str independence_model = "none",
 *                  np_long nbins = 5, np_long max_bins =20, object categorical_feature_inds = None, str binning_method = "qcut",
 *                  list feature_names_txt=None, list categorical_bin_list=None, list numeric_bin_list=None): #n_jobs=1, numerical_features = None             # <<<<<<<<<<<<<<
 *         """
 *         Assumes all categorical features are enumerated from 0 to N-1.  Will fail if they are not correctly enumerated
 */
    values[17] = ((PyObject*)Py_None);
    values[18] = ((PyObject*)Py_None);
    values[19] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_fully_connected_depth);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_depth);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_features_per_node);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_max_classify);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_noise);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_usefulness_model);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_min_to_add_leaf);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_split_model);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_split_fraction);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probability_scaling_method);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_noise_exponent);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_noise_exponent2);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_independence_model);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nbins);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_bins);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_categorical_feature_inds);
          if (value) { values[15] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_binning_method);
          if (value) { values[16] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_names_txt);
          if (value) { values[17] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_categorical_bin_list);
          if (value) { values[18] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_numeric_bin_list);
          if (value) { values[19] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 198, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_fully_connected_depth = __Pyx_PyInt_As_npy_int32(values[0]); if (unlikely((__pyx_v_max_fully_connected_depth == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L3_error)
    } else {
      __pyx_v_max_fully_connected_depth = ((__pyx_t_6awe_ml_17classifier_cython_np_long)2);
    }
    if (values[1]) {
      __pyx_v_max_depth = __Pyx_PyInt_As_npy_int32(values[1]); if (unlikely((__pyx_v_max_depth == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L3_error)
    } else {
      __pyx_v_max_depth = ((__pyx_t_6awe_ml_17classifier_cython_np_long)4);
    }
    if (values[2]) {
      __pyx_v_features_per_node = __Pyx_PyInt_As_npy_int32(values[2]); if (unlikely((__pyx_v_features_per_node == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L3_error)
    } else {
      __pyx_v_features_per_node = ((__pyx_t_6awe_ml_17classifier_cython_np_long)5);
    }
    if (values[3]) {
      __pyx_v_n_max_classify = __Pyx_PyInt_As_npy_int32(values[3]); if (unlikely((__pyx_v_n_max_classify == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 198, __pyx_L3_error)
    } else {
      __pyx_v_n_max_classify = ((__pyx_t_6awe_ml_17classifier_cython_np_long)10);
    }
    __pyx_v_n_noise = values[4];
    __pyx_v_usefulness_model = ((PyObject*)values[5]);
    if (values[6]) {
      __pyx_v_n_min_to_add_leaf = __Pyx_PyInt_As_npy_int32(values[6]); if (unlikely((__pyx_v_n_min_to_add_leaf == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 200, __pyx_L3_error)
    } else {
      __pyx_v_n_min_to_add_leaf = ((__pyx_t_6awe_ml_17classifier_cython_np_long)2);
    }
    __pyx_v_node_split_model = ((PyObject*)values[7]);
    __pyx_v_node_split_fraction = values[8];
    __pyx_v_probability_scaling_method = ((PyObject*)values[9]);
    __pyx_v_noise_exponent = values[10];
    __pyx_v_noise_exponent2 = values[11];
    __pyx_v_independence_model = ((PyObject*)values[12]);
    if (values[13]) {
      __pyx_v_nbins = __Pyx_PyInt_As_npy_int32(values[13]); if (unlikely((__pyx_v_nbins == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L3_error)
    } else {
      __pyx_v_nbins = ((__pyx_t_6awe_ml_17classifier_cython_np_long)5);
    }
    if (values[14]) {
      __pyx_v_max_bins = __Pyx_PyInt_As_npy_int32(values[14]); if (unlikely((__pyx_v_max_bins == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 203, __pyx_L3_error)
    } else {
      __pyx_v_max_bins = ((__pyx_t_6awe_ml_17classifier_cython_np_long)20);
    }
    __pyx_v_categorical_feature_inds = values[15];
    __pyx_v_binning_method = ((PyObject*)values[16]);
    __pyx_v_feature_names_txt = ((PyObject*)values[17]);
    __pyx_v_categorical_bin_list = ((PyObject*)values[18]);
    __pyx_v_numeric_bin_list = ((PyObject*)values[19]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 20, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_usefulness_model), (&PyUnicode_Type), 1, "usefulness_model", 1))) __PYX_ERR(1, 199, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node_split_model), (&PyUnicode_Type), 1, "node_split_model", 1))) __PYX_ERR(1, 200, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_probability_scaling_method), (&PyUnicode_Type), 1, "probability_scaling_method", 1))) __PYX_ERR(1, 201, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_independence_model), (&PyUnicode_Type), 1, "independence_model", 1))) __PYX_ERR(1, 202, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_binning_method), (&PyUnicode_Type), 1, "binning_method", 1))) __PYX_ERR(1, 203, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_feature_names_txt), (&PyList_Type), 1, "feature_names_txt", 1))) __PYX_ERR(1, 204, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_categorical_bin_list), (&PyList_Type), 1, "categorical_bin_list", 1))) __PYX_ERR(1, 204, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_numeric_bin_list), (&PyList_Type), 1, "numeric_bin_list", 1))) __PYX_ERR(1, 204, __pyx_L1_error)
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), __pyx_v_max_fully_connected_depth, __pyx_v_max_depth, __pyx_v_features_per_node, __pyx_v_n_max_classify, __pyx_v_n_noise, __pyx_v_usefulness_model, __pyx_v_n_min_to_add_leaf, __pyx_v_node_split_model, __pyx_v_node_split_fraction, __pyx_v_probability_scaling_method, __pyx_v_noise_exponent, __pyx_v_noise_exponent2, __pyx_v_independence_model, __pyx_v_nbins, __pyx_v_max_bins, __pyx_v_categorical_feature_inds, __pyx_v_binning_method, __pyx_v_feature_names_txt, __pyx_v_categorical_bin_list, __pyx_v_numeric_bin_list);

  /* "awe_ml/classifier_cython.pyx":198
 * 
 * 
 *     def __init__(self, np_long max_fully_connected_depth=2, np_long max_depth = 4, np_long features_per_node=5, np_long n_max_classify=10,             # <<<<<<<<<<<<<<
 *                  object n_noise=0.5, str usefulness_model = "simple",  #simple
 *                  np_long n_min_to_add_leaf=2, str node_split_model = "gini_random", object node_split_fraction=0.4,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_fully_connected_depth, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_depth, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_features_per_node, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_max_classify, PyObject *__pyx_v_n_noise, PyObject *__pyx_v_usefulness_model, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_min_to_add_leaf, PyObject *__pyx_v_node_split_model, PyObject *__pyx_v_node_split_fraction, PyObject *__pyx_v_probability_scaling_method, PyObject *__pyx_v_noise_exponent, PyObject *__pyx_v_noise_exponent2, PyObject *__pyx_v_independence_model, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_nbins, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_max_bins, PyObject *__pyx_v_categorical_feature_inds, PyObject *__pyx_v_binning_method, PyObject *__pyx_v_feature_names_txt, PyObject *__pyx_v_categorical_bin_list, PyObject *__pyx_v_numeric_bin_list) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "awe_ml/classifier_cython.pyx":246
 * 
 *         #store parameters to self #TODO: convert python string options to C variables
 *         self.max_fully_connected_depth = max_fully_connected_depth             # <<<<<<<<<<<<<<
 *         self.n_max_classify = n_max_classify
 *         self.max_depth  = max_depth
 */
  __pyx_v_self->max_fully_connected_depth = __pyx_v_max_fully_connected_depth;

  /* "awe_ml/classifier_cython.pyx":247
 *         #store parameters to self #TODO: convert python string options to C variables
 *         self.max_fully_connected_depth = max_fully_connected_depth
 *         self.n_max_classify = n_max_classify             # <<<<<<<<<<<<<<
 *         self.max_depth  = max_depth
 *         self.n_min_to_add_leaf = n_min_to_add_leaf
 */
  __pyx_v_self->n_max_classify = __pyx_v_n_max_classify;

  /* "awe_ml/classifier_cython.pyx":248
 *         self.max_fully_connected_depth = max_fully_connected_depth
 *         self.n_max_classify = n_max_classify
 *         self.max_depth  = max_depth             # <<<<<<<<<<<<<<
 *         self.n_min_to_add_leaf = n_min_to_add_leaf
 *         self.features_per_node =features_per_node
 */
  __pyx_v_self->max_depth = __pyx_v_max_depth;

  /* "awe_ml/classifier_cython.pyx":249
 *         self.n_max_classify = n_max_classify
 *         self.max_depth  = max_depth
 *         self.n_min_to_add_leaf = n_min_to_add_leaf             # <<<<<<<<<<<<<<
 *         self.features_per_node =features_per_node
 *         self.node_split_model = node_split_model
 */
  __pyx_v_self->n_min_to_add_leaf = __pyx_v_n_min_to_add_leaf;

  /* "awe_ml/classifier_cython.pyx":250
 *         self.max_depth  = max_depth
 *         self.n_min_to_add_leaf = n_min_to_add_leaf
 *         self.features_per_node =features_per_node             # <<<<<<<<<<<<<<
 *         self.node_split_model = node_split_model
 *         self.node_split_fraction = node_split_fraction
 */
  __pyx_v_self->features_per_node = __pyx_v_features_per_node;

  /* "awe_ml/classifier_cython.pyx":251
 *         self.n_min_to_add_leaf = n_min_to_add_leaf
 *         self.features_per_node =features_per_node
 *         self.node_split_model = node_split_model             # <<<<<<<<<<<<<<
 *         self.node_split_fraction = node_split_fraction
 *         self.probability_scaling_method = probability_scaling_method
 */
  __Pyx_INCREF(__pyx_v_node_split_model);
  __Pyx_GIVEREF(__pyx_v_node_split_model);
  __Pyx_GOTREF(__pyx_v_self->node_split_model);
  __Pyx_DECREF(__pyx_v_self->node_split_model);
  __pyx_v_self->node_split_model = __pyx_v_node_split_model;

  /* "awe_ml/classifier_cython.pyx":252
 *         self.features_per_node =features_per_node
 *         self.node_split_model = node_split_model
 *         self.node_split_fraction = node_split_fraction             # <<<<<<<<<<<<<<
 *         self.probability_scaling_method = probability_scaling_method
 *         self.noise_exponent=noise_exponent
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_node_split_fraction); if (unlikely((__pyx_t_1 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 252, __pyx_L1_error)
  __pyx_v_self->node_split_fraction = __pyx_t_1;

  /* "awe_ml/classifier_cython.pyx":253
 *         self.node_split_model = node_split_model
 *         self.node_split_fraction = node_split_fraction
 *         self.probability_scaling_method = probability_scaling_method             # <<<<<<<<<<<<<<
 *         self.noise_exponent=noise_exponent
 *         self.noise_exponent2=noise_exponent2
 */
  __Pyx_INCREF(__pyx_v_probability_scaling_method);
  __Pyx_GIVEREF(__pyx_v_probability_scaling_method);
  __Pyx_GOTREF(__pyx_v_self->probability_scaling_method);
  __Pyx_DECREF(__pyx_v_self->probability_scaling_method);
  __pyx_v_self->probability_scaling_method = __pyx_v_probability_scaling_method;

  /* "awe_ml/classifier_cython.pyx":254
 *         self.node_split_fraction = node_split_fraction
 *         self.probability_scaling_method = probability_scaling_method
 *         self.noise_exponent=noise_exponent             # <<<<<<<<<<<<<<
 *         self.noise_exponent2=noise_exponent2
 *         self.usefulness_model = usefulness_model
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_noise_exponent); if (unlikely((__pyx_t_1 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 254, __pyx_L1_error)
  __pyx_v_self->noise_exponent = __pyx_t_1;

  /* "awe_ml/classifier_cython.pyx":255
 *         self.probability_scaling_method = probability_scaling_method
 *         self.noise_exponent=noise_exponent
 *         self.noise_exponent2=noise_exponent2             # <<<<<<<<<<<<<<
 *         self.usefulness_model = usefulness_model
 *         self.n_noise= n_noise
 */
  __Pyx_INCREF(__pyx_v_noise_exponent2);
  __Pyx_GIVEREF(__pyx_v_noise_exponent2);
  __Pyx_GOTREF(__pyx_v_self->noise_exponent2);
  __Pyx_DECREF(__pyx_v_self->noise_exponent2);
  __pyx_v_self->noise_exponent2 = __pyx_v_noise_exponent2;

  /* "awe_ml/classifier_cython.pyx":256
 *         self.noise_exponent=noise_exponent
 *         self.noise_exponent2=noise_exponent2
 *         self.usefulness_model = usefulness_model             # <<<<<<<<<<<<<<
 *         self.n_noise= n_noise
 *         self.feature_names_txt=feature_names_txt
 */
  __Pyx_INCREF(__pyx_v_usefulness_model);
  __Pyx_GIVEREF(__pyx_v_usefulness_model);
  __Pyx_GOTREF(__pyx_v_self->usefulness_model);
  __Pyx_DECREF(__pyx_v_self->usefulness_model);
  __pyx_v_self->usefulness_model = __pyx_v_usefulness_model;

  /* "awe_ml/classifier_cython.pyx":257
 *         self.noise_exponent2=noise_exponent2
 *         self.usefulness_model = usefulness_model
 *         self.n_noise= n_noise             # <<<<<<<<<<<<<<
 *         self.feature_names_txt=feature_names_txt
 *         self.independence_model = independence_model
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_n_noise); if (unlikely((__pyx_t_1 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 257, __pyx_L1_error)
  __pyx_v_self->n_noise = __pyx_t_1;

  /* "awe_ml/classifier_cython.pyx":258
 *         self.usefulness_model = usefulness_model
 *         self.n_noise= n_noise
 *         self.feature_names_txt=feature_names_txt             # <<<<<<<<<<<<<<
 *         self.independence_model = independence_model
 * 
 */
  __Pyx_INCREF(__pyx_v_feature_names_txt);
  __Pyx_GIVEREF(__pyx_v_feature_names_txt);
  __Pyx_GOTREF(__pyx_v_self->feature_names_txt);
  __Pyx_DECREF(__pyx_v_self->feature_names_txt);
  __pyx_v_self->feature_names_txt = __pyx_v_feature_names_txt;

  /* "awe_ml/classifier_cython.pyx":259
 *         self.n_noise= n_noise
 *         self.feature_names_txt=feature_names_txt
 *         self.independence_model = independence_model             # <<<<<<<<<<<<<<
 * 
 *         self.nbins = nbins
 */
  __Pyx_INCREF(__pyx_v_independence_model);
  __Pyx_GIVEREF(__pyx_v_independence_model);
  __Pyx_GOTREF(__pyx_v_self->independence_model);
  __Pyx_DECREF(__pyx_v_self->independence_model);
  __pyx_v_self->independence_model = __pyx_v_independence_model;

  /* "awe_ml/classifier_cython.pyx":261
 *         self.independence_model = independence_model
 * 
 *         self.nbins = nbins             # <<<<<<<<<<<<<<
 *         self.max_bins= max_bins
 *         self.categorical_feature_inds=categorical_feature_inds
 */
  __pyx_v_self->nbins = __pyx_v_nbins;

  /* "awe_ml/classifier_cython.pyx":262
 * 
 *         self.nbins = nbins
 *         self.max_bins= max_bins             # <<<<<<<<<<<<<<
 *         self.categorical_feature_inds=categorical_feature_inds
 * 
 */
  __pyx_v_self->max_bins = __pyx_v_max_bins;

  /* "awe_ml/classifier_cython.pyx":263
 *         self.nbins = nbins
 *         self.max_bins= max_bins
 *         self.categorical_feature_inds=categorical_feature_inds             # <<<<<<<<<<<<<<
 * 
 *         self.binning_method=binning_method
 */
  __Pyx_INCREF(__pyx_v_categorical_feature_inds);
  __Pyx_GIVEREF(__pyx_v_categorical_feature_inds);
  __Pyx_GOTREF(__pyx_v_self->categorical_feature_inds);
  __Pyx_DECREF(__pyx_v_self->categorical_feature_inds);
  __pyx_v_self->categorical_feature_inds = __pyx_v_categorical_feature_inds;

  /* "awe_ml/classifier_cython.pyx":265
 *         self.categorical_feature_inds=categorical_feature_inds
 * 
 *         self.binning_method=binning_method             # <<<<<<<<<<<<<<
 *         self.categorical_bin_list=categorical_bin_list
 *         self.numeric_bin_list=numeric_bin_list
 */
  __Pyx_INCREF(__pyx_v_binning_method);
  __Pyx_GIVEREF(__pyx_v_binning_method);
  __Pyx_GOTREF(__pyx_v_self->binning_method);
  __Pyx_DECREF(__pyx_v_self->binning_method);
  __pyx_v_self->binning_method = __pyx_v_binning_method;

  /* "awe_ml/classifier_cython.pyx":266
 * 
 *         self.binning_method=binning_method
 *         self.categorical_bin_list=categorical_bin_list             # <<<<<<<<<<<<<<
 *         self.numeric_bin_list=numeric_bin_list
 * 
 */
  __Pyx_INCREF(__pyx_v_categorical_bin_list);
  __Pyx_GIVEREF(__pyx_v_categorical_bin_list);
  __Pyx_GOTREF(__pyx_v_self->categorical_bin_list);
  __Pyx_DECREF(__pyx_v_self->categorical_bin_list);
  __pyx_v_self->categorical_bin_list = __pyx_v_categorical_bin_list;

  /* "awe_ml/classifier_cython.pyx":267
 *         self.binning_method=binning_method
 *         self.categorical_bin_list=categorical_bin_list
 *         self.numeric_bin_list=numeric_bin_list             # <<<<<<<<<<<<<<
 * 
 *         # self.n_jobs =n_jobs
 */
  __Pyx_INCREF(__pyx_v_numeric_bin_list);
  __Pyx_GIVEREF(__pyx_v_numeric_bin_list);
  __Pyx_GOTREF(__pyx_v_self->numeric_bin_list);
  __Pyx_DECREF(__pyx_v_self->numeric_bin_list);
  __pyx_v_self->numeric_bin_list = __pyx_v_numeric_bin_list;

  /* "awe_ml/classifier_cython.pyx":270
 * 
 *         # self.n_jobs =n_jobs
 *         self._estimator_type = "classifier"             # <<<<<<<<<<<<<<
 * 
 *         ### initialize memory view objects
 */
  __Pyx_INCREF(__pyx_n_u_classifier);
  __Pyx_GIVEREF(__pyx_n_u_classifier);
  __Pyx_GOTREF(__pyx_v_self->_estimator_type);
  __Pyx_DECREF(__pyx_v_self->_estimator_type);
  __pyx_v_self->_estimator_type = __pyx_n_u_classifier;

  /* "awe_ml/classifier_cython.pyx":273
 * 
 *         ### initialize memory view objects
 *         self.X= np.zeros((0,0), dtype=NP_LONG)             # <<<<<<<<<<<<<<
 *         self.y = np.zeros((0), dtype=NP_LONG)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__2, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->X, 0);
  __pyx_v_self->X = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "awe_ml/classifier_cython.pyx":274
 *         ### initialize memory view objects
 *         self.X= np.zeros((0,0), dtype=NP_LONG)
 *         self.y = np.zeros((0), dtype=NP_LONG)             # <<<<<<<<<<<<<<
 * 
 *         ####hack for sci-kitlearn checks
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_LONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__3, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->y, 0);
  __pyx_v_self->y = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "awe_ml/classifier_cython.pyx":277
 * 
 *         ####hack for sci-kitlearn checks
 *         self.noise_exponent_obj  =noise_exponent             # <<<<<<<<<<<<<<
 *         self.node_split_fraction_obj = node_split_fraction
 *         self.n_noise_obj = n_noise
 */
  __Pyx_INCREF(__pyx_v_noise_exponent);
  __Pyx_GIVEREF(__pyx_v_noise_exponent);
  __Pyx_GOTREF(__pyx_v_self->noise_exponent_obj);
  __Pyx_DECREF(__pyx_v_self->noise_exponent_obj);
  __pyx_v_self->noise_exponent_obj = __pyx_v_noise_exponent;

  /* "awe_ml/classifier_cython.pyx":278
 *         ####hack for sci-kitlearn checks
 *         self.noise_exponent_obj  =noise_exponent
 *         self.node_split_fraction_obj = node_split_fraction             # <<<<<<<<<<<<<<
 *         self.n_noise_obj = n_noise
 * 
 */
  __Pyx_INCREF(__pyx_v_node_split_fraction);
  __Pyx_GIVEREF(__pyx_v_node_split_fraction);
  __Pyx_GOTREF(__pyx_v_self->node_split_fraction_obj);
  __Pyx_DECREF(__pyx_v_self->node_split_fraction_obj);
  __pyx_v_self->node_split_fraction_obj = __pyx_v_node_split_fraction;

  /* "awe_ml/classifier_cython.pyx":279
 *         self.noise_exponent_obj  =noise_exponent
 *         self.node_split_fraction_obj = node_split_fraction
 *         self.n_noise_obj = n_noise             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_n_noise);
  __Pyx_GIVEREF(__pyx_v_n_noise);
  __Pyx_GOTREF(__pyx_v_self->n_noise_obj);
  __Pyx_DECREF(__pyx_v_self->n_noise_obj);
  __pyx_v_self->n_noise_obj = __pyx_v_n_noise;

  /* "awe_ml/classifier_cython.pyx":198
 * 
 * 
 *     def __init__(self, np_long max_fully_connected_depth=2, np_long max_depth = 4, np_long features_per_node=5, np_long n_max_classify=10,             # <<<<<<<<<<<<<<
 *                  object n_noise=0.5, str usefulness_model = "simple",  #simple
 *                  np_long n_min_to_add_leaf=2, str node_split_model = "gini_random", object node_split_fraction=0.4,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":312
 *         # test_obj[1].initialize(100,3)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         state_dict = dict()
 *         state_dict["n_features"]=self.n_features
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_3__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_3__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_2__getstate__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_2__getstate__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_v_state_dict = NULL;
  PyObject *__pyx_v_classification_values_list_python = 0;
  std::vector<FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long> > ::size_type __pyx_v_ind;
  PyObject *__pyx_v_full_tree_list_python = 0;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_node_label_to_index_map;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_label_index_pair;
  PyObject *__pyx_v_node_label_to_index_list_by_level = NULL;
  PyObject *__pyx_v_node_label_to_index_list = NULL;
  PyObject *__pyx_v_nodes_list_by_level = NULL;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_nodes_map;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_node_pair;
  PyObject *__pyx_v_nodes_list = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::vector<ClassificationValues<__pyx_t_6awe_ml_17classifier_cython_np_float> > ::size_type __pyx_t_6;
  std::vector<ClassificationValues<__pyx_t_6awe_ml_17classifier_cython_np_float> > ::size_type __pyx_t_7;
  std::vector<FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long> > ::size_type __pyx_t_8;
  int __pyx_t_9;
  std::vector<FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long> > ::size_type __pyx_t_10;
  std::vector<FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long> > ::size_type __pyx_t_11;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> > ::iterator __pyx_t_12;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> >  *__pyx_t_13;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_14;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator __pyx_t_15;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_16;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > > ::iterator __pyx_t_17;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > >  *__pyx_t_18;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_t_19;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > ::iterator __pyx_t_20;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_t_21;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "awe_ml/classifier_cython.pyx":313
 * 
 *     def __getstate__(self):
 *         state_dict = dict()             # <<<<<<<<<<<<<<
 *         state_dict["n_features"]=self.n_features
 *         state_dict["ave_corr"]=self.ave_corr
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_state_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":314
 *     def __getstate__(self):
 *         state_dict = dict()
 *         state_dict["n_features"]=self.n_features             # <<<<<<<<<<<<<<
 *         state_dict["ave_corr"]=self.ave_corr
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_n_features, __pyx_t_1) < 0)) __PYX_ERR(1, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":315
 *         state_dict = dict()
 *         state_dict["n_features"]=self.n_features
 *         state_dict["ave_corr"]=self.ave_corr             # <<<<<<<<<<<<<<
 * 
 *         # state_dict["parents_list"]=self.parents_list
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ave_corr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_ave_corr, __pyx_t_1) < 0)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":323
 *         # state_dict["node_label_list"]=self.node_label_list
 * 
 *         state_dict["feature_names_txt"]=self.feature_names_txt             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_self->feature_names_txt;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_feature_names_txt, __pyx_t_1) < 0)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":326
 * 
 * 
 *         state_dict["classes_"]=self.classes_             # <<<<<<<<<<<<<<
 * 
 *         state_dict["n_classes"]=self.n_classes
 */
  __pyx_t_1 = __pyx_v_self->classes_;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_classes, __pyx_t_1) < 0)) __PYX_ERR(1, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":328
 *         state_dict["classes_"]=self.classes_
 * 
 *         state_dict["n_classes"]=self.n_classes             # <<<<<<<<<<<<<<
 *         state_dict["independence_model_c"]=self.independence_model_c
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_n_classes, __pyx_t_1) < 0)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":329
 * 
 *         state_dict["n_classes"]=self.n_classes
 *         state_dict["independence_model_c"]=self.independence_model_c             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->independence_model_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_independence_model_c, __pyx_t_1) < 0)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":332
 * 
 * 
 *         state_dict["max_fully_connected_depth"]=self.max_fully_connected_depth             # <<<<<<<<<<<<<<
 *         state_dict["n_max_classify"]=self.n_max_classify
 *         state_dict["max_depth"]=self.max_depth
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_fully_connected_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_max_fully_connected_depth, __pyx_t_1) < 0)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":333
 * 
 *         state_dict["max_fully_connected_depth"]=self.max_fully_connected_depth
 *         state_dict["n_max_classify"]=self.n_max_classify             # <<<<<<<<<<<<<<
 *         state_dict["max_depth"]=self.max_depth
 *         state_dict["n_min_to_add_leaf"]=self.n_min_to_add_leaf
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_max_classify); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_n_max_classify, __pyx_t_1) < 0)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":334
 *         state_dict["max_fully_connected_depth"]=self.max_fully_connected_depth
 *         state_dict["n_max_classify"]=self.n_max_classify
 *         state_dict["max_depth"]=self.max_depth             # <<<<<<<<<<<<<<
 *         state_dict["n_min_to_add_leaf"]=self.n_min_to_add_leaf
 *         state_dict["features_per_node"]=self.features_per_node
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_max_depth, __pyx_t_1) < 0)) __PYX_ERR(1, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":335
 *         state_dict["n_max_classify"]=self.n_max_classify
 *         state_dict["max_depth"]=self.max_depth
 *         state_dict["n_min_to_add_leaf"]=self.n_min_to_add_leaf             # <<<<<<<<<<<<<<
 *         state_dict["features_per_node"]=self.features_per_node
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_min_to_add_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_n_min_to_add_leaf, __pyx_t_1) < 0)) __PYX_ERR(1, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":336
 *         state_dict["max_depth"]=self.max_depth
 *         state_dict["n_min_to_add_leaf"]=self.n_min_to_add_leaf
 *         state_dict["features_per_node"]=self.features_per_node             # <<<<<<<<<<<<<<
 * 
 *         state_dict["node_split_model"]=self.node_split_model
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->features_per_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_features_per_node, __pyx_t_1) < 0)) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":338
 *         state_dict["features_per_node"]=self.features_per_node
 * 
 *         state_dict["node_split_model"]=self.node_split_model             # <<<<<<<<<<<<<<
 *         state_dict["probability_scaling_method"]=self.probability_scaling_method
 *         state_dict["usefulness_model"]=self.usefulness_model
 */
  __pyx_t_1 = __pyx_v_self->node_split_model;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_node_split_model, __pyx_t_1) < 0)) __PYX_ERR(1, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":339
 * 
 *         state_dict["node_split_model"]=self.node_split_model
 *         state_dict["probability_scaling_method"]=self.probability_scaling_method             # <<<<<<<<<<<<<<
 *         state_dict["usefulness_model"]=self.usefulness_model
 *         state_dict["independence_model"]=self.independence_model
 */
  __pyx_t_1 = __pyx_v_self->probability_scaling_method;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_probability_scaling_method, __pyx_t_1) < 0)) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":340
 *         state_dict["node_split_model"]=self.node_split_model
 *         state_dict["probability_scaling_method"]=self.probability_scaling_method
 *         state_dict["usefulness_model"]=self.usefulness_model             # <<<<<<<<<<<<<<
 *         state_dict["independence_model"]=self.independence_model
 * 
 */
  __pyx_t_1 = __pyx_v_self->usefulness_model;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_usefulness_model, __pyx_t_1) < 0)) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":341
 *         state_dict["probability_scaling_method"]=self.probability_scaling_method
 *         state_dict["usefulness_model"]=self.usefulness_model
 *         state_dict["independence_model"]=self.independence_model             # <<<<<<<<<<<<<<
 * 
 *         state_dict["node_split_fraction"]=self.node_split_fraction
 */
  __pyx_t_1 = __pyx_v_self->independence_model;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_independence_model, __pyx_t_1) < 0)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":343
 *         state_dict["independence_model"]=self.independence_model
 * 
 *         state_dict["node_split_fraction"]=self.node_split_fraction             # <<<<<<<<<<<<<<
 *         state_dict["node_split_fraction_obj"]=self.node_split_fraction_obj
 *         state_dict["noise_exponent"]=self.noise_exponent
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->node_split_fraction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_node_split_fraction, __pyx_t_1) < 0)) __PYX_ERR(1, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":344
 * 
 *         state_dict["node_split_fraction"]=self.node_split_fraction
 *         state_dict["node_split_fraction_obj"]=self.node_split_fraction_obj             # <<<<<<<<<<<<<<
 *         state_dict["noise_exponent"]=self.noise_exponent
 *         state_dict["noise_exponent_obj"]=self.noise_exponent_obj
 */
  __pyx_t_1 = __pyx_v_self->node_split_fraction_obj;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_node_split_fraction_obj, __pyx_t_1) < 0)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":345
 *         state_dict["node_split_fraction"]=self.node_split_fraction
 *         state_dict["node_split_fraction_obj"]=self.node_split_fraction_obj
 *         state_dict["noise_exponent"]=self.noise_exponent             # <<<<<<<<<<<<<<
 *         state_dict["noise_exponent_obj"]=self.noise_exponent_obj
 *         state_dict["n_noise"]=self.n_noise
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->noise_exponent); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_noise_exponent, __pyx_t_1) < 0)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":346
 *         state_dict["node_split_fraction_obj"]=self.node_split_fraction_obj
 *         state_dict["noise_exponent"]=self.noise_exponent
 *         state_dict["noise_exponent_obj"]=self.noise_exponent_obj             # <<<<<<<<<<<<<<
 *         state_dict["n_noise"]=self.n_noise
 *         state_dict["n_noise_obj"]=self.n_noise_obj
 */
  __pyx_t_1 = __pyx_v_self->noise_exponent_obj;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_noise_exponent_obj, __pyx_t_1) < 0)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":347
 *         state_dict["noise_exponent"]=self.noise_exponent
 *         state_dict["noise_exponent_obj"]=self.noise_exponent_obj
 *         state_dict["n_noise"]=self.n_noise             # <<<<<<<<<<<<<<
 *         state_dict["n_noise_obj"]=self.n_noise_obj
 *         state_dict["noise_scale"]=self.noise_scale
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->n_noise); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_n_noise, __pyx_t_1) < 0)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":348
 *         state_dict["noise_exponent_obj"]=self.noise_exponent_obj
 *         state_dict["n_noise"]=self.n_noise
 *         state_dict["n_noise_obj"]=self.n_noise_obj             # <<<<<<<<<<<<<<
 *         state_dict["noise_scale"]=self.noise_scale
 *         state_dict["noise_exponent2"]=self.noise_exponent2
 */
  __pyx_t_1 = __pyx_v_self->n_noise_obj;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_n_noise_obj, __pyx_t_1) < 0)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":349
 *         state_dict["n_noise"]=self.n_noise
 *         state_dict["n_noise_obj"]=self.n_noise_obj
 *         state_dict["noise_scale"]=self.noise_scale             # <<<<<<<<<<<<<<
 *         state_dict["noise_exponent2"]=self.noise_exponent2
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->noise_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_noise_scale, __pyx_t_1) < 0)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":350
 *         state_dict["n_noise_obj"]=self.n_noise_obj
 *         state_dict["noise_scale"]=self.noise_scale
 *         state_dict["noise_exponent2"]=self.noise_exponent2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_v_self->noise_exponent2;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_noise_exponent2, __pyx_t_1) < 0)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":354
 * 
 * 
 *         state_dict["X"]=np.asarray(self.X)             # <<<<<<<<<<<<<<
 *         state_dict["y"]=np.asarray(self.y)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_self->X, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_X, __pyx_t_1) < 0)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":355
 * 
 *         state_dict["X"]=np.asarray(self.X)
 *         state_dict["y"]=np.asarray(self.y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_self->y, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_y, __pyx_t_1) < 0)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":358
 * 
 * 
 *         state_dict["n_feature_categories_"]=self.n_feature_categories_             # <<<<<<<<<<<<<<
 * 
 *         ####Save custom data structures
 */
  __pyx_t_1 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_self->n_feature_categories_); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_n_feature_categories, __pyx_t_1) < 0)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":362
 *         ####Save custom data structures
 *         ###########
 *         cdef list classification_values_list_python=[]             # <<<<<<<<<<<<<<
 *         for ind in range(self.classification_values_list.size()):
 *             classification_values_list_python.append(self.classification_values_list[ind].getstate())
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_classification_values_list_python = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":363
 *         ###########
 *         cdef list classification_values_list_python=[]
 *         for ind in range(self.classification_values_list.size()):             # <<<<<<<<<<<<<<
 *             classification_values_list_python.append(self.classification_values_list[ind].getstate())
 *         state_dict["classification_values_list"]=classification_values_list_python
 */
  __pyx_t_6 = __pyx_v_self->classification_values_list.size();
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_ind = __pyx_t_8;

    /* "awe_ml/classifier_cython.pyx":364
 *         cdef list classification_values_list_python=[]
 *         for ind in range(self.classification_values_list.size()):
 *             classification_values_list_python.append(self.classification_values_list[ind].getstate())             # <<<<<<<<<<<<<<
 *         state_dict["classification_values_list"]=classification_values_list_python
 *         ###########
 */
    __pyx_t_1 = __pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___((__pyx_v_self->classification_values_list[__pyx_v_ind]).getstate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_classification_values_list_python, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":365
 *         for ind in range(self.classification_values_list.size()):
 *             classification_values_list_python.append(self.classification_values_list[ind].getstate())
 *         state_dict["classification_values_list"]=classification_values_list_python             # <<<<<<<<<<<<<<
 *         ###########
 *         cdef list full_tree_list_python=[]
 */
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_classification_values_list, __pyx_v_classification_values_list_python) < 0)) __PYX_ERR(1, 365, __pyx_L1_error)

  /* "awe_ml/classifier_cython.pyx":367
 *         state_dict["classification_values_list"]=classification_values_list_python
 *         ###########
 *         cdef list full_tree_list_python=[]             # <<<<<<<<<<<<<<
 *         for ind in range(self.full_tree_vector.size()):
 *             full_tree_list_python.append(self.full_tree_vector[ind].getstate())
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_full_tree_list_python = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":368
 *         ###########
 *         cdef list full_tree_list_python=[]
 *         for ind in range(self.full_tree_vector.size()):             # <<<<<<<<<<<<<<
 *             full_tree_list_python.append(self.full_tree_vector[ind].getstate())
 *         state_dict["full_tree_vector"]=full_tree_list_python
 */
  __pyx_t_8 = __pyx_v_self->full_tree_vector.size();
  __pyx_t_10 = __pyx_t_8;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_ind = __pyx_t_11;

    /* "awe_ml/classifier_cython.pyx":369
 *         cdef list full_tree_list_python=[]
 *         for ind in range(self.full_tree_vector.size()):
 *             full_tree_list_python.append(self.full_tree_vector[ind].getstate())             # <<<<<<<<<<<<<<
 *         state_dict["full_tree_vector"]=full_tree_list_python
 *         ###########
 */
    __pyx_t_1 = __pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___((__pyx_v_self->full_tree_vector[__pyx_v_ind]).getstate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_full_tree_list_python, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 369, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":370
 *         for ind in range(self.full_tree_vector.size()):
 *             full_tree_list_python.append(self.full_tree_vector[ind].getstate())
 *         state_dict["full_tree_vector"]=full_tree_list_python             # <<<<<<<<<<<<<<
 *         ###########
 * 
 */
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_full_tree_vector, __pyx_v_full_tree_list_python) < 0)) __PYX_ERR(1, 370, __pyx_L1_error)

  /* "awe_ml/classifier_cython.pyx":373
 *         ###########
 * 
 *         state_dict["full_tree_indicies_list"]=self.full_tree_indicies_list             # <<<<<<<<<<<<<<
 *         state_dict["full_tree_to_local_tree_lookup_list"]=self.full_tree_to_local_tree_lookup_list
 *         state_dict["local_weight_tree"]=self.local_weight_tree
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_self->full_tree_indicies_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_full_tree_indicies_list, __pyx_t_1) < 0)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":374
 * 
 *         state_dict["full_tree_indicies_list"]=self.full_tree_indicies_list
 *         state_dict["full_tree_to_local_tree_lookup_list"]=self.full_tree_to_local_tree_lookup_list             # <<<<<<<<<<<<<<
 *         state_dict["local_weight_tree"]=self.local_weight_tree
 *         state_dict["node_info"]=self.node_info  #TODO: Verify this sets correctly
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_self->full_tree_to_local_tree_lookup_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_full_tree_to_local_tree_lookup_l, __pyx_t_1) < 0)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":375
 *         state_dict["full_tree_indicies_list"]=self.full_tree_indicies_list
 *         state_dict["full_tree_to_local_tree_lookup_list"]=self.full_tree_to_local_tree_lookup_list
 *         state_dict["local_weight_tree"]=self.local_weight_tree             # <<<<<<<<<<<<<<
 *         state_dict["node_info"]=self.node_info  #TODO: Verify this sets correctly
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(__pyx_v_self->local_weight_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_local_weight_tree, __pyx_t_1) < 0)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":376
 *         state_dict["full_tree_to_local_tree_lookup_list"]=self.full_tree_to_local_tree_lookup_list
 *         state_dict["local_weight_tree"]=self.local_weight_tree
 *         state_dict["node_info"]=self.node_info  #TODO: Verify this sets correctly             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(__pyx_v_self->node_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_node_info, __pyx_t_1) < 0)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":379
 * 
 * 
 *         state_dict["children_list"]=self.children_list             # <<<<<<<<<<<<<<
 *         state_dict["feature_pair_to_comb_feat_ind"]=self.feature_pair_to_comb_feat_ind
 *         state_dict["comb_feat_ind_to_feature_pair"]=self.comb_feat_ind_to_feature_pair
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(__pyx_v_self->children_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_children_list, __pyx_t_1) < 0)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":380
 * 
 *         state_dict["children_list"]=self.children_list
 *         state_dict["feature_pair_to_comb_feat_ind"]=self.feature_pair_to_comb_feat_ind             # <<<<<<<<<<<<<<
 *         state_dict["comb_feat_ind_to_feature_pair"]=self.comb_feat_ind_to_feature_pair
 *         state_dict["correlation_map"]=self.correlation_map
 */
  __pyx_t_1 = __pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_self->feature_pair_to_comb_feat_ind); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_feature_pair_to_comb_feat_ind, __pyx_t_1) < 0)) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":381
 *         state_dict["children_list"]=self.children_list
 *         state_dict["feature_pair_to_comb_feat_ind"]=self.feature_pair_to_comb_feat_ind
 *         state_dict["comb_feat_ind_to_feature_pair"]=self.comb_feat_ind_to_feature_pair             # <<<<<<<<<<<<<<
 *         state_dict["correlation_map"]=self.correlation_map
 * 
 */
  __pyx_t_1 = __pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_self->comb_feat_ind_to_feature_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_comb_feat_ind_to_feature_pair, __pyx_t_1) < 0)) __PYX_ERR(1, 381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":382
 *         state_dict["feature_pair_to_comb_feat_ind"]=self.feature_pair_to_comb_feat_ind
 *         state_dict["comb_feat_ind_to_feature_pair"]=self.comb_feat_ind_to_feature_pair
 *         state_dict["correlation_map"]=self.correlation_map             # <<<<<<<<<<<<<<
 * 
 *         state_dict["nbins"]=self.nbins
 */
  __pyx_t_1 = __pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_v_self->correlation_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_correlation_map, __pyx_t_1) < 0)) __PYX_ERR(1, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":384
 *         state_dict["correlation_map"]=self.correlation_map
 * 
 *         state_dict["nbins"]=self.nbins             # <<<<<<<<<<<<<<
 *         state_dict["max_bins"]=self.max_bins
 *         state_dict["categorical_feature_inds"]=self.categorical_feature_inds
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->nbins); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_nbins, __pyx_t_1) < 0)) __PYX_ERR(1, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":385
 * 
 *         state_dict["nbins"]=self.nbins
 *         state_dict["max_bins"]=self.max_bins             # <<<<<<<<<<<<<<
 *         state_dict["categorical_feature_inds"]=self.categorical_feature_inds
 *         state_dict["binning_method"]=self.binning_method
 */
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_bins); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_max_bins, __pyx_t_1) < 0)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":386
 *         state_dict["nbins"]=self.nbins
 *         state_dict["max_bins"]=self.max_bins
 *         state_dict["categorical_feature_inds"]=self.categorical_feature_inds             # <<<<<<<<<<<<<<
 *         state_dict["binning_method"]=self.binning_method
 * 
 */
  __pyx_t_1 = __pyx_v_self->categorical_feature_inds;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_categorical_feature_inds, __pyx_t_1) < 0)) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":387
 *         state_dict["max_bins"]=self.max_bins
 *         state_dict["categorical_feature_inds"]=self.categorical_feature_inds
 *         state_dict["binning_method"]=self.binning_method             # <<<<<<<<<<<<<<
 * 
 *         state_dict["categorical_bin_list"]=self.categorical_bin_list
 */
  __pyx_t_1 = __pyx_v_self->binning_method;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_binning_method, __pyx_t_1) < 0)) __PYX_ERR(1, 387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":389
 *         state_dict["binning_method"]=self.binning_method
 * 
 *         state_dict["categorical_bin_list"]=self.categorical_bin_list             # <<<<<<<<<<<<<<
 *         state_dict["numeric_bin_list"]=self.numeric_bin_list
 *         # state_dict[""]=self.
 */
  __pyx_t_1 = __pyx_v_self->categorical_bin_list;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_categorical_bin_list, __pyx_t_1) < 0)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":390
 * 
 *         state_dict["categorical_bin_list"]=self.categorical_bin_list
 *         state_dict["numeric_bin_list"]=self.numeric_bin_list             # <<<<<<<<<<<<<<
 *         # state_dict[""]=self.
 * 
 */
  __pyx_t_1 = __pyx_v_self->numeric_bin_list;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_numeric_bin_list, __pyx_t_1) < 0)) __PYX_ERR(1, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":396
 *         cdef map[vector[np_long],np_long] node_label_to_index_map
 *         cdef pair[vector[np_long],np_long] label_index_pair
 *         node_label_to_index_list_by_level  =[]             # <<<<<<<<<<<<<<
 * 
 *         for node_label_to_index_map in self.node_label_to_index_dict_list: # iterate over levels
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node_label_to_index_list_by_level = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":398
 *         node_label_to_index_list_by_level  =[]
 * 
 *         for node_label_to_index_map in self.node_label_to_index_dict_list: # iterate over levels             # <<<<<<<<<<<<<<
 *             node_label_to_index_list = [] #reset list that holds map
 *             for label_index_pair in node_label_to_index_map: # iterate over each entry in map
 */
  __pyx_t_13 = &__pyx_v_self->node_label_to_index_dict_list;
  __pyx_t_12 = __pyx_t_13->begin();
  for (;;) {
    if (!(__pyx_t_12 != __pyx_t_13->end())) break;
    __pyx_t_14 = *__pyx_t_12;
    ++__pyx_t_12;
    __pyx_v_node_label_to_index_map = __pyx_t_14;

    /* "awe_ml/classifier_cython.pyx":399
 * 
 *         for node_label_to_index_map in self.node_label_to_index_dict_list: # iterate over levels
 *             node_label_to_index_list = [] #reset list that holds map             # <<<<<<<<<<<<<<
 *             for label_index_pair in node_label_to_index_map: # iterate over each entry in map
 *                 node_label_to_index_list.append(label_index_pair) # add key, value pair to list
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_node_label_to_index_list, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":400
 *         for node_label_to_index_map in self.node_label_to_index_dict_list: # iterate over levels
 *             node_label_to_index_list = [] #reset list that holds map
 *             for label_index_pair in node_label_to_index_map: # iterate over each entry in map             # <<<<<<<<<<<<<<
 *                 node_label_to_index_list.append(label_index_pair) # add key, value pair to list
 *             node_label_to_index_list_by_level.append(node_label_to_index_list) #add list for each level
 */
    __pyx_t_15 = __pyx_v_node_label_to_index_map.begin();
    for (;;) {
      if (!(__pyx_t_15 != __pyx_v_node_label_to_index_map.end())) break;
      __pyx_t_16 = *__pyx_t_15;
      ++__pyx_t_15;
      __pyx_v_label_index_pair = __pyx_t_16;

      /* "awe_ml/classifier_cython.pyx":401
 *             node_label_to_index_list = [] #reset list that holds map
 *             for label_index_pair in node_label_to_index_map: # iterate over each entry in map
 *                 node_label_to_index_list.append(label_index_pair) # add key, value pair to list             # <<<<<<<<<<<<<<
 *             node_label_to_index_list_by_level.append(node_label_to_index_list) #add list for each level
 * 
 */
      __pyx_t_1 = __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_label_index_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_node_label_to_index_list, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 401, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "awe_ml/classifier_cython.pyx":400
 *         for node_label_to_index_map in self.node_label_to_index_dict_list: # iterate over levels
 *             node_label_to_index_list = [] #reset list that holds map
 *             for label_index_pair in node_label_to_index_map: # iterate over each entry in map             # <<<<<<<<<<<<<<
 *                 node_label_to_index_list.append(label_index_pair) # add key, value pair to list
 *             node_label_to_index_list_by_level.append(node_label_to_index_list) #add list for each level
 */
    }

    /* "awe_ml/classifier_cython.pyx":402
 *             for label_index_pair in node_label_to_index_map: # iterate over each entry in map
 *                 node_label_to_index_list.append(label_index_pair) # add key, value pair to list
 *             node_label_to_index_list_by_level.append(node_label_to_index_list) #add list for each level             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_node_label_to_index_list_by_level, __pyx_v_node_label_to_index_list); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 402, __pyx_L1_error)

    /* "awe_ml/classifier_cython.pyx":398
 *         node_label_to_index_list_by_level  =[]
 * 
 *         for node_label_to_index_map in self.node_label_to_index_dict_list: # iterate over levels             # <<<<<<<<<<<<<<
 *             node_label_to_index_list = [] #reset list that holds map
 *             for label_index_pair in node_label_to_index_map: # iterate over each entry in map
 */
  }

  /* "awe_ml/classifier_cython.pyx":405
 * 
 * 
 *         state_dict["node_label_to_index_dict_list"]=node_label_to_index_list_by_level             # <<<<<<<<<<<<<<
 *         #########
 * 
 */
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_node_label_to_index_dict_list, __pyx_v_node_label_to_index_list_by_level) < 0)) __PYX_ERR(1, 405, __pyx_L1_error)

  /* "awe_ml/classifier_cython.pyx":408
 *         #########
 * 
 *         nodes_list_by_level  =[]             # <<<<<<<<<<<<<<
 *         cdef map[vector[np_long], pair[vector[np_long],vector[np_long] ] ] nodes_map
 *         cdef pair[vector[np_long], pair[vector[np_long],vector[np_long] ]] node_pair
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodes_list_by_level = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":413
 * 
 * 
 *         for nodes_map in self.nodes: # iterate over levels             # <<<<<<<<<<<<<<
 *             nodes_list= [] #reset list that holds map
 *             for node_pair in nodes_map: # iterate over each entry in map
 */
  __pyx_t_18 = &__pyx_v_self->nodes;
  __pyx_t_17 = __pyx_t_18->begin();
  for (;;) {
    if (!(__pyx_t_17 != __pyx_t_18->end())) break;
    __pyx_t_19 = *__pyx_t_17;
    ++__pyx_t_17;
    __pyx_v_nodes_map = __pyx_t_19;

    /* "awe_ml/classifier_cython.pyx":414
 * 
 *         for nodes_map in self.nodes: # iterate over levels
 *             nodes_list= [] #reset list that holds map             # <<<<<<<<<<<<<<
 *             for node_pair in nodes_map: # iterate over each entry in map
 *                 nodes_list.append(node_pair) # add key, value pair to list
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_nodes_list, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":415
 *         for nodes_map in self.nodes: # iterate over levels
 *             nodes_list= [] #reset list that holds map
 *             for node_pair in nodes_map: # iterate over each entry in map             # <<<<<<<<<<<<<<
 *                 nodes_list.append(node_pair) # add key, value pair to list
 *             nodes_list_by_level.append(nodes_list) #add list for each level
 */
    __pyx_t_20 = __pyx_v_nodes_map.begin();
    for (;;) {
      if (!(__pyx_t_20 != __pyx_v_nodes_map.end())) break;
      __pyx_t_21 = *__pyx_t_20;
      ++__pyx_t_20;
      __pyx_v_node_pair = __pyx_t_21;

      /* "awe_ml/classifier_cython.pyx":416
 *             nodes_list= [] #reset list that holds map
 *             for node_pair in nodes_map: # iterate over each entry in map
 *                 nodes_list.append(node_pair) # add key, value pair to list             # <<<<<<<<<<<<<<
 *             nodes_list_by_level.append(nodes_list) #add list for each level
 * 
 */
      __pyx_t_1 = __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(__pyx_v_node_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 416, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_nodes_list, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 416, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "awe_ml/classifier_cython.pyx":415
 *         for nodes_map in self.nodes: # iterate over levels
 *             nodes_list= [] #reset list that holds map
 *             for node_pair in nodes_map: # iterate over each entry in map             # <<<<<<<<<<<<<<
 *                 nodes_list.append(node_pair) # add key, value pair to list
 *             nodes_list_by_level.append(nodes_list) #add list for each level
 */
    }

    /* "awe_ml/classifier_cython.pyx":417
 *             for node_pair in nodes_map: # iterate over each entry in map
 *                 nodes_list.append(node_pair) # add key, value pair to list
 *             nodes_list_by_level.append(nodes_list) #add list for each level             # <<<<<<<<<<<<<<
 * 
 *         state_dict["nodes"]=nodes_list_by_level
 */
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_nodes_list_by_level, __pyx_v_nodes_list); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 417, __pyx_L1_error)

    /* "awe_ml/classifier_cython.pyx":413
 * 
 * 
 *         for nodes_map in self.nodes: # iterate over levels             # <<<<<<<<<<<<<<
 *             nodes_list= [] #reset list that holds map
 *             for node_pair in nodes_map: # iterate over each entry in map
 */
  }

  /* "awe_ml/classifier_cython.pyx":419
 *             nodes_list_by_level.append(nodes_list) #add list for each level
 * 
 *         state_dict["nodes"]=nodes_list_by_level             # <<<<<<<<<<<<<<
 * 
 *         return state_dict
 */
  if (unlikely(PyDict_SetItem(__pyx_v_state_dict, __pyx_n_u_nodes, __pyx_v_nodes_list_by_level) < 0)) __PYX_ERR(1, 419, __pyx_L1_error)

  /* "awe_ml/classifier_cython.pyx":421
 *         state_dict["nodes"]=nodes_list_by_level
 * 
 *         return state_dict             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, state_dict):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_state_dict);
  __pyx_r = __pyx_v_state_dict;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":312
 *         # test_obj[1].initialize(100,3)
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         state_dict = dict()
 *         state_dict["n_features"]=self.n_features
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state_dict);
  __Pyx_XDECREF(__pyx_v_classification_values_list_python);
  __Pyx_XDECREF(__pyx_v_full_tree_list_python);
  __Pyx_XDECREF(__pyx_v_node_label_to_index_list_by_level);
  __Pyx_XDECREF(__pyx_v_node_label_to_index_list);
  __Pyx_XDECREF(__pyx_v_nodes_list_by_level);
  __Pyx_XDECREF(__pyx_v_nodes_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":423
 *         return state_dict
 * 
 *     def __setstate__(self, state_dict):             # <<<<<<<<<<<<<<
 * 
 *         self._estimator_type = "classifier" #fixed value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_5__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state_dict); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_5__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state_dict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_4__setstate__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_state_dict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_4__setstate__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_state_dict) {
  PyObject *__pyx_v_classification_values_list_python = 0;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_ind;
  PyObject *__pyx_v_full_tree_list_python = 0;
  PyObject *__pyx_v_node_label_to_index_list_by_level = NULL;
  PyObject *__pyx_v_node_label_to_index_list = 0;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_label_index_pair;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_node_label_to_index_map;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_node_label_to_index_dict_vector;
  PyObject *__pyx_v_nodes_list_by_level = NULL;
  PyObject *__pyx_v_nodes_list = 0;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_node_pair;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_nodes_map;
  std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > >  __pyx_v_nodes;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_2;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_3;
  std::string __pyx_t_4;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  std::pair<std::vector<long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_t_10;
  std::pair<std::vector<long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_t_11;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_t_12;
  std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  __pyx_t_13;
  std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  __pyx_t_14;
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_t_15;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_16;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_t_17;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_22;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_t_23;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "awe_ml/classifier_cython.pyx":425
 *     def __setstate__(self, state_dict):
 * 
 *         self._estimator_type = "classifier" #fixed value             # <<<<<<<<<<<<<<
 * 
 *         self.n_features=state_dict["n_features"]
 */
  __Pyx_INCREF(__pyx_n_u_classifier);
  __Pyx_GIVEREF(__pyx_n_u_classifier);
  __Pyx_GOTREF(__pyx_v_self->_estimator_type);
  __Pyx_DECREF(__pyx_v_self->_estimator_type);
  __pyx_v_self->_estimator_type = __pyx_n_u_classifier;

  /* "awe_ml/classifier_cython.pyx":427
 *         self._estimator_type = "classifier" #fixed value
 * 
 *         self.n_features=state_dict["n_features"]             # <<<<<<<<<<<<<<
 *         self.ave_corr=state_dict["ave_corr"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_n_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->n_features = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":428
 * 
 *         self.n_features=state_dict["n_features"]
 *         self.ave_corr=state_dict["ave_corr"]             # <<<<<<<<<<<<<<
 * 
 *         # self.parents_list=state_dict["parents_list"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_ave_corr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ave_corr = __pyx_t_3;

  /* "awe_ml/classifier_cython.pyx":433
 * 
 * 
 *         self.feature_names_txt=state_dict["feature_names_txt"]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_feature_names_txt); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->feature_names_txt);
  __Pyx_DECREF(__pyx_v_self->feature_names_txt);
  __pyx_v_self->feature_names_txt = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":436
 * 
 * 
 *         self.classes_=state_dict["classes_"]             # <<<<<<<<<<<<<<
 * 
 *         self.n_classes=state_dict["n_classes"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->classes_);
  __Pyx_DECREF(__pyx_v_self->classes_);
  __pyx_v_self->classes_ = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":438
 *         self.classes_=state_dict["classes_"]
 * 
 *         self.n_classes=state_dict["n_classes"]             # <<<<<<<<<<<<<<
 *         self.independence_model_c=state_dict["independence_model_c"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->n_classes = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":439
 * 
 *         self.n_classes=state_dict["n_classes"]
 *         self.independence_model_c=state_dict["independence_model_c"]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_independence_model_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->independence_model_c = __pyx_t_4;

  /* "awe_ml/classifier_cython.pyx":442
 * 
 * 
 *         self.max_fully_connected_depth=state_dict["max_fully_connected_depth"]             # <<<<<<<<<<<<<<
 *         self.n_max_classify=state_dict["n_max_classify"]
 *         self.max_depth=state_dict["max_depth"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_max_fully_connected_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->max_fully_connected_depth = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":443
 * 
 *         self.max_fully_connected_depth=state_dict["max_fully_connected_depth"]
 *         self.n_max_classify=state_dict["n_max_classify"]             # <<<<<<<<<<<<<<
 *         self.max_depth=state_dict["max_depth"]
 *         self.n_min_to_add_leaf=state_dict["n_min_to_add_leaf"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_n_max_classify); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->n_max_classify = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":444
 *         self.max_fully_connected_depth=state_dict["max_fully_connected_depth"]
 *         self.n_max_classify=state_dict["n_max_classify"]
 *         self.max_depth=state_dict["max_depth"]             # <<<<<<<<<<<<<<
 *         self.n_min_to_add_leaf=state_dict["n_min_to_add_leaf"]
 *         self.features_per_node=state_dict["features_per_node"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->max_depth = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":445
 *         self.n_max_classify=state_dict["n_max_classify"]
 *         self.max_depth=state_dict["max_depth"]
 *         self.n_min_to_add_leaf=state_dict["n_min_to_add_leaf"]             # <<<<<<<<<<<<<<
 *         self.features_per_node=state_dict["features_per_node"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_n_min_to_add_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->n_min_to_add_leaf = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":446
 *         self.max_depth=state_dict["max_depth"]
 *         self.n_min_to_add_leaf=state_dict["n_min_to_add_leaf"]
 *         self.features_per_node=state_dict["features_per_node"]             # <<<<<<<<<<<<<<
 * 
 *         self.node_split_model=state_dict["node_split_model"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_features_per_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->features_per_node = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":448
 *         self.features_per_node=state_dict["features_per_node"]
 * 
 *         self.node_split_model=state_dict["node_split_model"]             # <<<<<<<<<<<<<<
 *         self.probability_scaling_method=state_dict["probability_scaling_method"]
 *         self.usefulness_model=state_dict["usefulness_model"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_node_split_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->node_split_model);
  __Pyx_DECREF(__pyx_v_self->node_split_model);
  __pyx_v_self->node_split_model = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":449
 * 
 *         self.node_split_model=state_dict["node_split_model"]
 *         self.probability_scaling_method=state_dict["probability_scaling_method"]             # <<<<<<<<<<<<<<
 *         self.usefulness_model=state_dict["usefulness_model"]
 *         self.independence_model=state_dict["independence_model"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_probability_scaling_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->probability_scaling_method);
  __Pyx_DECREF(__pyx_v_self->probability_scaling_method);
  __pyx_v_self->probability_scaling_method = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":450
 *         self.node_split_model=state_dict["node_split_model"]
 *         self.probability_scaling_method=state_dict["probability_scaling_method"]
 *         self.usefulness_model=state_dict["usefulness_model"]             # <<<<<<<<<<<<<<
 *         self.independence_model=state_dict["independence_model"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_usefulness_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 450, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->usefulness_model);
  __Pyx_DECREF(__pyx_v_self->usefulness_model);
  __pyx_v_self->usefulness_model = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":451
 *         self.probability_scaling_method=state_dict["probability_scaling_method"]
 *         self.usefulness_model=state_dict["usefulness_model"]
 *         self.independence_model=state_dict["independence_model"]             # <<<<<<<<<<<<<<
 * 
 *         self.node_split_fraction=state_dict["node_split_fraction"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_independence_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->independence_model);
  __Pyx_DECREF(__pyx_v_self->independence_model);
  __pyx_v_self->independence_model = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":453
 *         self.independence_model=state_dict["independence_model"]
 * 
 *         self.node_split_fraction=state_dict["node_split_fraction"]             # <<<<<<<<<<<<<<
 *         self.node_split_fraction_obj = state_dict['node_split_fraction_obj']
 *         self.noise_exponent=state_dict["noise_exponent"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_node_split_fraction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->node_split_fraction = __pyx_t_3;

  /* "awe_ml/classifier_cython.pyx":454
 * 
 *         self.node_split_fraction=state_dict["node_split_fraction"]
 *         self.node_split_fraction_obj = state_dict['node_split_fraction_obj']             # <<<<<<<<<<<<<<
 *         self.noise_exponent=state_dict["noise_exponent"]
 *         self.noise_exponent_obj =state_dict["noise_exponent_obj"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_node_split_fraction_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->node_split_fraction_obj);
  __Pyx_DECREF(__pyx_v_self->node_split_fraction_obj);
  __pyx_v_self->node_split_fraction_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":455
 *         self.node_split_fraction=state_dict["node_split_fraction"]
 *         self.node_split_fraction_obj = state_dict['node_split_fraction_obj']
 *         self.noise_exponent=state_dict["noise_exponent"]             # <<<<<<<<<<<<<<
 *         self.noise_exponent_obj =state_dict["noise_exponent_obj"]
 *         self.n_noise=state_dict["n_noise"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_noise_exponent); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->noise_exponent = __pyx_t_3;

  /* "awe_ml/classifier_cython.pyx":456
 *         self.node_split_fraction_obj = state_dict['node_split_fraction_obj']
 *         self.noise_exponent=state_dict["noise_exponent"]
 *         self.noise_exponent_obj =state_dict["noise_exponent_obj"]             # <<<<<<<<<<<<<<
 *         self.n_noise=state_dict["n_noise"]
 *         self.n_noise_obj = state_dict["n_noise_obj"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_noise_exponent_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->noise_exponent_obj);
  __Pyx_DECREF(__pyx_v_self->noise_exponent_obj);
  __pyx_v_self->noise_exponent_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":457
 *         self.noise_exponent=state_dict["noise_exponent"]
 *         self.noise_exponent_obj =state_dict["noise_exponent_obj"]
 *         self.n_noise=state_dict["n_noise"]             # <<<<<<<<<<<<<<
 *         self.n_noise_obj = state_dict["n_noise_obj"]
 *         self.noise_scale=state_dict["noise_scale"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_n_noise); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->n_noise = __pyx_t_3;

  /* "awe_ml/classifier_cython.pyx":458
 *         self.noise_exponent_obj =state_dict["noise_exponent_obj"]
 *         self.n_noise=state_dict["n_noise"]
 *         self.n_noise_obj = state_dict["n_noise_obj"]             # <<<<<<<<<<<<<<
 *         self.noise_scale=state_dict["noise_scale"]
 *         self.noise_exponent2=state_dict["noise_exponent2"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_n_noise_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->n_noise_obj);
  __Pyx_DECREF(__pyx_v_self->n_noise_obj);
  __pyx_v_self->n_noise_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":459
 *         self.n_noise=state_dict["n_noise"]
 *         self.n_noise_obj = state_dict["n_noise_obj"]
 *         self.noise_scale=state_dict["noise_scale"]             # <<<<<<<<<<<<<<
 *         self.noise_exponent2=state_dict["noise_exponent2"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_noise_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->noise_scale = __pyx_t_3;

  /* "awe_ml/classifier_cython.pyx":460
 *         self.n_noise_obj = state_dict["n_noise_obj"]
 *         self.noise_scale=state_dict["noise_scale"]
 *         self.noise_exponent2=state_dict["noise_exponent2"]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_noise_exponent2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->noise_exponent2);
  __Pyx_DECREF(__pyx_v_self->noise_exponent2);
  __pyx_v_self->noise_exponent2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":463
 * 
 * 
 *         self.X=state_dict["X"]             # <<<<<<<<<<<<<<
 *         self.y=state_dict["y"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->X, 0);
  __pyx_v_self->X = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "awe_ml/classifier_cython.pyx":464
 * 
 *         self.X=state_dict["X"]
 *         self.y=state_dict["y"]             # <<<<<<<<<<<<<<
 * 
 *         self.n_feature_categories_=state_dict["n_feature_categories_"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->y, 0);
  __pyx_v_self->y = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "awe_ml/classifier_cython.pyx":466
 *         self.y=state_dict["y"]
 * 
 *         self.n_feature_categories_=state_dict["n_feature_categories_"]             # <<<<<<<<<<<<<<
 * 
 *         ##### load custom data structures
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_n_feature_categories); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->n_feature_categories_ = __pyx_t_7;

  /* "awe_ml/classifier_cython.pyx":472
 *         cdef list classification_values_list_python #single_class_val
 *         cdef np_long ind
 *         classification_values_list_python = state_dict["classification_values_list"]             # <<<<<<<<<<<<<<
 *         self.classification_values_list.clear()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_classification_values_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 472, __pyx_L1_error)
  __pyx_v_classification_values_list_python = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":473
 *         cdef np_long ind
 *         classification_values_list_python = state_dict["classification_values_list"]
 *         self.classification_values_list.clear()             # <<<<<<<<<<<<<<
 * 
 *         self.classification_values_list.resize(len(classification_values_list_python))
 */
  __pyx_v_self->classification_values_list.clear();

  /* "awe_ml/classifier_cython.pyx":475
 *         self.classification_values_list.clear()
 * 
 *         self.classification_values_list.resize(len(classification_values_list_python))             # <<<<<<<<<<<<<<
 * 
 *         for ind in range( len(classification_values_list_python) ):
 */
  if (unlikely(__pyx_v_classification_values_list_python == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 475, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_GET_SIZE(__pyx_v_classification_values_list_python); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 475, __pyx_L1_error)
  try {
    __pyx_v_self->classification_values_list.resize(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 475, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":477
 *         self.classification_values_list.resize(len(classification_values_list_python))
 * 
 *         for ind in range( len(classification_values_list_python) ):             # <<<<<<<<<<<<<<
 *             self.classification_values_list[ind].setstate(classification_values_list_python[ind])
 *         ###########################
 */
  if (unlikely(__pyx_v_classification_values_list_python == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 477, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_GET_SIZE(__pyx_v_classification_values_list_python); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 477, __pyx_L1_error)
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_9; __pyx_t_2+=1) {
    __pyx_v_ind = __pyx_t_2;

    /* "awe_ml/classifier_cython.pyx":478
 * 
 *         for ind in range( len(classification_values_list_python) ):
 *             self.classification_values_list[ind].setstate(classification_values_list_python[ind])             # <<<<<<<<<<<<<<
 *         ###########################
 *         cdef list full_tree_list_python #single_class_val
 */
    if (unlikely(__pyx_v_classification_values_list_python == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 478, __pyx_L1_error)
    }
    __pyx_t_10 = __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(PyList_GET_ITEM(__pyx_v_classification_values_list_python, __pyx_v_ind)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 478, __pyx_L1_error)
    (__pyx_v_self->classification_values_list[__pyx_v_ind]).setstate(__pyx_t_10);
  }

  /* "awe_ml/classifier_cython.pyx":481
 *         ###########################
 *         cdef list full_tree_list_python #single_class_val
 *         full_tree_list_python = state_dict["full_tree_vector"]             # <<<<<<<<<<<<<<
 *         self.full_tree_vector.clear()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_full_tree_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 481, __pyx_L1_error)
  __pyx_v_full_tree_list_python = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":482
 *         cdef list full_tree_list_python #single_class_val
 *         full_tree_list_python = state_dict["full_tree_vector"]
 *         self.full_tree_vector.clear()             # <<<<<<<<<<<<<<
 * 
 *         self.full_tree_vector.resize(len(full_tree_list_python))
 */
  __pyx_v_self->full_tree_vector.clear();

  /* "awe_ml/classifier_cython.pyx":484
 *         self.full_tree_vector.clear()
 * 
 *         self.full_tree_vector.resize(len(full_tree_list_python))             # <<<<<<<<<<<<<<
 * 
 *         for ind in range( len(full_tree_list_python) ):
 */
  if (unlikely(__pyx_v_full_tree_list_python == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 484, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_GET_SIZE(__pyx_v_full_tree_list_python); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 484, __pyx_L1_error)
  try {
    __pyx_v_self->full_tree_vector.resize(__pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 484, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":486
 *         self.full_tree_vector.resize(len(full_tree_list_python))
 * 
 *         for ind in range( len(full_tree_list_python) ):             # <<<<<<<<<<<<<<
 *             self.full_tree_vector[ind].setstate(full_tree_list_python[ind])
 *         #########################
 */
  if (unlikely(__pyx_v_full_tree_list_python == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 486, __pyx_L1_error)
  }
  __pyx_t_8 = PyList_GET_SIZE(__pyx_v_full_tree_list_python); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 486, __pyx_L1_error)
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_9; __pyx_t_2+=1) {
    __pyx_v_ind = __pyx_t_2;

    /* "awe_ml/classifier_cython.pyx":487
 * 
 *         for ind in range( len(full_tree_list_python) ):
 *             self.full_tree_vector[ind].setstate(full_tree_list_python[ind])             # <<<<<<<<<<<<<<
 *         #########################
 * 
 */
    if (unlikely(__pyx_v_full_tree_list_python == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 487, __pyx_L1_error)
    }
    __pyx_t_11 = __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(PyList_GET_ITEM(__pyx_v_full_tree_list_python, __pyx_v_ind)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 487, __pyx_L1_error)
    (__pyx_v_self->full_tree_vector[__pyx_v_ind]).setstate(__pyx_t_11);
  }

  /* "awe_ml/classifier_cython.pyx":492
 * 
 * 
 *         self.full_tree_indicies_list=state_dict["full_tree_indicies_list"]             # <<<<<<<<<<<<<<
 *         self.full_tree_to_local_tree_lookup_list=state_dict["full_tree_to_local_tree_lookup_list"]
 *         self.local_weight_tree=state_dict["local_weight_tree"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_full_tree_indicies_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->full_tree_indicies_list = __pyx_t_12;

  /* "awe_ml/classifier_cython.pyx":493
 * 
 *         self.full_tree_indicies_list=state_dict["full_tree_indicies_list"]
 *         self.full_tree_to_local_tree_lookup_list=state_dict["full_tree_to_local_tree_lookup_list"]             # <<<<<<<<<<<<<<
 *         self.local_weight_tree=state_dict["local_weight_tree"]
 *         # self.parents_list=state_dict["parents_list"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_full_tree_to_local_tree_lookup_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->full_tree_to_local_tree_lookup_list = __pyx_t_12;

  /* "awe_ml/classifier_cython.pyx":494
 *         self.full_tree_indicies_list=state_dict["full_tree_indicies_list"]
 *         self.full_tree_to_local_tree_lookup_list=state_dict["full_tree_to_local_tree_lookup_list"]
 *         self.local_weight_tree=state_dict["local_weight_tree"]             # <<<<<<<<<<<<<<
 *         # self.parents_list=state_dict["parents_list"]
 *         self.node_info=state_dict["node_info"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_local_weight_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->local_weight_tree = __pyx_t_13;

  /* "awe_ml/classifier_cython.pyx":496
 *         self.local_weight_tree=state_dict["local_weight_tree"]
 *         # self.parents_list=state_dict["parents_list"]
 *         self.node_info=state_dict["node_info"]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_node_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = __pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->node_info = __pyx_t_14;

  /* "awe_ml/classifier_cython.pyx":500
 * 
 * 
 *         self.children_list=state_dict["children_list"]             # <<<<<<<<<<<<<<
 *         self.feature_pair_to_comb_feat_ind=state_dict["feature_pair_to_comb_feat_ind"]
 *         self.comb_feat_ind_to_feature_pair=state_dict["comb_feat_ind_to_feature_pair"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_children_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->children_list = __pyx_t_15;

  /* "awe_ml/classifier_cython.pyx":501
 * 
 *         self.children_list=state_dict["children_list"]
 *         self.feature_pair_to_comb_feat_ind=state_dict["feature_pair_to_comb_feat_ind"]             # <<<<<<<<<<<<<<
 *         self.comb_feat_ind_to_feature_pair=state_dict["comb_feat_ind_to_feature_pair"]
 *         self.correlation_map=state_dict["correlation_map"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_feature_pair_to_comb_feat_ind); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->feature_pair_to_comb_feat_ind = __pyx_t_16;

  /* "awe_ml/classifier_cython.pyx":502
 *         self.children_list=state_dict["children_list"]
 *         self.feature_pair_to_comb_feat_ind=state_dict["feature_pair_to_comb_feat_ind"]
 *         self.comb_feat_ind_to_feature_pair=state_dict["comb_feat_ind_to_feature_pair"]             # <<<<<<<<<<<<<<
 *         self.correlation_map=state_dict["correlation_map"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_comb_feat_ind_to_feature_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = __pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->comb_feat_ind_to_feature_pair = __pyx_t_17;

  /* "awe_ml/classifier_cython.pyx":503
 *         self.feature_pair_to_comb_feat_ind=state_dict["feature_pair_to_comb_feat_ind"]
 *         self.comb_feat_ind_to_feature_pair=state_dict["comb_feat_ind_to_feature_pair"]
 *         self.correlation_map=state_dict["correlation_map"]             # <<<<<<<<<<<<<<
 * 
 *         self.nbins=state_dict["nbins"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_correlation_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->correlation_map = __pyx_t_18;

  /* "awe_ml/classifier_cython.pyx":505
 *         self.correlation_map=state_dict["correlation_map"]
 * 
 *         self.nbins=state_dict["nbins"]             # <<<<<<<<<<<<<<
 *         self.max_bins=state_dict["max_bins"]
 *         self.categorical_feature_inds=state_dict["categorical_feature_inds"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_nbins); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->nbins = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":506
 * 
 *         self.nbins=state_dict["nbins"]
 *         self.max_bins=state_dict["max_bins"]             # <<<<<<<<<<<<<<
 *         self.categorical_feature_inds=state_dict["categorical_feature_inds"]
 *         self.binning_method=state_dict["binning_method"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_max_bins); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->max_bins = __pyx_t_2;

  /* "awe_ml/classifier_cython.pyx":507
 *         self.nbins=state_dict["nbins"]
 *         self.max_bins=state_dict["max_bins"]
 *         self.categorical_feature_inds=state_dict["categorical_feature_inds"]             # <<<<<<<<<<<<<<
 *         self.binning_method=state_dict["binning_method"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_categorical_feature_inds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->categorical_feature_inds);
  __Pyx_DECREF(__pyx_v_self->categorical_feature_inds);
  __pyx_v_self->categorical_feature_inds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":508
 *         self.max_bins=state_dict["max_bins"]
 *         self.categorical_feature_inds=state_dict["categorical_feature_inds"]
 *         self.binning_method=state_dict["binning_method"]             # <<<<<<<<<<<<<<
 * 
 *         self.categorical_bin_list=state_dict["categorical_bin_list"]
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_binning_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->binning_method);
  __Pyx_DECREF(__pyx_v_self->binning_method);
  __pyx_v_self->binning_method = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":510
 *         self.binning_method=state_dict["binning_method"]
 * 
 *         self.categorical_bin_list=state_dict["categorical_bin_list"]             # <<<<<<<<<<<<<<
 *         self.numeric_bin_list=state_dict["numeric_bin_list"]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_categorical_bin_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 510, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->categorical_bin_list);
  __Pyx_DECREF(__pyx_v_self->categorical_bin_list);
  __pyx_v_self->categorical_bin_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":511
 * 
 *         self.categorical_bin_list=state_dict["categorical_bin_list"]
 *         self.numeric_bin_list=state_dict["numeric_bin_list"]             # <<<<<<<<<<<<<<
 * 
 *         #########
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_numeric_bin_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->numeric_bin_list);
  __Pyx_DECREF(__pyx_v_self->numeric_bin_list);
  __pyx_v_self->numeric_bin_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":514
 * 
 *         #########
 *         node_label_to_index_list_by_level= state_dict["node_label_to_index_dict_list"]             # <<<<<<<<<<<<<<
 *         cdef list node_label_to_index_list
 *         cdef pair[vector[np_long],np_long] label_index_pair
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_node_label_to_index_dict_list); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node_label_to_index_list_by_level = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":520
 *         cdef vector[map[vector[np_long],np_long]] node_label_to_index_dict_vector
 * 
 *         for node_label_to_index_list in node_label_to_index_list_by_level:             # <<<<<<<<<<<<<<
 *             # convert list back into map
 *             for label_index_pair in node_label_to_index_list: #iterate over key, value pairs in list and convert to mappable key, value pairs
 */
  if (likely(PyList_CheckExact(__pyx_v_node_label_to_index_list_by_level)) || PyTuple_CheckExact(__pyx_v_node_label_to_index_list_by_level)) {
    __pyx_t_1 = __pyx_v_node_label_to_index_list_by_level; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
    __pyx_t_19 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_node_label_to_index_list_by_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_19 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 520, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_19)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_20); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 520, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_20); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 520, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 520, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      }
    } else {
      __pyx_t_20 = __pyx_t_19(__pyx_t_1);
      if (unlikely(!__pyx_t_20)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 520, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_20);
    }
    if (!(likely(PyList_CheckExact(__pyx_t_20))||((__pyx_t_20) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_20)->tp_name), 0))) __PYX_ERR(1, 520, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_node_label_to_index_list, ((PyObject*)__pyx_t_20));
    __pyx_t_20 = 0;

    /* "awe_ml/classifier_cython.pyx":522
 *         for node_label_to_index_list in node_label_to_index_list_by_level:
 *             # convert list back into map
 *             for label_index_pair in node_label_to_index_list: #iterate over key, value pairs in list and convert to mappable key, value pairs             # <<<<<<<<<<<<<<
 *                 node_label_to_index_map.insert(label_index_pair)
 *             #add map to vector
 */
    if (unlikely(__pyx_v_node_label_to_index_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(1, 522, __pyx_L1_error)
    }
    __pyx_t_20 = __pyx_v_node_label_to_index_list; __Pyx_INCREF(__pyx_t_20); __pyx_t_9 = 0;
    for (;;) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_20)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_21 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_9); __Pyx_INCREF(__pyx_t_21); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 522, __pyx_L1_error)
      #else
      __pyx_t_21 = PySequence_ITEM(__pyx_t_20, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 522, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      #endif
      __pyx_t_22 = __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_21); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 522, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_v_label_index_pair = __pyx_t_22;

      /* "awe_ml/classifier_cython.pyx":523
 *             # convert list back into map
 *             for label_index_pair in node_label_to_index_list: #iterate over key, value pairs in list and convert to mappable key, value pairs
 *                 node_label_to_index_map.insert(label_index_pair)             # <<<<<<<<<<<<<<
 *             #add map to vector
 *             node_label_to_index_dict_vector.push_back(node_label_to_index_map)
 */
      try {
        __pyx_v_node_label_to_index_map.insert(__pyx_v_label_index_pair);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 523, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":522
 *         for node_label_to_index_list in node_label_to_index_list_by_level:
 *             # convert list back into map
 *             for label_index_pair in node_label_to_index_list: #iterate over key, value pairs in list and convert to mappable key, value pairs             # <<<<<<<<<<<<<<
 *                 node_label_to_index_map.insert(label_index_pair)
 *             #add map to vector
 */
    }
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "awe_ml/classifier_cython.pyx":525
 *                 node_label_to_index_map.insert(label_index_pair)
 *             #add map to vector
 *             node_label_to_index_dict_vector.push_back(node_label_to_index_map)             # <<<<<<<<<<<<<<
 *         self.node_label_to_index_dict_list = node_label_to_index_dict_vector
 * 
 */
    try {
      __pyx_v_node_label_to_index_dict_vector.push_back(__pyx_v_node_label_to_index_map);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 525, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":520
 *         cdef vector[map[vector[np_long],np_long]] node_label_to_index_dict_vector
 * 
 *         for node_label_to_index_list in node_label_to_index_list_by_level:             # <<<<<<<<<<<<<<
 *             # convert list back into map
 *             for label_index_pair in node_label_to_index_list: #iterate over key, value pairs in list and convert to mappable key, value pairs
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":526
 *             #add map to vector
 *             node_label_to_index_dict_vector.push_back(node_label_to_index_map)
 *         self.node_label_to_index_dict_list = node_label_to_index_dict_vector             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->node_label_to_index_dict_list = __pyx_v_node_label_to_index_dict_vector;

  /* "awe_ml/classifier_cython.pyx":530
 * 
 *         #########
 *         nodes_list_by_level = state_dict["nodes"]             # <<<<<<<<<<<<<<
 *         cdef list nodes_list
 *         cdef pair[vector[np_long], pair[vector[np_long],vector[np_long] ]] node_pair
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_state_dict, __pyx_n_u_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodes_list_by_level = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":536
 *         cdef vector [map[vector[np_long], pair[vector[np_long],vector[np_long] ] ] ] nodes #1st level: tree level 2nd level: map of node label to pair (node info, children feature num)
 * 
 *         for nodes_list in nodes_list_by_level:             # <<<<<<<<<<<<<<
 *             #convert list back into map
 *             for node_pair in nodes_list:
 */
  if (likely(PyList_CheckExact(__pyx_v_nodes_list_by_level)) || PyTuple_CheckExact(__pyx_v_nodes_list_by_level)) {
    __pyx_t_1 = __pyx_v_nodes_list_by_level; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
    __pyx_t_19 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_nodes_list_by_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_19 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 536, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_19)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_20); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 536, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_20 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_20); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 536, __pyx_L1_error)
        #else
        __pyx_t_20 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        #endif
      }
    } else {
      __pyx_t_20 = __pyx_t_19(__pyx_t_1);
      if (unlikely(!__pyx_t_20)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 536, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_20);
    }
    if (!(likely(PyList_CheckExact(__pyx_t_20))||((__pyx_t_20) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_20)->tp_name), 0))) __PYX_ERR(1, 536, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_nodes_list, ((PyObject*)__pyx_t_20));
    __pyx_t_20 = 0;

    /* "awe_ml/classifier_cython.pyx":538
 *         for nodes_list in nodes_list_by_level:
 *             #convert list back into map
 *             for node_pair in nodes_list:             # <<<<<<<<<<<<<<
 *                 nodes_map.insert(node_pair)
 *             # add map to vector
 */
    if (unlikely(__pyx_v_nodes_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(1, 538, __pyx_L1_error)
    }
    __pyx_t_20 = __pyx_v_nodes_list; __Pyx_INCREF(__pyx_t_20); __pyx_t_9 = 0;
    for (;;) {
      if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_20)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_21 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_9); __Pyx_INCREF(__pyx_t_21); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 538, __pyx_L1_error)
      #else
      __pyx_t_21 = PySequence_ITEM(__pyx_t_20, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 538, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      #endif
      __pyx_t_23 = __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(__pyx_t_21); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 538, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __pyx_v_node_pair = __pyx_t_23;

      /* "awe_ml/classifier_cython.pyx":539
 *             #convert list back into map
 *             for node_pair in nodes_list:
 *                 nodes_map.insert(node_pair)             # <<<<<<<<<<<<<<
 *             # add map to vector
 *             nodes.push_back(nodes_map)
 */
      try {
        __pyx_v_nodes_map.insert(__pyx_v_node_pair);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 539, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":538
 *         for nodes_list in nodes_list_by_level:
 *             #convert list back into map
 *             for node_pair in nodes_list:             # <<<<<<<<<<<<<<
 *                 nodes_map.insert(node_pair)
 *             # add map to vector
 */
    }
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "awe_ml/classifier_cython.pyx":541
 *                 nodes_map.insert(node_pair)
 *             # add map to vector
 *             nodes.push_back(nodes_map)             # <<<<<<<<<<<<<<
 *         self.nodes=nodes
 * 
 */
    try {
      __pyx_v_nodes.push_back(__pyx_v_nodes_map);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 541, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":536
 *         cdef vector [map[vector[np_long], pair[vector[np_long],vector[np_long] ] ] ] nodes #1st level: tree level 2nd level: map of node label to pair (node info, children feature num)
 * 
 *         for nodes_list in nodes_list_by_level:             # <<<<<<<<<<<<<<
 *             #convert list back into map
 *             for node_pair in nodes_list:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":542
 *             # add map to vector
 *             nodes.push_back(nodes_map)
 *         self.nodes=nodes             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->nodes = __pyx_v_nodes;

  /* "awe_ml/classifier_cython.pyx":423
 *         return state_dict
 * 
 *     def __setstate__(self, state_dict):             # <<<<<<<<<<<<<<
 * 
 *         self._estimator_type = "classifier" #fixed value
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_classification_values_list_python);
  __Pyx_XDECREF(__pyx_v_full_tree_list_python);
  __Pyx_XDECREF(__pyx_v_node_label_to_index_list_by_level);
  __Pyx_XDECREF(__pyx_v_node_label_to_index_list);
  __Pyx_XDECREF(__pyx_v_nodes_list_by_level);
  __Pyx_XDECREF(__pyx_v_nodes_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":548
 * 
 * 
 *     def get_params(self, deep=True):             # <<<<<<<<<<<<<<
 * 
 *         return {"max_fully_connected_depth": self.max_fully_connected_depth, "n_max_classify": self.n_max_classify,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7get_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7get_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_deep = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_deep,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_deep);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_params") < 0)) __PYX_ERR(1, 548, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_deep = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_params", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 548, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.get_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_6get_params(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), __pyx_v_deep);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_6get_params(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_deep) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_params", 0);

  /* "awe_ml/classifier_cython.pyx":550
 *     def get_params(self, deep=True):
 * 
 *         return {"max_fully_connected_depth": self.max_fully_connected_depth, "n_max_classify": self.n_max_classify,             # <<<<<<<<<<<<<<
 *                 "max_depth":self.max_depth, "n_min_to_add_leaf":self.n_min_to_add_leaf,"features_per_node":self.features_per_node,
 *                 "node_split_model":self.node_split_model,"node_split_fraction":self.node_split_fraction_obj,"probability_scaling_method":self.probability_scaling_method,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(18); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_fully_connected_depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_max_fully_connected_depth, __pyx_t_2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_max_classify); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_n_max_classify, __pyx_t_2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":551
 * 
 *         return {"max_fully_connected_depth": self.max_fully_connected_depth, "n_max_classify": self.n_max_classify,
 *                 "max_depth":self.max_depth, "n_min_to_add_leaf":self.n_min_to_add_leaf,"features_per_node":self.features_per_node,             # <<<<<<<<<<<<<<
 *                 "node_split_model":self.node_split_model,"node_split_fraction":self.node_split_fraction_obj,"probability_scaling_method":self.probability_scaling_method,
 *                 "noise_exponent":self.noise_exponent_obj,"noise_exponent2":self.noise_exponent2,"usefulness_model":self.usefulness_model,
 */
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_max_depth, __pyx_t_2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_min_to_add_leaf); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_n_min_to_add_leaf, __pyx_t_2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->features_per_node); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_features_per_node, __pyx_t_2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":552
 *         return {"max_fully_connected_depth": self.max_fully_connected_depth, "n_max_classify": self.n_max_classify,
 *                 "max_depth":self.max_depth, "n_min_to_add_leaf":self.n_min_to_add_leaf,"features_per_node":self.features_per_node,
 *                 "node_split_model":self.node_split_model,"node_split_fraction":self.node_split_fraction_obj,"probability_scaling_method":self.probability_scaling_method,             # <<<<<<<<<<<<<<
 *                 "noise_exponent":self.noise_exponent_obj,"noise_exponent2":self.noise_exponent2,"usefulness_model":self.usefulness_model,
 *                 "n_noise":self.n_noise_obj,"independence_model":self.independence_model, "feature_names_txt":self.feature_names_txt,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_node_split_model, __pyx_v_self->node_split_model) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_node_split_fraction, __pyx_v_self->node_split_fraction_obj) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_probability_scaling_method, __pyx_v_self->probability_scaling_method) < 0) __PYX_ERR(1, 550, __pyx_L1_error)

  /* "awe_ml/classifier_cython.pyx":553
 *                 "max_depth":self.max_depth, "n_min_to_add_leaf":self.n_min_to_add_leaf,"features_per_node":self.features_per_node,
 *                 "node_split_model":self.node_split_model,"node_split_fraction":self.node_split_fraction_obj,"probability_scaling_method":self.probability_scaling_method,
 *                 "noise_exponent":self.noise_exponent_obj,"noise_exponent2":self.noise_exponent2,"usefulness_model":self.usefulness_model,             # <<<<<<<<<<<<<<
 *                 "n_noise":self.n_noise_obj,"independence_model":self.independence_model, "feature_names_txt":self.feature_names_txt,
 *                 "nbins":self.nbins,"max_bins":self.max_bins,"categorical_feature_inds":self.categorical_feature_inds,"binning_method":self.binning_method}
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_noise_exponent, __pyx_v_self->noise_exponent_obj) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_noise_exponent2, __pyx_v_self->noise_exponent2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_usefulness_model, __pyx_v_self->usefulness_model) < 0) __PYX_ERR(1, 550, __pyx_L1_error)

  /* "awe_ml/classifier_cython.pyx":554
 *                 "node_split_model":self.node_split_model,"node_split_fraction":self.node_split_fraction_obj,"probability_scaling_method":self.probability_scaling_method,
 *                 "noise_exponent":self.noise_exponent_obj,"noise_exponent2":self.noise_exponent2,"usefulness_model":self.usefulness_model,
 *                 "n_noise":self.n_noise_obj,"independence_model":self.independence_model, "feature_names_txt":self.feature_names_txt,             # <<<<<<<<<<<<<<
 *                 "nbins":self.nbins,"max_bins":self.max_bins,"categorical_feature_inds":self.categorical_feature_inds,"binning_method":self.binning_method}
 * 
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_n_noise, __pyx_v_self->n_noise_obj) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_independence_model, __pyx_v_self->independence_model) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_feature_names_txt, __pyx_v_self->feature_names_txt) < 0) __PYX_ERR(1, 550, __pyx_L1_error)

  /* "awe_ml/classifier_cython.pyx":555
 *                 "noise_exponent":self.noise_exponent_obj,"noise_exponent2":self.noise_exponent2,"usefulness_model":self.usefulness_model,
 *                 "n_noise":self.n_noise_obj,"independence_model":self.independence_model, "feature_names_txt":self.feature_names_txt,
 *                 "nbins":self.nbins,"max_bins":self.max_bins,"categorical_feature_inds":self.categorical_feature_inds,"binning_method":self.binning_method}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->nbins); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_nbins, __pyx_t_2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_bins); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_max_bins, __pyx_t_2) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_categorical_feature_inds, __pyx_v_self->categorical_feature_inds) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_binning_method, __pyx_v_self->binning_method) < 0) __PYX_ERR(1, 550, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":548
 * 
 * 
 *     def get_params(self, deep=True):             # <<<<<<<<<<<<<<
 * 
 *         return {"max_fully_connected_depth": self.max_fully_connected_depth, "n_max_classify": self.n_max_classify,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.get_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":558
 * 
 * 
 *     def set_params(self, **parameters):             # <<<<<<<<<<<<<<
 *         for parameter, value in parameters.items():
 *             # setattr(self, parameter, value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9set_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9set_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parameters = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_params (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_params", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_params", 1))) return NULL;
  __pyx_v_parameters = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_parameters)) return NULL;
  __Pyx_GOTREF(__pyx_v_parameters);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8set_params(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), __pyx_v_parameters);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_parameters);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8set_params(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_parameters) {
  PyObject *__pyx_v_parameter = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("set_params", 0);

  /* "awe_ml/classifier_cython.pyx":559
 * 
 *     def set_params(self, **parameters):
 *         for parameter, value in parameters.items():             # <<<<<<<<<<<<<<
 *             # setattr(self, parameter, value)
 * 
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_parameters, 1, __pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(1, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_parameter, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "awe_ml/classifier_cython.pyx":562
 *             # setattr(self, parameter, value)
 * 
 *             if hasattr(self,parameter):             # <<<<<<<<<<<<<<
 *                 setattr(self, parameter, value)
 *                 #hack to store float values as objects for skikit-learn checks
 */
    __pyx_t_8 = __Pyx_HasAttr(((PyObject *)__pyx_v_self), __pyx_v_parameter); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 562, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "awe_ml/classifier_cython.pyx":563
 * 
 *             if hasattr(self,parameter):
 *                 setattr(self, parameter, value)             # <<<<<<<<<<<<<<
 *                 #hack to store float values as objects for skikit-learn checks
 *                 if parameter=="noise_exponent":
 */
      __pyx_t_10 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_parameter, __pyx_v_value); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 563, __pyx_L1_error)

      /* "awe_ml/classifier_cython.pyx":565
 *                 setattr(self, parameter, value)
 *                 #hack to store float values as objects for skikit-learn checks
 *                 if parameter=="noise_exponent":             # <<<<<<<<<<<<<<
 *                     self.noise_exponent_obj=value
 *                 elif parameter=="node_split_fraction":
 */
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_v_parameter, __pyx_n_u_noise_exponent, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 565, __pyx_L1_error)
      if (__pyx_t_9) {

        /* "awe_ml/classifier_cython.pyx":566
 *                 #hack to store float values as objects for skikit-learn checks
 *                 if parameter=="noise_exponent":
 *                     self.noise_exponent_obj=value             # <<<<<<<<<<<<<<
 *                 elif parameter=="node_split_fraction":
 *                     self.node_split_fraction_obj=value
 */
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        __Pyx_GOTREF(__pyx_v_self->noise_exponent_obj);
        __Pyx_DECREF(__pyx_v_self->noise_exponent_obj);
        __pyx_v_self->noise_exponent_obj = __pyx_v_value;

        /* "awe_ml/classifier_cython.pyx":565
 *                 setattr(self, parameter, value)
 *                 #hack to store float values as objects for skikit-learn checks
 *                 if parameter=="noise_exponent":             # <<<<<<<<<<<<<<
 *                     self.noise_exponent_obj=value
 *                 elif parameter=="node_split_fraction":
 */
        goto __pyx_L6;
      }

      /* "awe_ml/classifier_cython.pyx":567
 *                 if parameter=="noise_exponent":
 *                     self.noise_exponent_obj=value
 *                 elif parameter=="node_split_fraction":             # <<<<<<<<<<<<<<
 *                     self.node_split_fraction_obj=value
 *                 elif parameter=="n_noise":
 */
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_v_parameter, __pyx_n_u_node_split_fraction, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
      if (__pyx_t_9) {

        /* "awe_ml/classifier_cython.pyx":568
 *                     self.noise_exponent_obj=value
 *                 elif parameter=="node_split_fraction":
 *                     self.node_split_fraction_obj=value             # <<<<<<<<<<<<<<
 *                 elif parameter=="n_noise":
 *                     self.n_noise_obj = value
 */
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        __Pyx_GOTREF(__pyx_v_self->node_split_fraction_obj);
        __Pyx_DECREF(__pyx_v_self->node_split_fraction_obj);
        __pyx_v_self->node_split_fraction_obj = __pyx_v_value;

        /* "awe_ml/classifier_cython.pyx":567
 *                 if parameter=="noise_exponent":
 *                     self.noise_exponent_obj=value
 *                 elif parameter=="node_split_fraction":             # <<<<<<<<<<<<<<
 *                     self.node_split_fraction_obj=value
 *                 elif parameter=="n_noise":
 */
        goto __pyx_L6;
      }

      /* "awe_ml/classifier_cython.pyx":569
 *                 elif parameter=="node_split_fraction":
 *                     self.node_split_fraction_obj=value
 *                 elif parameter=="n_noise":             # <<<<<<<<<<<<<<
 *                     self.n_noise_obj = value
 * 
 */
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_v_parameter, __pyx_n_u_n_noise, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 569, __pyx_L1_error)
      if (__pyx_t_9) {

        /* "awe_ml/classifier_cython.pyx":570
 *                     self.node_split_fraction_obj=value
 *                 elif parameter=="n_noise":
 *                     self.n_noise_obj = value             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __Pyx_INCREF(__pyx_v_value);
        __Pyx_GIVEREF(__pyx_v_value);
        __Pyx_GOTREF(__pyx_v_self->n_noise_obj);
        __Pyx_DECREF(__pyx_v_self->n_noise_obj);
        __pyx_v_self->n_noise_obj = __pyx_v_value;

        /* "awe_ml/classifier_cython.pyx":569
 *                 elif parameter=="node_split_fraction":
 *                     self.node_split_fraction_obj=value
 *                 elif parameter=="n_noise":             # <<<<<<<<<<<<<<
 *                     self.n_noise_obj = value
 * 
 */
      }
      __pyx_L6:;

      /* "awe_ml/classifier_cython.pyx":562
 *             # setattr(self, parameter, value)
 * 
 *             if hasattr(self,parameter):             # <<<<<<<<<<<<<<
 *                 setattr(self, parameter, value)
 *                 #hack to store float values as objects for skikit-learn checks
 */
      goto __pyx_L5;
    }

    /* "awe_ml/classifier_cython.pyx":573
 * 
 *             else:
 *                 if parameter!="noise_exponent2": ## allow for none value             # <<<<<<<<<<<<<<
 *                     raise AttributeError("Cannot set parameter {}, no such parameter exists".format(parameter))
 *         return self
 */
    /*else*/ {
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_v_parameter, __pyx_n_u_noise_exponent2, Py_NE)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 573, __pyx_L1_error)
      if (unlikely(__pyx_t_9)) {

        /* "awe_ml/classifier_cython.pyx":574
 *             else:
 *                 if parameter!="noise_exponent2": ## allow for none value
 *                     raise AttributeError("Cannot set parameter {}, no such parameter exists".format(parameter))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Cannot_set_parameter_no_such_par, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_parameter); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_v_parameter};
            __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_6);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_v_parameter};
            __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_6);
          } else
          #endif
          {
            __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 574, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
            __Pyx_INCREF(__pyx_v_parameter);
            __Pyx_GIVEREF(__pyx_v_parameter);
            PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_parameter);
            __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_AttributeError, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 574, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(1, 574, __pyx_L1_error)

        /* "awe_ml/classifier_cython.pyx":573
 * 
 *             else:
 *                 if parameter!="noise_exponent2": ## allow for none value             # <<<<<<<<<<<<<<
 *                     raise AttributeError("Cannot set parameter {}, no such parameter exists".format(parameter))
 *         return self
 */
      }
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":575
 *                 if parameter!="noise_exponent2": ## allow for none value
 *                     raise AttributeError("Cannot set parameter {}, no such parameter exists".format(parameter))
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":558
 * 
 * 
 *     def set_params(self, **parameters):             # <<<<<<<<<<<<<<
 *         for parameter, value in parameters.items():
 *             # setattr(self, parameter, value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.set_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parameter);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":578
 * 
 * 
 *     cdef string get_name(self, np_long comb_feat_ind):             # <<<<<<<<<<<<<<
 *         """
 *         returns a C++ string with the text name for feature ind
 */

static std::string __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_get_name(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind) {
  PyObject *__pyx_v_name_txt = 0;
  PyObject *__pyx_v_feature_txt = 0;
  PyObject *__pyx_v_cat_txt = 0;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_num;
  PyObject *__pyx_v_bin_dict = 0;
  __Pyx_memviewslice __pyx_v_bin_list = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_feature_pair;
  PyObject *__pyx_v_feature_bin = NULL;
  std::string __pyx_v_name_txt_cpp;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  __Pyx_memviewslice __pyx_t_13 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  std::string __pyx_t_21;
  __Pyx_RefNannySetupContext("get_name", 0);

  /* "awe_ml/classifier_cython.pyx":591
 *         cdef pair[np_long,np_long] feature_pair
 * 
 *         feature_pair  =  self.comb_feat_ind_to_feature_pair[comb_feat_ind]             # <<<<<<<<<<<<<<
 * 
 *         # get name of feature
 */
  __pyx_v_feature_pair = (__pyx_v_self->comb_feat_ind_to_feature_pair[__pyx_v_comb_feat_ind]);

  /* "awe_ml/classifier_cython.pyx":594
 * 
 *         # get name of feature
 *         if self.feature_names_txt is not None:             # <<<<<<<<<<<<<<
 *             feature_txt  = str(self.feature_names_txt[feature_pair.first])
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->feature_names_txt != ((PyObject*)Py_None));
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "awe_ml/classifier_cython.pyx":595
 *         # get name of feature
 *         if self.feature_names_txt is not None:
 *             feature_txt  = str(self.feature_names_txt[feature_pair.first])             # <<<<<<<<<<<<<<
 *         else:
 *             feature_txt  = "x"+str(feature_pair.first)
 */
    if (unlikely(__pyx_v_self->feature_names_txt == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 595, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), PyList_GET_ITEM(__pyx_v_self->feature_names_txt, __pyx_v_feature_pair.first)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_feature_txt = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "awe_ml/classifier_cython.pyx":594
 * 
 *         # get name of feature
 *         if self.feature_names_txt is not None:             # <<<<<<<<<<<<<<
 *             feature_txt  = str(self.feature_names_txt[feature_pair.first])
 *         else:
 */
    goto __pyx_L3;
  }

  /* "awe_ml/classifier_cython.pyx":597
 *             feature_txt  = str(self.feature_names_txt[feature_pair.first])
 *         else:
 *             feature_txt  = "x"+str(feature_pair.first)             # <<<<<<<<<<<<<<
 * 
 *         #get name of category
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_pair.first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_n_u_x, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_feature_txt = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "awe_ml/classifier_cython.pyx":600
 * 
 *         #get name of category
 *         cat_txt = str(feature_pair.second)             # <<<<<<<<<<<<<<
 *         if self.categorical_bin_list is not None: #search categorical variables
 *             for feature_num, bin_dict in self.categorical_bin_list:
 */
  __pyx_t_3 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_pair.second); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cat_txt = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "awe_ml/classifier_cython.pyx":601
 *         #get name of category
 *         cat_txt = str(feature_pair.second)
 *         if self.categorical_bin_list is not None: #search categorical variables             # <<<<<<<<<<<<<<
 *             for feature_num, bin_dict in self.categorical_bin_list:
 *                 if feature_num==feature_pair.first:
 */
  __pyx_t_2 = (__pyx_v_self->categorical_bin_list != ((PyObject*)Py_None));
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "awe_ml/classifier_cython.pyx":602
 *         cat_txt = str(feature_pair.second)
 *         if self.categorical_bin_list is not None: #search categorical variables
 *             for feature_num, bin_dict in self.categorical_bin_list:             # <<<<<<<<<<<<<<
 *                 if feature_num==feature_pair.first:
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 */
    if (unlikely(__pyx_v_self->categorical_bin_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(1, 602, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_v_self->categorical_bin_list; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    for (;;) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 602, __pyx_L1_error)
      #else
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(1, 602, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 602, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L7_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(1, 602, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(1, 602, __pyx_L1_error)
        __pyx_L8_unpacking_done:;
      }
      __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_t_6); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 602, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (!(likely(PyDict_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(1, 602, __pyx_L1_error)
      __pyx_v_feature_num = __pyx_t_10;
      __Pyx_XDECREF_SET(__pyx_v_bin_dict, ((PyObject*)__pyx_t_7));
      __pyx_t_7 = 0;

      /* "awe_ml/classifier_cython.pyx":603
 *         if self.categorical_bin_list is not None: #search categorical variables
 *             for feature_num, bin_dict in self.categorical_bin_list:
 *                 if feature_num==feature_pair.first:             # <<<<<<<<<<<<<<
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 *                     if feature_bin is not None:
 */
      __pyx_t_1 = ((__pyx_v_feature_num == __pyx_v_feature_pair.first) != 0);
      if (__pyx_t_1) {

        /* "awe_ml/classifier_cython.pyx":604
 *             for feature_num, bin_dict in self.categorical_bin_list:
 *                 if feature_num==feature_pair.first:
 *                     feature_bin = bin_dict.get(feature_pair.second,None)             # <<<<<<<<<<<<<<
 *                     if feature_bin is not None:
 *                         cat_txt=str(feature_bin)
 */
        if (unlikely(__pyx_v_bin_dict == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
          __PYX_ERR(1, 604, __pyx_L1_error)
        }
        __pyx_t_3 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_pair.second); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyDict_GetItemDefault(__pyx_v_bin_dict, __pyx_t_3, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 604, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_feature_bin = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "awe_ml/classifier_cython.pyx":605
 *                 if feature_num==feature_pair.first:
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 *                     if feature_bin is not None:             # <<<<<<<<<<<<<<
 *                         cat_txt=str(feature_bin)
 *                     else:
 */
        __pyx_t_1 = (__pyx_v_feature_bin != Py_None);
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "awe_ml/classifier_cython.pyx":606
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 *                     if feature_bin is not None:
 *                         cat_txt=str(feature_bin)             # <<<<<<<<<<<<<<
 *                     else:
 *                         cat_txt="bin #{0}".format(feature_pair.first)
 */
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_feature_bin); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 606, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF_SET(__pyx_v_cat_txt, ((PyObject*)__pyx_t_7));
          __pyx_t_7 = 0;

          /* "awe_ml/classifier_cython.pyx":605
 *                 if feature_num==feature_pair.first:
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 *                     if feature_bin is not None:             # <<<<<<<<<<<<<<
 *                         cat_txt=str(feature_bin)
 *                     else:
 */
          goto __pyx_L10;
        }

        /* "awe_ml/classifier_cython.pyx":608
 *                         cat_txt=str(feature_bin)
 *                     else:
 *                         cat_txt="bin #{0}".format(feature_pair.first)             # <<<<<<<<<<<<<<
 *                     break
 *             else: #search numeric features if categorical variable not found
 */
        /*else*/ {
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_bin_0, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 608, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_6 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_pair.first); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 608, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
            }
          }
          if (!__pyx_t_8) {
            __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 608, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_GOTREF(__pyx_t_7);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_3)) {
              PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
              __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 608, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
              PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
              __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 608, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            } else
            #endif
            {
              __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 608, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __pyx_t_8 = NULL;
              __Pyx_GIVEREF(__pyx_t_6);
              PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_6);
              __pyx_t_6 = 0;
              __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 608, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(1, 608, __pyx_L1_error)
          __Pyx_DECREF_SET(__pyx_v_cat_txt, ((PyObject*)__pyx_t_7));
          __pyx_t_7 = 0;
        }
        __pyx_L10:;

        /* "awe_ml/classifier_cython.pyx":609
 *                     else:
 *                         cat_txt="bin #{0}".format(feature_pair.first)
 *                     break             # <<<<<<<<<<<<<<
 *             else: #search numeric features if categorical variable not found
 *                 if self.numeric_bin_list is not None:
 */
        goto __pyx_L6_break;

        /* "awe_ml/classifier_cython.pyx":603
 *         if self.categorical_bin_list is not None: #search categorical variables
 *             for feature_num, bin_dict in self.categorical_bin_list:
 *                 if feature_num==feature_pair.first:             # <<<<<<<<<<<<<<
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 *                     if feature_bin is not None:
 */
      }

      /* "awe_ml/classifier_cython.pyx":602
 *         cat_txt = str(feature_pair.second)
 *         if self.categorical_bin_list is not None: #search categorical variables
 *             for feature_num, bin_dict in self.categorical_bin_list:             # <<<<<<<<<<<<<<
 *                 if feature_num==feature_pair.first:
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 */
    }
    /*else*/ {

      /* "awe_ml/classifier_cython.pyx":611
 *                     break
 *             else: #search numeric features if categorical variable not found
 *                 if self.numeric_bin_list is not None:             # <<<<<<<<<<<<<<
 *                     for feature_num, bin_list in self.numeric_bin_list:
 *                         if feature_num==feature_pair.first:
 */
      __pyx_t_2 = (__pyx_v_self->numeric_bin_list != ((PyObject*)Py_None));
      __pyx_t_1 = (__pyx_t_2 != 0);
      if (__pyx_t_1) {

        /* "awe_ml/classifier_cython.pyx":612
 *             else: #search numeric features if categorical variable not found
 *                 if self.numeric_bin_list is not None:
 *                     for feature_num, bin_list in self.numeric_bin_list:             # <<<<<<<<<<<<<<
 *                         if feature_num==feature_pair.first:
 *                             if feature_pair.second==0:
 */
        if (unlikely(__pyx_v_self->numeric_bin_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(1, 612, __pyx_L1_error)
        }
        __pyx_t_7 = __pyx_v_self->numeric_bin_list; __Pyx_INCREF(__pyx_t_7); __pyx_t_12 = 0;
        for (;;) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_12); __Pyx_INCREF(__pyx_t_3); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(1, 612, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 612, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
          if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
            PyObject* sequence = __pyx_t_3;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(1, 612, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_6);
            #else
            __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 612, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 612, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 612, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
            index = 0; __pyx_t_11 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_11)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_11);
            index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L15_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_6);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(1, 612, __pyx_L1_error)
            __pyx_t_9 = NULL;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            goto __pyx_L16_unpacking_done;
            __pyx_L15_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_9 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(1, 612, __pyx_L1_error)
            __pyx_L16_unpacking_done:;
          }
          __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_t_11); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 612, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(1, 612, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_v_feature_num = __pyx_t_10;
          __PYX_XDEC_MEMVIEW(&__pyx_v_bin_list, 1);
          __pyx_v_bin_list = __pyx_t_13;
          __pyx_t_13.memview = NULL;
          __pyx_t_13.data = NULL;

          /* "awe_ml/classifier_cython.pyx":613
 *                 if self.numeric_bin_list is not None:
 *                     for feature_num, bin_list in self.numeric_bin_list:
 *                         if feature_num==feature_pair.first:             # <<<<<<<<<<<<<<
 *                             if feature_pair.second==0:
 *                                 cat_txt="[{0:.4g} : {1:.4g}]".format(bin_list[0],bin_list[1])
 */
          __pyx_t_1 = ((__pyx_v_feature_num == __pyx_v_feature_pair.first) != 0);
          if (__pyx_t_1) {

            /* "awe_ml/classifier_cython.pyx":614
 *                     for feature_num, bin_list in self.numeric_bin_list:
 *                         if feature_num==feature_pair.first:
 *                             if feature_pair.second==0:             # <<<<<<<<<<<<<<
 *                                 cat_txt="[{0:.4g} : {1:.4g}]".format(bin_list[0],bin_list[1])
 *                             else:
 */
            __pyx_t_1 = ((__pyx_v_feature_pair.second == 0) != 0);
            if (__pyx_t_1) {

              /* "awe_ml/classifier_cython.pyx":615
 *                         if feature_num==feature_pair.first:
 *                             if feature_pair.second==0:
 *                                 cat_txt="[{0:.4g} : {1:.4g}]".format(bin_list[0],bin_list[1])             # <<<<<<<<<<<<<<
 *                             else:
 *                                 cat_txt="({0:.4g} : {1:.4g}]".format(bin_list[feature_pair.second],bin_list[feature_pair.second+1])
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_0_4g_1_4g, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 615, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_14 = 0;
              __pyx_t_11 = PyFloat_FromDouble((*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=0 */ (__pyx_v_bin_list.data + __pyx_t_14 * __pyx_v_bin_list.strides[0]) )))); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 615, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_15 = 1;
              __pyx_t_8 = PyFloat_FromDouble((*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=0 */ (__pyx_v_bin_list.data + __pyx_t_15 * __pyx_v_bin_list.strides[0]) )))); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 615, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_16 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_16)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_16);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_t_11, __pyx_t_8};
                __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 615, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_t_11, __pyx_t_8};
                __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 615, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              } else
              #endif
              {
                __pyx_t_18 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 615, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_18);
                if (__pyx_t_16) {
                  __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_16); __pyx_t_16 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_11);
                PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_17, __pyx_t_11);
                __Pyx_GIVEREF(__pyx_t_8);
                PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_17, __pyx_t_8);
                __pyx_t_11 = 0;
                __pyx_t_8 = 0;
                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 615, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              }
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 615, __pyx_L1_error)
              __Pyx_DECREF_SET(__pyx_v_cat_txt, ((PyObject*)__pyx_t_3));
              __pyx_t_3 = 0;

              /* "awe_ml/classifier_cython.pyx":614
 *                     for feature_num, bin_list in self.numeric_bin_list:
 *                         if feature_num==feature_pair.first:
 *                             if feature_pair.second==0:             # <<<<<<<<<<<<<<
 *                                 cat_txt="[{0:.4g} : {1:.4g}]".format(bin_list[0],bin_list[1])
 *                             else:
 */
              goto __pyx_L18;
            }

            /* "awe_ml/classifier_cython.pyx":617
 *                                 cat_txt="[{0:.4g} : {1:.4g}]".format(bin_list[0],bin_list[1])
 *                             else:
 *                                 cat_txt="({0:.4g} : {1:.4g}]".format(bin_list[feature_pair.second],bin_list[feature_pair.second+1])             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
            /*else*/ {
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_0_4g_1_4g_2, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 617, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_19 = __pyx_v_feature_pair.second;
              __pyx_t_18 = PyFloat_FromDouble((*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=0 */ (__pyx_v_bin_list.data + __pyx_t_19 * __pyx_v_bin_list.strides[0]) )))); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 617, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_18);
              __pyx_t_20 = (__pyx_v_feature_pair.second + 1);
              __pyx_t_8 = PyFloat_FromDouble((*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=0 */ (__pyx_v_bin_list.data + __pyx_t_20 * __pyx_v_bin_list.strides[0]) )))); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 617, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_11 = NULL;
              __pyx_t_17 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_11)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_11);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                  __pyx_t_17 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_18, __pyx_t_8};
                __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 617, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_18, __pyx_t_8};
                __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_17, 2+__pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 617, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              } else
              #endif
              {
                __pyx_t_16 = PyTuple_New(2+__pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_16);
                if (__pyx_t_11) {
                  __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_11); __pyx_t_11 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_18);
                PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_17, __pyx_t_18);
                __Pyx_GIVEREF(__pyx_t_8);
                PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_17, __pyx_t_8);
                __pyx_t_18 = 0;
                __pyx_t_8 = 0;
                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 617, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              }
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 617, __pyx_L1_error)
              __Pyx_DECREF_SET(__pyx_v_cat_txt, ((PyObject*)__pyx_t_3));
              __pyx_t_3 = 0;
            }
            __pyx_L18:;

            /* "awe_ml/classifier_cython.pyx":618
 *                             else:
 *                                 cat_txt="({0:.4g} : {1:.4g}]".format(bin_list[feature_pair.second],bin_list[feature_pair.second+1])
 *                             break             # <<<<<<<<<<<<<<
 * 
 * 
 */
            goto __pyx_L14_break;

            /* "awe_ml/classifier_cython.pyx":613
 *                 if self.numeric_bin_list is not None:
 *                     for feature_num, bin_list in self.numeric_bin_list:
 *                         if feature_num==feature_pair.first:             # <<<<<<<<<<<<<<
 *                             if feature_pair.second==0:
 *                                 cat_txt="[{0:.4g} : {1:.4g}]".format(bin_list[0],bin_list[1])
 */
          }

          /* "awe_ml/classifier_cython.pyx":612
 *             else: #search numeric features if categorical variable not found
 *                 if self.numeric_bin_list is not None:
 *                     for feature_num, bin_list in self.numeric_bin_list:             # <<<<<<<<<<<<<<
 *                         if feature_num==feature_pair.first:
 *                             if feature_pair.second==0:
 */
        }
        __pyx_L14_break:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "awe_ml/classifier_cython.pyx":611
 *                     break
 *             else: #search numeric features if categorical variable not found
 *                 if self.numeric_bin_list is not None:             # <<<<<<<<<<<<<<
 *                     for feature_num, bin_list in self.numeric_bin_list:
 *                         if feature_num==feature_pair.first:
 */
      }
    }

    /* "awe_ml/classifier_cython.pyx":602
 *         cat_txt = str(feature_pair.second)
 *         if self.categorical_bin_list is not None: #search categorical variables
 *             for feature_num, bin_dict in self.categorical_bin_list:             # <<<<<<<<<<<<<<
 *                 if feature_num==feature_pair.first:
 *                     feature_bin = bin_dict.get(feature_pair.second,None)
 */
    __pyx_L6_break:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "awe_ml/classifier_cython.pyx":601
 *         #get name of category
 *         cat_txt = str(feature_pair.second)
 *         if self.categorical_bin_list is not None: #search categorical variables             # <<<<<<<<<<<<<<
 *             for feature_num, bin_dict in self.categorical_bin_list:
 *                 if feature_num==feature_pair.first:
 */
  }

  /* "awe_ml/classifier_cython.pyx":621
 * 
 * 
 *         name_txt=feature_txt+"="+cat_txt             # <<<<<<<<<<<<<<
 * 
 *         cdef string name_txt_cpp
 */
  __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_v_feature_txt, __pyx_kp_u__4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_4, __pyx_v_cat_txt); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_name_txt = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "awe_ml/classifier_cython.pyx":624
 * 
 *         cdef string name_txt_cpp
 *         name_txt_cpp=name_txt.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *         return name_txt_cpp
 */
  __pyx_t_7 = PyUnicode_AsUTF8String(__pyx_v_name_txt); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_21 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_name_txt_cpp = __pyx_t_21;

  /* "awe_ml/classifier_cython.pyx":626
 *         name_txt_cpp=name_txt.encode('UTF-8')
 * 
 *         return name_txt_cpp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_name_txt_cpp;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":578
 * 
 * 
 *     cdef string get_name(self, np_long comb_feat_ind):             # <<<<<<<<<<<<<<
 *         """
 *         returns a C++ string with the text name for feature ind
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __PYX_XDEC_MEMVIEW(&__pyx_t_13, 1);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_WriteUnraisable("awe_ml.classifier_cython.AWE_ML_Cython.get_name", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name_txt);
  __Pyx_XDECREF(__pyx_v_feature_txt);
  __Pyx_XDECREF(__pyx_v_cat_txt);
  __Pyx_XDECREF(__pyx_v_bin_dict);
  __PYX_XDEC_MEMVIEW(&__pyx_v_bin_list, 1);
  __Pyx_XDECREF(__pyx_v_feature_bin);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":630
 * 
 * 
 *     cpdef fit(self, X_in, y_in, list feature_names_txt=None, list categorical_bin_list=None, list numeric_bin_list=None):             # <<<<<<<<<<<<<<
 *         """
 *         Train the classifier on data X with targets y
 */

static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X_in, PyObject *__pyx_v_y_in, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit *__pyx_optional_args) {
  PyObject *__pyx_v_feature_names_txt = ((PyObject*)Py_None);
  PyObject *__pyx_v_categorical_bin_list = ((PyObject*)Py_None);
  PyObject *__pyx_v_numeric_bin_list = ((PyObject*)Py_None);
  __Pyx_memviewslice __pyx_v_X = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_classes_dict = NULL;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_ind;
  __Pyx_memviewslice __pyx_v_feature_col = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_category_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_count;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_feature_pair;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_min_cat;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_categories;
  FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_full_tree_data;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_node_map;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_node_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_label_size;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_level;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_features_combos;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_levels;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_feature_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_node_index;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_node_row;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_parent_vec;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_total_count;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_independence_count_map;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_counts;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_label_vec;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_summed_counts;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_comb_feat_pair;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_feature_pair1;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_feature_pair2;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_node_label_to_index_dict_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind2;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_num1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_num2;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_n_xx_vec_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_n_1x_vec_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_n_x1_vec_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_n_11_vec_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_n_xx;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_n_1x;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_n_x1;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_n_11;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind1all;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind2all;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_a;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_b;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_corr;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_corr_sum;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_corr_count;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_categories1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_categories2;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_category_num1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_category_num2;
  long __pyx_v_full_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_temp;
  std::pair<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_correlation_val;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_7genexpr__pyx_v_ind;
  PyObject *__pyx_8genexpr1__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  struct __pyx_opt_args_6awe_ml_7binning_bin_data __pyx_t_9;
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_18;
  PyObject *(*__pyx_t_19)(PyObject *);
  __Pyx_memviewslice __pyx_t_20 = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::string __pyx_t_21;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_22;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_23;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_24;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_25;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > ::iterator __pyx_t_29;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_t_30;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_31;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_32;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_33;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_34;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_35;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_36;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_37;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_38;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_39;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_40;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_41;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_42;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_43;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_44;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_45;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_46;
  long __pyx_t_47;
  __Pyx_FakeReference<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_48;
  __Pyx_FakeReference<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_49;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_50;
  __Pyx_FakeReference<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_51;
  __Pyx_FakeReference<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_52;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_53;
  __Pyx_FakeReference<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_54;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_55;
  __Pyx_FakeReference<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_56;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_57;
  __Pyx_FakeReference<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_58;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_59;
  long __pyx_t_60;
  double __pyx_t_61;
  double __pyx_t_62;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_float> __pyx_t_63;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_float> __pyx_t_64;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_float> __pyx_t_65;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float> ::iterator __pyx_t_66;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  *__pyx_t_67;
  std::pair<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_t_68;
  __Pyx_RefNannySetupContext("fit", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_feature_names_txt = __pyx_optional_args->feature_names_txt;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_categorical_bin_list = __pyx_optional_args->categorical_bin_list;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_numeric_bin_list = __pyx_optional_args->numeric_bin_list;
        }
      }
    }
  }
  __Pyx_INCREF(__pyx_v_X_in);
  __Pyx_INCREF(__pyx_v_y_in);
  __Pyx_INCREF(__pyx_v_categorical_bin_list);
  __Pyx_INCREF(__pyx_v_numeric_bin_list);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fit); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11fit)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_X_in, __pyx_v_y_in, __pyx_v_feature_names_txt, __pyx_v_categorical_bin_list, __pyx_v_numeric_bin_list};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 630, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[6] = {__pyx_t_4, __pyx_v_X_in, __pyx_v_y_in, __pyx_v_feature_names_txt, __pyx_v_categorical_bin_list, __pyx_v_numeric_bin_list};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 630, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 630, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_X_in);
        __Pyx_GIVEREF(__pyx_v_X_in);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_X_in);
        __Pyx_INCREF(__pyx_v_y_in);
        __Pyx_GIVEREF(__pyx_v_y_in);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_y_in);
        __Pyx_INCREF(__pyx_v_feature_names_txt);
        __Pyx_GIVEREF(__pyx_v_feature_names_txt);
        PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_feature_names_txt);
        __Pyx_INCREF(__pyx_v_categorical_bin_list);
        __Pyx_GIVEREF(__pyx_v_categorical_bin_list);
        PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_v_categorical_bin_list);
        __Pyx_INCREF(__pyx_v_numeric_bin_list);
        __Pyx_GIVEREF(__pyx_v_numeric_bin_list);
        PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_numeric_bin_list);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 630, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":654
 * 
 *         ############# bin input data if needed.
 *         if self.nbins>0:             # <<<<<<<<<<<<<<
 *             X_in, y_in = check_X_y(X_in, y_in, y_numeric=False, force_all_finite=False, dtype=None) # disable checks to allow for missing values as np.nan
 *             X,categorical_bin_list,numeric_bin_list = bin_data(X_in,nbins=self.nbins,max_bins=self.max_bins,categorical_feature_inds=self.categorical_feature_inds,
 */
  __pyx_t_7 = ((__pyx_v_self->nbins > 0) != 0);
  if (__pyx_t_7) {

    /* "awe_ml/classifier_cython.pyx":655
 *         ############# bin input data if needed.
 *         if self.nbins>0:
 *             X_in, y_in = check_X_y(X_in, y_in, y_numeric=False, force_all_finite=False, dtype=None) # disable checks to allow for missing values as np.nan             # <<<<<<<<<<<<<<
 *             X,categorical_bin_list,numeric_bin_list = bin_data(X_in,nbins=self.nbins,max_bins=self.max_bins,categorical_feature_inds=self.categorical_feature_inds,
 *                            binning_method=self.binning_method, retbins=True)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_check_X_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_X_in);
    __Pyx_GIVEREF(__pyx_v_X_in);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_X_in);
    __Pyx_INCREF(__pyx_v_y_in);
    __Pyx_GIVEREF(__pyx_v_y_in);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_y_in);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_y_numeric, Py_False) < 0) __PYX_ERR(1, 655, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_force_all_finite, Py_False) < 0) __PYX_ERR(1, 655, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, Py_None) < 0) __PYX_ERR(1, 655, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
      PyObject* sequence = __pyx_t_6;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 655, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 655, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_8(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_2 = __pyx_t_8(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_1), 2) < 0) __PYX_ERR(1, 655, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 655, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __Pyx_DECREF_SET(__pyx_v_X_in, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_y_in, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "awe_ml/classifier_cython.pyx":656
 *         if self.nbins>0:
 *             X_in, y_in = check_X_y(X_in, y_in, y_numeric=False, force_all_finite=False, dtype=None) # disable checks to allow for missing values as np.nan
 *             X,categorical_bin_list,numeric_bin_list = bin_data(X_in,nbins=self.nbins,max_bins=self.max_bins,categorical_feature_inds=self.categorical_feature_inds,             # <<<<<<<<<<<<<<
 *                            binning_method=self.binning_method, retbins=True)
 *             # X = df.values.astype(np.int32)
 */
    __pyx_t_6 = __pyx_v_self->categorical_feature_inds;
    __Pyx_INCREF(__pyx_t_6);

    /* "awe_ml/classifier_cython.pyx":657
 *             X_in, y_in = check_X_y(X_in, y_in, y_numeric=False, force_all_finite=False, dtype=None) # disable checks to allow for missing values as np.nan
 *             X,categorical_bin_list,numeric_bin_list = bin_data(X_in,nbins=self.nbins,max_bins=self.max_bins,categorical_feature_inds=self.categorical_feature_inds,
 *                            binning_method=self.binning_method, retbins=True)             # <<<<<<<<<<<<<<
 *             # X = df.values.astype(np.int32)
 * 
 */
    __pyx_t_2 = __pyx_v_self->binning_method;
    __Pyx_INCREF(__pyx_t_2);

    /* "awe_ml/classifier_cython.pyx":656
 *         if self.nbins>0:
 *             X_in, y_in = check_X_y(X_in, y_in, y_numeric=False, force_all_finite=False, dtype=None) # disable checks to allow for missing values as np.nan
 *             X,categorical_bin_list,numeric_bin_list = bin_data(X_in,nbins=self.nbins,max_bins=self.max_bins,categorical_feature_inds=self.categorical_feature_inds,             # <<<<<<<<<<<<<<
 *                            binning_method=self.binning_method, retbins=True)
 *             # X = df.values.astype(np.int32)
 */
    __pyx_t_9.__pyx_n = 5;
    __pyx_t_9.nbins = __pyx_v_self->nbins;
    __pyx_t_9.max_bins = __pyx_v_self->max_bins;
    __pyx_t_9.categorical_feature_inds = __pyx_t_6;
    __pyx_t_9.binning_method = ((PyObject*)__pyx_t_2);
    __pyx_t_9.retbins = 1;
    __pyx_t_3 = __pyx_f_6awe_ml_7binning_bin_data(__pyx_v_X_in, 0, &__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 656, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 656, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_4)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 2; __pyx_t_1 = __pyx_t_8(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_4), 3) < 0) __PYX_ERR(1, 656, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 656, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(1, 656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(1, 656, __pyx_L1_error)
    if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 656, __pyx_L1_error)
    __pyx_v_X = __pyx_t_10;
    __pyx_t_10.memview = NULL;
    __pyx_t_10.data = NULL;
    __Pyx_DECREF_SET(__pyx_v_categorical_bin_list, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_numeric_bin_list, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":654
 * 
 *         ############# bin input data if needed.
 *         if self.nbins>0:             # <<<<<<<<<<<<<<
 *             X_in, y_in = check_X_y(X_in, y_in, y_numeric=False, force_all_finite=False, dtype=None) # disable checks to allow for missing values as np.nan
 *             X,categorical_bin_list,numeric_bin_list = bin_data(X_in,nbins=self.nbins,max_bins=self.max_bins,categorical_feature_inds=self.categorical_feature_inds,
 */
    goto __pyx_L3;
  }

  /* "awe_ml/classifier_cython.pyx":665
 * 
 *         else:
 *             X, y_in = check_X_y(X_in, y_in, dtype=np.int32, y_numeric=False) # use all checks if data is already binned             # <<<<<<<<<<<<<<
 *             # X = X_in.astype(np.int32)
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_check_X_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_X_in);
    __Pyx_GIVEREF(__pyx_v_X_in);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_X_in);
    __Pyx_INCREF(__pyx_v_y_in);
    __Pyx_GIVEREF(__pyx_v_y_in);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_y_in);
    __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_y_numeric, Py_False) < 0) __PYX_ERR(1, 665, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 665, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 665, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext;
      index = 0; __pyx_t_6 = __pyx_t_8(__pyx_t_3); if (unlikely(!__pyx_t_6)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_1 = __pyx_t_8(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_3), 2) < 0) __PYX_ERR(1, 665, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(1, 665, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(1, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_X = __pyx_t_10;
    __pyx_t_10.memview = NULL;
    __pyx_t_10.data = NULL;
    __Pyx_DECREF_SET(__pyx_v_y_in, __pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "awe_ml/classifier_cython.pyx":670
 * 
 *         ## Save  feature names needed for explainability
 *         if feature_names_txt is not None:             # <<<<<<<<<<<<<<
 *             self.feature_names_txt=feature_names_txt
 *         if (self.feature_names_txt is not None) and len(self.feature_names_txt) != X.shape[1]:
 */
  __pyx_t_7 = (__pyx_v_feature_names_txt != ((PyObject*)Py_None));
  __pyx_t_11 = (__pyx_t_7 != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":671
 *         ## Save  feature names needed for explainability
 *         if feature_names_txt is not None:
 *             self.feature_names_txt=feature_names_txt             # <<<<<<<<<<<<<<
 *         if (self.feature_names_txt is not None) and len(self.feature_names_txt) != X.shape[1]:
 *                 warn("feature feature name dimension, {}, does not agree with array shape {}".format(len(self.feature_names_txt),X.shape[1]))
 */
    __Pyx_INCREF(__pyx_v_feature_names_txt);
    __Pyx_GIVEREF(__pyx_v_feature_names_txt);
    __Pyx_GOTREF(__pyx_v_self->feature_names_txt);
    __Pyx_DECREF(__pyx_v_self->feature_names_txt);
    __pyx_v_self->feature_names_txt = __pyx_v_feature_names_txt;

    /* "awe_ml/classifier_cython.pyx":670
 * 
 *         ## Save  feature names needed for explainability
 *         if feature_names_txt is not None:             # <<<<<<<<<<<<<<
 *             self.feature_names_txt=feature_names_txt
 *         if (self.feature_names_txt is not None) and len(self.feature_names_txt) != X.shape[1]:
 */
  }

  /* "awe_ml/classifier_cython.pyx":672
 *         if feature_names_txt is not None:
 *             self.feature_names_txt=feature_names_txt
 *         if (self.feature_names_txt is not None) and len(self.feature_names_txt) != X.shape[1]:             # <<<<<<<<<<<<<<
 *                 warn("feature feature name dimension, {}, does not agree with array shape {}".format(len(self.feature_names_txt),X.shape[1]))
 *                 self.feature_names_txt=None
 */
  __pyx_t_7 = (__pyx_v_self->feature_names_txt != ((PyObject*)Py_None));
  __pyx_t_12 = (__pyx_t_7 != 0);
  if (__pyx_t_12) {
  } else {
    __pyx_t_11 = __pyx_t_12;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_4 = __pyx_v_self->feature_names_txt;
  __Pyx_INCREF(__pyx_t_4);
  if (unlikely(__pyx_t_4 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 672, __pyx_L1_error)
  }
  __pyx_t_13 = PyList_GET_SIZE(__pyx_t_4); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = ((__pyx_t_13 != (__pyx_v_X.shape[1])) != 0);
  __pyx_t_11 = __pyx_t_12;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":673
 *             self.feature_names_txt=feature_names_txt
 *         if (self.feature_names_txt is not None) and len(self.feature_names_txt) != X.shape[1]:
 *                 warn("feature feature name dimension, {}, does not agree with array shape {}".format(len(self.feature_names_txt),X.shape[1]))             # <<<<<<<<<<<<<<
 *                 self.feature_names_txt=None
 *         if categorical_bin_list is not None:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_warn); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_feature_feature_name_dimension_d, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_v_self->feature_names_txt;
    __Pyx_INCREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 673, __pyx_L1_error)
    }
    __pyx_t_13 = PyList_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(1, 673, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_14 = PyInt_FromSsize_t((__pyx_v_X.shape[1])); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_2, __pyx_t_14};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 673, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_2, __pyx_t_14};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 673, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_15) {
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_5, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_5, __pyx_t_14);
      __pyx_t_2 = 0;
      __pyx_t_14 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_16, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 673, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 673, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 673, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 673, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 673, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_16, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 673, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "awe_ml/classifier_cython.pyx":674
 *         if (self.feature_names_txt is not None) and len(self.feature_names_txt) != X.shape[1]:
 *                 warn("feature feature name dimension, {}, does not agree with array shape {}".format(len(self.feature_names_txt),X.shape[1]))
 *                 self.feature_names_txt=None             # <<<<<<<<<<<<<<
 *         if categorical_bin_list is not None:
 *             self.categorical_bin_list=categorical_bin_list
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->feature_names_txt);
    __Pyx_DECREF(__pyx_v_self->feature_names_txt);
    __pyx_v_self->feature_names_txt = ((PyObject*)Py_None);

    /* "awe_ml/classifier_cython.pyx":672
 *         if feature_names_txt is not None:
 *             self.feature_names_txt=feature_names_txt
 *         if (self.feature_names_txt is not None) and len(self.feature_names_txt) != X.shape[1]:             # <<<<<<<<<<<<<<
 *                 warn("feature feature name dimension, {}, does not agree with array shape {}".format(len(self.feature_names_txt),X.shape[1]))
 *                 self.feature_names_txt=None
 */
  }

  /* "awe_ml/classifier_cython.pyx":675
 *                 warn("feature feature name dimension, {}, does not agree with array shape {}".format(len(self.feature_names_txt),X.shape[1]))
 *                 self.feature_names_txt=None
 *         if categorical_bin_list is not None:             # <<<<<<<<<<<<<<
 *             self.categorical_bin_list=categorical_bin_list
 *         if numeric_bin_list is not None:
 */
  __pyx_t_11 = (__pyx_v_categorical_bin_list != ((PyObject*)Py_None));
  __pyx_t_12 = (__pyx_t_11 != 0);
  if (__pyx_t_12) {

    /* "awe_ml/classifier_cython.pyx":676
 *                 self.feature_names_txt=None
 *         if categorical_bin_list is not None:
 *             self.categorical_bin_list=categorical_bin_list             # <<<<<<<<<<<<<<
 *         if numeric_bin_list is not None:
 *             self.numeric_bin_list=numeric_bin_list
 */
    __Pyx_INCREF(__pyx_v_categorical_bin_list);
    __Pyx_GIVEREF(__pyx_v_categorical_bin_list);
    __Pyx_GOTREF(__pyx_v_self->categorical_bin_list);
    __Pyx_DECREF(__pyx_v_self->categorical_bin_list);
    __pyx_v_self->categorical_bin_list = __pyx_v_categorical_bin_list;

    /* "awe_ml/classifier_cython.pyx":675
 *                 warn("feature feature name dimension, {}, does not agree with array shape {}".format(len(self.feature_names_txt),X.shape[1]))
 *                 self.feature_names_txt=None
 *         if categorical_bin_list is not None:             # <<<<<<<<<<<<<<
 *             self.categorical_bin_list=categorical_bin_list
 *         if numeric_bin_list is not None:
 */
  }

  /* "awe_ml/classifier_cython.pyx":677
 *         if categorical_bin_list is not None:
 *             self.categorical_bin_list=categorical_bin_list
 *         if numeric_bin_list is not None:             # <<<<<<<<<<<<<<
 *             self.numeric_bin_list=numeric_bin_list
 * 
 */
  __pyx_t_12 = (__pyx_v_numeric_bin_list != ((PyObject*)Py_None));
  __pyx_t_11 = (__pyx_t_12 != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":678
 *             self.categorical_bin_list=categorical_bin_list
 *         if numeric_bin_list is not None:
 *             self.numeric_bin_list=numeric_bin_list             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(__pyx_v_numeric_bin_list);
    __Pyx_GIVEREF(__pyx_v_numeric_bin_list);
    __Pyx_GOTREF(__pyx_v_self->numeric_bin_list);
    __Pyx_DECREF(__pyx_v_self->numeric_bin_list);
    __pyx_v_self->numeric_bin_list = __pyx_v_numeric_bin_list;

    /* "awe_ml/classifier_cython.pyx":677
 *         if categorical_bin_list is not None:
 *             self.categorical_bin_list=categorical_bin_list
 *         if numeric_bin_list is not None:             # <<<<<<<<<<<<<<
 *             self.numeric_bin_list=numeric_bin_list
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":684
 * 
 *         #encode y into an integer array from 0 to N:
 *         self.classes_ = unique_labels(y_in)             # <<<<<<<<<<<<<<
 * 
 *         # create dict to look up class number based on class text
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_unique_labels); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_y_in); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_v_y_in};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_v_y_in};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_16); __pyx_t_16 = NULL;
      __Pyx_INCREF(__pyx_v_y_in);
      __Pyx_GIVEREF(__pyx_v_y_in);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_y_in);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->classes_);
  __Pyx_DECREF(__pyx_v_self->classes_);
  __pyx_v_self->classes_ = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "awe_ml/classifier_cython.pyx":687
 * 
 *         # create dict to look up class number based on class text
 *         classes_dict = {self.classes_[ind]:ind for ind in range(len(self.classes_))}             # <<<<<<<<<<<<<<
 *         # using dict encode y into integers
 *         y = np.array( [classes_dict[val] for val in y_in], dtype=np.int32) #store numpy array to memview
 */
  { /* enter inner scope */
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_v_self->classes_;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_13 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(1, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_17 = __pyx_t_13;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_7genexpr__pyx_v_ind = __pyx_t_18;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->classes_, __pyx_7genexpr__pyx_v_ind, __pyx_t_6awe_ml_17classifier_cython_np_long, 1, __Pyx_PyInt_From_npy_int32, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 687, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyInt_From_npy_int32(__pyx_7genexpr__pyx_v_ind); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 687, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(PyDict_SetItem(__pyx_t_4, (PyObject*)__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 687, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_v_classes_dict = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "awe_ml/classifier_cython.pyx":689
 *         classes_dict = {self.classes_[ind]:ind for ind in range(len(self.classes_))}
 *         # using dict encode y into integers
 *         y = np.array( [classes_dict[val] for val in y_in], dtype=np.int32) #store numpy array to memview             # <<<<<<<<<<<<<<
 * 
 *         # print(y)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 689, __pyx_L20_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_y_in)) || PyTuple_CheckExact(__pyx_v_y_in)) {
      __pyx_t_1 = __pyx_v_y_in; __Pyx_INCREF(__pyx_t_1); __pyx_t_13 = 0;
      __pyx_t_19 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_y_in); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 689, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_19 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 689, __pyx_L20_error)
    }
    for (;;) {
      if (likely(!__pyx_t_19)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_16 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_16); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(1, 689, __pyx_L20_error)
          #else
          __pyx_t_16 = PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 689, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_13); __Pyx_INCREF(__pyx_t_16); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(1, 689, __pyx_L20_error)
          #else
          __pyx_t_16 = PySequence_ITEM(__pyx_t_1, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 689, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          #endif
        }
      } else {
        __pyx_t_16 = __pyx_t_19(__pyx_t_1);
        if (unlikely(!__pyx_t_16)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 689, __pyx_L20_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_16);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_val, __pyx_t_16);
      __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyDict_GetItem(__pyx_v_classes_dict, __pyx_8genexpr1__pyx_v_val); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 689, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_16))) __PYX_ERR(1, 689, __pyx_L20_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
    goto __pyx_L23_exit_scope;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val); __pyx_8genexpr1__pyx_v_val = 0;
    goto __pyx_L1_error;
    __pyx_L23_exit_scope:;
  } /* exit inner scope */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_int32); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_20 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_20.memview)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y = __pyx_t_20;
  __pyx_t_20.memview = NULL;
  __pyx_t_20.data = NULL;

  /* "awe_ml/classifier_cython.pyx":692
 * 
 *         # print(y)
 *         self.X = X             # <<<<<<<<<<<<<<
 *         self.y = y
 * 
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->X, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_X, 0);
  __pyx_v_self->X = __pyx_v_X;

  /* "awe_ml/classifier_cython.pyx":693
 *         # print(y)
 *         self.X = X
 *         self.y = y             # <<<<<<<<<<<<<<
 * 
 *         ###############
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->y, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_y, 0);
  __pyx_v_self->y = __pyx_v_y;

  /* "awe_ml/classifier_cython.pyx":696
 * 
 *         ###############
 *         self.independence_model_c = self.independence_model.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->independence_model == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(1, 696, __pyx_L1_error)
  }
  __pyx_t_3 = PyUnicode_AsUTF8String(__pyx_v_self->independence_model); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_21 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->independence_model_c = __pyx_t_21;

  /* "awe_ml/classifier_cython.pyx":699
 * 
 * 
 *         if self.independence_model_c !=b"none" and self.max_fully_connected_depth<2:             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only use independence models when max_fully_connected_depth>=2")
 * 
 */
  __pyx_t_12 = ((__pyx_v_self->independence_model_c != ((char const *)"none")) != 0);
  if (__pyx_t_12) {
  } else {
    __pyx_t_11 = __pyx_t_12;
    goto __pyx_L25_bool_binop_done;
  }
  __pyx_t_12 = ((__pyx_v_self->max_fully_connected_depth < 2) != 0);
  __pyx_t_11 = __pyx_t_12;
  __pyx_L25_bool_binop_done:;
  if (unlikely(__pyx_t_11)) {

    /* "awe_ml/classifier_cython.pyx":700
 * 
 *         if self.independence_model_c !=b"none" and self.max_fully_connected_depth<2:
 *             raise ValueError("Can only use independence models when max_fully_connected_depth>=2")             # <<<<<<<<<<<<<<
 * 
 *         self.noise_scale = self.n_max_classify**self.noise_exponent
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 700, __pyx_L1_error)

    /* "awe_ml/classifier_cython.pyx":699
 * 
 * 
 *         if self.independence_model_c !=b"none" and self.max_fully_connected_depth<2:             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only use independence models when max_fully_connected_depth>=2")
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":702
 *             raise ValueError("Can only use independence models when max_fully_connected_depth>=2")
 * 
 *         self.noise_scale = self.n_max_classify**self.noise_exponent             # <<<<<<<<<<<<<<
 * 
 *         cdef np_long feature_num
 */
  __pyx_v_self->noise_scale = pow(((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_self->n_max_classify), __pyx_v_self->noise_exponent);

  /* "awe_ml/classifier_cython.pyx":710
 * 
 *         # Store the classes seen during fit
 *         self.n_classes = np.amax(y)+1             # <<<<<<<<<<<<<<
 * 
 *         # TODO: add checks that parameter are valid
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_amax); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_y, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 710, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 710, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_18 = __Pyx_PyInt_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_18 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 710, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->n_classes = __pyx_t_18;

  /* "awe_ml/classifier_cython.pyx":714
 *         # TODO: add checks that parameter are valid
 * 
 *         self.n_features = X.shape[1]             # <<<<<<<<<<<<<<
 * 
 *         # create a list of integers to count the number of features per category
 */
  __pyx_v_self->n_features = (__pyx_v_X.shape[1]);

  /* "awe_ml/classifier_cython.pyx":717
 * 
 *         # create a list of integers to count the number of features per category
 *         self.n_feature_categories_.resize(self.n_features,0)             # <<<<<<<<<<<<<<
 * 
 *         # count all categorical features:
 */
  try {
    __pyx_v_self->n_feature_categories_.resize(__pyx_v_self->n_features, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 717, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":721
 *         # count all categorical features:
 *         cdef np_long[:] feature_col
 *         for feature_num in range(self.n_features):             # <<<<<<<<<<<<<<
 *             feature_col = X[:,feature_num] # should be a view into X
 *             self.n_feature_categories_[feature_num]=np.max(feature_col)+1
 */
  __pyx_t_18 = __pyx_v_self->n_features;
  __pyx_t_22 = __pyx_t_18;
  for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
    __pyx_v_feature_num = __pyx_t_23;

    /* "awe_ml/classifier_cython.pyx":722
 *         cdef np_long[:] feature_col
 *         for feature_num in range(self.n_features):
 *             feature_col = X[:,feature_num] # should be a view into X             # <<<<<<<<<<<<<<
 *             self.n_feature_categories_[feature_num]=np.max(feature_col)+1
 * 
 */
    __pyx_t_20.data = __pyx_v_X.data;
    __pyx_t_20.memview = __pyx_v_X.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_20, 0);
    __pyx_t_20.shape[0] = __pyx_v_X.shape[0];
__pyx_t_20.strides[0] = __pyx_v_X.strides[0];
    __pyx_t_20.suboffsets[0] = -1;

{
    Py_ssize_t __pyx_tmp_idx = __pyx_v_feature_num;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_X.shape[1];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_X.strides[1];
    if (0 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (0 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 1)");
        __PYX_ERR(1, 722, __pyx_L1_error)
    }
        __pyx_t_20.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__PYX_XDEC_MEMVIEW(&__pyx_v_feature_col, 1);
    __pyx_v_feature_col = __pyx_t_20;
    __pyx_t_20.memview = NULL;
    __pyx_t_20.data = NULL;

    /* "awe_ml/classifier_cython.pyx":723
 *         for feature_num in range(self.n_features):
 *             feature_col = X[:,feature_num] # should be a view into X
 *             self.n_feature_categories_[feature_num]=np.max(feature_col)+1             # <<<<<<<<<<<<<<
 * 
 *         ######### encode feature number + value into integers and create lookup dicts:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_max); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_feature_col, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 723, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_16)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_16, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_24 = __Pyx_PyInt_As_npy_int32(__pyx_t_16); if (unlikely((__pyx_t_24 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    (__pyx_v_self->n_feature_categories_[__pyx_v_feature_num]) = __pyx_t_24;
  }

  /* "awe_ml/classifier_cython.pyx":729
 *         cdef pair[np_long,np_long] feature_pair
 * 
 *         count= 0             # <<<<<<<<<<<<<<
 *         #initialize lookup dicts
 *         self.feature_pair_to_comb_feat_ind.clear() # feature_pair = tuple of (feature num, category num)
 */
  __pyx_v_count = 0;

  /* "awe_ml/classifier_cython.pyx":731
 *         count= 0
 *         #initialize lookup dicts
 *         self.feature_pair_to_comb_feat_ind.clear() # feature_pair = tuple of (feature num, category num)             # <<<<<<<<<<<<<<
 *         self.comb_feat_ind_to_feature_pair.clear() # for debugging
 * 
 */
  __pyx_v_self->feature_pair_to_comb_feat_ind.clear();

  /* "awe_ml/classifier_cython.pyx":732
 *         #initialize lookup dicts
 *         self.feature_pair_to_comb_feat_ind.clear() # feature_pair = tuple of (feature num, category num)
 *         self.comb_feat_ind_to_feature_pair.clear() # for debugging             # <<<<<<<<<<<<<<
 * 
 *         #iterate over features
 */
  __pyx_v_self->comb_feat_ind_to_feature_pair.clear();

  /* "awe_ml/classifier_cython.pyx":737
 *         cdef np_long min_cat, n_categories
 *         #include category =-1 when calculating independence to represent all categories
 *         if self.independence_model_c==b"none":             # <<<<<<<<<<<<<<
 *             min_cat=0
 *         else:
 */
  __pyx_t_11 = ((__pyx_v_self->independence_model_c == ((char const *)"none")) != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":738
 *         #include category =-1 when calculating independence to represent all categories
 *         if self.independence_model_c==b"none":
 *             min_cat=0             # <<<<<<<<<<<<<<
 *         else:
 *             min_cat=-1
 */
    __pyx_v_min_cat = 0;

    /* "awe_ml/classifier_cython.pyx":737
 *         cdef np_long min_cat, n_categories
 *         #include category =-1 when calculating independence to represent all categories
 *         if self.independence_model_c==b"none":             # <<<<<<<<<<<<<<
 *             min_cat=0
 *         else:
 */
    goto __pyx_L29;
  }

  /* "awe_ml/classifier_cython.pyx":740
 *             min_cat=0
 *         else:
 *             min_cat=-1             # <<<<<<<<<<<<<<
 * 
 *         for feature_num in range(self.n_features):
 */
  /*else*/ {
    __pyx_v_min_cat = -1;
  }
  __pyx_L29:;

  /* "awe_ml/classifier_cython.pyx":742
 *             min_cat=-1
 * 
 *         for feature_num in range(self.n_features):             # <<<<<<<<<<<<<<
 *             n_categories=self.n_feature_categories_[feature_num]
 *             for category_num in range(min_cat,n_categories):
 */
  __pyx_t_18 = __pyx_v_self->n_features;
  __pyx_t_22 = __pyx_t_18;
  for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
    __pyx_v_feature_num = __pyx_t_23;

    /* "awe_ml/classifier_cython.pyx":743
 * 
 *         for feature_num in range(self.n_features):
 *             n_categories=self.n_feature_categories_[feature_num]             # <<<<<<<<<<<<<<
 *             for category_num in range(min_cat,n_categories):
 *                 count+=1
 */
    __pyx_v_n_categories = (__pyx_v_self->n_feature_categories_[__pyx_v_feature_num]);

    /* "awe_ml/classifier_cython.pyx":744
 *         for feature_num in range(self.n_features):
 *             n_categories=self.n_feature_categories_[feature_num]
 *             for category_num in range(min_cat,n_categories):             # <<<<<<<<<<<<<<
 *                 count+=1
 *                 feature_pair.first = feature_num
 */
    __pyx_t_24 = __pyx_v_n_categories;
    __pyx_t_25 = __pyx_t_24;
    for (__pyx_t_26 = __pyx_v_min_cat; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
      __pyx_v_category_num = __pyx_t_26;

      /* "awe_ml/classifier_cython.pyx":745
 *             n_categories=self.n_feature_categories_[feature_num]
 *             for category_num in range(min_cat,n_categories):
 *                 count+=1             # <<<<<<<<<<<<<<
 *                 feature_pair.first = feature_num
 *                 feature_pair.second = category_num
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "awe_ml/classifier_cython.pyx":746
 *             for category_num in range(min_cat,n_categories):
 *                 count+=1
 *                 feature_pair.first = feature_num             # <<<<<<<<<<<<<<
 *                 feature_pair.second = category_num
 *                 self.comb_feat_ind_to_feature_pair[count]= feature_pair
 */
      __pyx_v_feature_pair.first = __pyx_v_feature_num;

      /* "awe_ml/classifier_cython.pyx":747
 *                 count+=1
 *                 feature_pair.first = feature_num
 *                 feature_pair.second = category_num             # <<<<<<<<<<<<<<
 *                 self.comb_feat_ind_to_feature_pair[count]= feature_pair
 *                 self.feature_pair_to_comb_feat_ind[feature_pair] = count
 */
      __pyx_v_feature_pair.second = __pyx_v_category_num;

      /* "awe_ml/classifier_cython.pyx":748
 *                 feature_pair.first = feature_num
 *                 feature_pair.second = category_num
 *                 self.comb_feat_ind_to_feature_pair[count]= feature_pair             # <<<<<<<<<<<<<<
 *                 self.feature_pair_to_comb_feat_ind[feature_pair] = count
 * 
 */
      (__pyx_v_self->comb_feat_ind_to_feature_pair[__pyx_v_count]) = __pyx_v_feature_pair;

      /* "awe_ml/classifier_cython.pyx":749
 *                 feature_pair.second = category_num
 *                 self.comb_feat_ind_to_feature_pair[count]= feature_pair
 *                 self.feature_pair_to_comb_feat_ind[feature_pair] = count             # <<<<<<<<<<<<<<
 * 
 * 
 */
      (__pyx_v_self->feature_pair_to_comb_feat_ind[__pyx_v_feature_pair]) = __pyx_v_count;
    }
  }

  /* "awe_ml/classifier_cython.pyx":754
 *         ###############
 *         #create a empty list of dicts to store all the nodes by level (stores Node objects)
 *         self.nodes.resize(self.max_depth+1)             # <<<<<<<<<<<<<<
 *             #1st level: tree level 2nd level: map of node label to pair (node info, children feature num)
 * 
 */
  try {
    __pyx_v_self->nodes.resize((__pyx_v_self->max_depth + 1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 754, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":758
 * 
 *         #create indicies for accessing node data
 *         self.node_info.resize(self.max_depth+1)             # <<<<<<<<<<<<<<
 *         for ind in range(self.max_depth+1):
 *             initialize_node(self.node_info[ind],self.n_classes,ind)
 */
  try {
    __pyx_v_self->node_info.resize((__pyx_v_self->max_depth + 1));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 758, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":759
 *         #create indicies for accessing node data
 *         self.node_info.resize(self.max_depth+1)
 *         for ind in range(self.max_depth+1):             # <<<<<<<<<<<<<<
 *             initialize_node(self.node_info[ind],self.n_classes,ind)
 * 
 */
  __pyx_t_27 = (__pyx_v_self->max_depth + 1);
  __pyx_t_28 = __pyx_t_27;
  for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_28; __pyx_t_18+=1) {
    __pyx_v_ind = __pyx_t_18;

    /* "awe_ml/classifier_cython.pyx":760
 *         self.node_info.resize(self.max_depth+1)
 *         for ind in range(self.max_depth+1):
 *             initialize_node(self.node_info[ind],self.n_classes,ind)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_f_6awe_ml_17classifier_cython_initialize_node((__pyx_v_self->node_info[__pyx_v_ind]), __pyx_v_self->n_classes, __pyx_v_ind);
  }

  /* "awe_ml/classifier_cython.pyx":764
 * 
 *         ############################### create the classifier tree
 *         self.create_classifier_tree()             # <<<<<<<<<<<<<<
 *         # fills in self.nodes object with nodes at each level of the tree
 * 
 */
  __pyx_t_16 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->create_classifier_tree(__pyx_v_self); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "awe_ml/classifier_cython.pyx":788
 *         cdef map[vector[np_long],pair[vector[np_long],vector[np_long]]] node_map
 *         # map of node label to pair (node info, children feature num)
 *         cdef np_long node_num=-1             # <<<<<<<<<<<<<<
 *         cdef np_long class_ind, label_size, feature, feature_ctr
 *         cdef np_long level, n_features_combos, n_levels, parent_num, parent_feature_ctr, node_index
 */
  __pyx_v_node_num = -1;

  /* "awe_ml/classifier_cython.pyx":798
 * 
 *         #### iterate through each level of tree and store values
 *         n_levels = self.nodes.size()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_n_levels = __pyx_v_self->nodes.size();

  /* "awe_ml/classifier_cython.pyx":802
 * 
 *         #intialize vector objects
 *         self.node_label_to_index_dict_list.resize(n_levels)             # <<<<<<<<<<<<<<
 *         self.children_list.resize(n_levels) #intialize children vec size
 *         self.full_tree_vector.resize(n_levels)
 */
  try {
    __pyx_v_self->node_label_to_index_dict_list.resize(__pyx_v_n_levels);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 802, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":803
 *         #intialize vector objects
 *         self.node_label_to_index_dict_list.resize(n_levels)
 *         self.children_list.resize(n_levels) #intialize children vec size             # <<<<<<<<<<<<<<
 *         self.full_tree_vector.resize(n_levels)
 * 
 */
  try {
    __pyx_v_self->children_list.resize(__pyx_v_n_levels);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 803, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":804
 *         self.node_label_to_index_dict_list.resize(n_levels)
 *         self.children_list.resize(n_levels) #intialize children vec size
 *         self.full_tree_vector.resize(n_levels)             # <<<<<<<<<<<<<<
 * 
 *         for level in range(n_levels):
 */
  try {
    __pyx_v_self->full_tree_vector.resize(__pyx_v_n_levels);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 804, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":806
 *         self.full_tree_vector.resize(n_levels)
 * 
 *         for level in range(n_levels):             # <<<<<<<<<<<<<<
 *             node_map = self.nodes[level]
 *             n_features_combos = node_map.size()
 */
  __pyx_t_18 = __pyx_v_n_levels;
  __pyx_t_22 = __pyx_t_18;
  for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
    __pyx_v_level = __pyx_t_23;

    /* "awe_ml/classifier_cython.pyx":807
 * 
 *         for level in range(n_levels):
 *             node_map = self.nodes[level]             # <<<<<<<<<<<<<<
 *             n_features_combos = node_map.size()
 * 
 */
    __pyx_v_node_map = (__pyx_v_self->nodes[__pyx_v_level]);

    /* "awe_ml/classifier_cython.pyx":808
 *         for level in range(n_levels):
 *             node_map = self.nodes[level]
 *             n_features_combos = node_map.size()             # <<<<<<<<<<<<<<
 * 
 *             ### intitialize single level arrays that will be stored
 */
    __pyx_v_n_features_combos = __pyx_v_node_map.size();

    /* "awe_ml/classifier_cython.pyx":811
 * 
 *             ### intitialize single level arrays that will be stored
 *             full_tree_data = & self.full_tree_vector[level]             # <<<<<<<<<<<<<<
 *             full_tree_data[0].initialize(n_features_combos, self.n_classes, level)
 *             # print("level= ",level," n_features_combos= ",n_features_combos)
 */
    __pyx_v_full_tree_data = (&(__pyx_v_self->full_tree_vector[__pyx_v_level]));

    /* "awe_ml/classifier_cython.pyx":812
 *             ### intitialize single level arrays that will be stored
 *             full_tree_data = & self.full_tree_vector[level]
 *             full_tree_data[0].initialize(n_features_combos, self.n_classes, level)             # <<<<<<<<<<<<<<
 *             # print("level= ",level," n_features_combos= ",n_features_combos)
 * 
 */
    (__pyx_v_full_tree_data[0]).initialize(__pyx_v_n_features_combos, __pyx_v_self->n_classes, __pyx_v_level);

    /* "awe_ml/classifier_cython.pyx":815
 *             # print("level= ",level," n_features_combos= ",n_features_combos)
 * 
 *             self.node_label_to_index_dict_list[level].clear()             # <<<<<<<<<<<<<<
 *             self.children_list[level].resize(n_features_combos)
 * 
 */
    (__pyx_v_self->node_label_to_index_dict_list[__pyx_v_level]).clear();

    /* "awe_ml/classifier_cython.pyx":816
 * 
 *             self.node_label_to_index_dict_list[level].clear()
 *             self.children_list[level].resize(n_features_combos)             # <<<<<<<<<<<<<<
 * 
 *             ### iterate over each node in the list
 */
    try {
      (__pyx_v_self->children_list[__pyx_v_level]).resize(__pyx_v_n_features_combos);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 816, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":819
 * 
 *             ### iterate over each node in the list
 *             node_num=-1             # <<<<<<<<<<<<<<
 *             # print("fit, level= ",level," node_map size= ",node_map.size())
 *             for node_row in node_map:
 */
    __pyx_v_node_num = -1;

    /* "awe_ml/classifier_cython.pyx":821
 *             node_num=-1
 *             # print("fit, level= ",level," node_map size= ",node_map.size())
 *             for node_row in node_map:             # <<<<<<<<<<<<<<
 *                 # print("node row= ",node_row)
 *                 node_num+=1
 */
    __pyx_t_29 = __pyx_v_node_map.begin();
    for (;;) {
      if (!(__pyx_t_29 != __pyx_v_node_map.end())) break;
      __pyx_t_30 = *__pyx_t_29;
      ++__pyx_t_29;
      __pyx_v_node_row = __pyx_t_30;

      /* "awe_ml/classifier_cython.pyx":823
 *             for node_row in node_map:
 *                 # print("node row= ",node_row)
 *                 node_num+=1             # <<<<<<<<<<<<<<
 *                 #set node in full tree
 *                 full_tree_data[0].set_node(node_num)
 */
      __pyx_v_node_num = (__pyx_v_node_num + 1);

      /* "awe_ml/classifier_cython.pyx":825
 *                 node_num+=1
 *                 #set node in full tree
 *                 full_tree_data[0].set_node(node_num)             # <<<<<<<<<<<<<<
 * 
 *                 #store children
 */
      (__pyx_v_full_tree_data[0]).set_node(__pyx_v_node_num);

      /* "awe_ml/classifier_cython.pyx":828
 * 
 *                 #store children
 *                 self.children_list[level][node_num]=node_row.second.second             # <<<<<<<<<<<<<<
 *                 sort(self.children_list[level][node_num].begin(),self.children_list[level][node_num].end()) #sort children
 * 
 */
      __pyx_t_31 = __pyx_v_node_row.second.second;
      ((__pyx_v_self->children_list[__pyx_v_level])[__pyx_v_node_num]) = __pyx_t_31;

      /* "awe_ml/classifier_cython.pyx":829
 *                 #store children
 *                 self.children_list[level][node_num]=node_row.second.second
 *                 sort(self.children_list[level][node_num].begin(),self.children_list[level][node_num].end()) #sort children             # <<<<<<<<<<<<<<
 * 
 *                 #store counts
 */
      std::sort<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator>(((__pyx_v_self->children_list[__pyx_v_level])[__pyx_v_node_num]).begin(), ((__pyx_v_self->children_list[__pyx_v_level])[__pyx_v_node_num]).end());

      /* "awe_ml/classifier_cython.pyx":832
 * 
 *                 #store counts
 *                 for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                     full_tree_data[0].counts[class_ind]=node_row.second.first[self.node_info[level].counts_index+class_ind] # store counts
 * 
 */
      __pyx_t_24 = __pyx_v_self->n_classes;
      __pyx_t_25 = __pyx_t_24;
      for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
        __pyx_v_class_ind = __pyx_t_26;

        /* "awe_ml/classifier_cython.pyx":833
 *                 #store counts
 *                 for class_ind in range(self.n_classes):
 *                     full_tree_data[0].counts[class_ind]=node_row.second.first[self.node_info[level].counts_index+class_ind] # store counts             # <<<<<<<<<<<<<<
 * 
 *                 ### iterate over each feature in node and store feature label
 */
        try {
          ((__pyx_v_full_tree_data[0]).counts[__pyx_v_class_ind]) = (__pyx_v_node_row.second.first[((__pyx_v_self->node_info[__pyx_v_level]).counts_index + __pyx_v_class_ind)]);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 833, __pyx_L1_error)
        }
      }

      /* "awe_ml/classifier_cython.pyx":836
 * 
 *                 ### iterate over each feature in node and store feature label
 *                 label_size = node_row.first.size()             # <<<<<<<<<<<<<<
 *                 for feature_ctr in range( label_size ):
 *                     feature = node_row.first[feature_ctr]
 */
      __pyx_v_label_size = __pyx_v_node_row.first.size();

      /* "awe_ml/classifier_cython.pyx":837
 *                 ### iterate over each feature in node and store feature label
 *                 label_size = node_row.first.size()
 *                 for feature_ctr in range( label_size ):             # <<<<<<<<<<<<<<
 *                     feature = node_row.first[feature_ctr]
 *                     full_tree_data[0].label[feature_ctr]=feature #store feature label (sorted by feature when nodes were created)
 */
      __pyx_t_24 = __pyx_v_label_size;
      __pyx_t_25 = __pyx_t_24;
      for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
        __pyx_v_feature_ctr = __pyx_t_26;

        /* "awe_ml/classifier_cython.pyx":838
 *                 label_size = node_row.first.size()
 *                 for feature_ctr in range( label_size ):
 *                     feature = node_row.first[feature_ctr]             # <<<<<<<<<<<<<<
 *                     full_tree_data[0].label[feature_ctr]=feature #store feature label (sorted by feature when nodes were created)
 * 
 */
        __pyx_v_feature = (__pyx_v_node_row.first[__pyx_v_feature_ctr]);

        /* "awe_ml/classifier_cython.pyx":839
 *                 for feature_ctr in range( label_size ):
 *                     feature = node_row.first[feature_ctr]
 *                     full_tree_data[0].label[feature_ctr]=feature #store feature label (sorted by feature when nodes were created)             # <<<<<<<<<<<<<<
 * 
 *                 ### convert all features in node into a hashable set and store to dict
 */
        try {
          ((__pyx_v_full_tree_data[0]).label[__pyx_v_feature_ctr]) = __pyx_v_feature;
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 839, __pyx_L1_error)
        }
      }

      /* "awe_ml/classifier_cython.pyx":842
 * 
 *                 ### convert all features in node into a hashable set and store to dict
 *                 self.node_label_to_index_dict_list[level][node_row.first]=node_num             # <<<<<<<<<<<<<<
 * 
 *                 ### store parents
 */
      ((__pyx_v_self->node_label_to_index_dict_list[__pyx_v_level])[__pyx_v_node_row.first]) = __pyx_v_node_num;

      /* "awe_ml/classifier_cython.pyx":845
 * 
 *                 ### store parents
 *                 if level==1: # need to handle level 1 separately due to having unlabeled parent             # <<<<<<<<<<<<<<
 *                     full_tree_data[0].parent_indicies[0] = 0
 *                 elif level>1:
 */
      __pyx_t_11 = ((__pyx_v_level == 1) != 0);
      if (__pyx_t_11) {

        /* "awe_ml/classifier_cython.pyx":846
 *                 ### store parents
 *                 if level==1: # need to handle level 1 separately due to having unlabeled parent
 *                     full_tree_data[0].parent_indicies[0] = 0             # <<<<<<<<<<<<<<
 *                 elif level>1:
 *                     for parent_num in range(0,level):  # will skip for level=0 due to having no parents (range(0) = none)
 */
        try {
          ((__pyx_v_full_tree_data[0]).parent_indicies[0]) = 0;
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 846, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":845
 * 
 *                 ### store parents
 *                 if level==1: # need to handle level 1 separately due to having unlabeled parent             # <<<<<<<<<<<<<<
 *                     full_tree_data[0].parent_indicies[0] = 0
 *                 elif level>1:
 */
        goto __pyx_L44;
      }

      /* "awe_ml/classifier_cython.pyx":847
 *                 if level==1: # need to handle level 1 separately due to having unlabeled parent
 *                     full_tree_data[0].parent_indicies[0] = 0
 *                 elif level>1:             # <<<<<<<<<<<<<<
 *                     for parent_num in range(0,level):  # will skip for level=0 due to having no parents (range(0) = none)
 *                         if node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num]==-1:
 */
      __pyx_t_11 = ((__pyx_v_level > 1) != 0);
      if (__pyx_t_11) {

        /* "awe_ml/classifier_cython.pyx":848
 *                     full_tree_data[0].parent_indicies[0] = 0
 *                 elif level>1:
 *                     for parent_num in range(0,level):  # will skip for level=0 due to having no parents (range(0) = none)             # <<<<<<<<<<<<<<
 *                         if node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num]==-1:
 *                             break # no more parents
 */
        __pyx_t_24 = __pyx_v_level;
        __pyx_t_25 = __pyx_t_24;
        for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
          __pyx_v_parent_num = __pyx_t_26;

          /* "awe_ml/classifier_cython.pyx":849
 *                 elif level>1:
 *                     for parent_num in range(0,level):  # will skip for level=0 due to having no parents (range(0) = none)
 *                         if node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num]==-1:             # <<<<<<<<<<<<<<
 *                             break # no more parents
 *                         parent_vec.clear()
 */
          __pyx_t_11 = (((__pyx_v_node_row.second.first[((__pyx_v_self->node_info[__pyx_v_level]).parents_index_begin + ((__pyx_v_self->node_info[__pyx_v_level]).parents_index_step * __pyx_v_parent_num))]) == -1L) != 0);
          if (__pyx_t_11) {

            /* "awe_ml/classifier_cython.pyx":850
 *                     for parent_num in range(0,level):  # will skip for level=0 due to having no parents (range(0) = none)
 *                         if node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num]==-1:
 *                             break # no more parents             # <<<<<<<<<<<<<<
 *                         parent_vec.clear()
 *                         for parent_feature_ctr in range(self.node_info[level].parents_index_step):
 */
            goto __pyx_L46_break;

            /* "awe_ml/classifier_cython.pyx":849
 *                 elif level>1:
 *                     for parent_num in range(0,level):  # will skip for level=0 due to having no parents (range(0) = none)
 *                         if node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num]==-1:             # <<<<<<<<<<<<<<
 *                             break # no more parents
 *                         parent_vec.clear()
 */
          }

          /* "awe_ml/classifier_cython.pyx":851
 *                         if node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num]==-1:
 *                             break # no more parents
 *                         parent_vec.clear()             # <<<<<<<<<<<<<<
 *                         for parent_feature_ctr in range(self.node_info[level].parents_index_step):
 *                             parent_vec.push_back(node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num + parent_feature_ctr])
 */
          __pyx_v_parent_vec.clear();

          /* "awe_ml/classifier_cython.pyx":852
 *                             break # no more parents
 *                         parent_vec.clear()
 *                         for parent_feature_ctr in range(self.node_info[level].parents_index_step):             # <<<<<<<<<<<<<<
 *                             parent_vec.push_back(node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num + parent_feature_ctr])
 * 
 */
          __pyx_t_32 = (__pyx_v_self->node_info[__pyx_v_level]).parents_index_step;
          __pyx_t_33 = __pyx_t_32;
          for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
            __pyx_v_parent_feature_ctr = __pyx_t_34;

            /* "awe_ml/classifier_cython.pyx":853
 *                         parent_vec.clear()
 *                         for parent_feature_ctr in range(self.node_info[level].parents_index_step):
 *                             parent_vec.push_back(node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num + parent_feature_ctr])             # <<<<<<<<<<<<<<
 * 
 *                         full_tree_data[0].parent_indicies[parent_num] = self.node_label_to_index_dict_list[level-1][parent_vec]
 */
            try {
              __pyx_v_parent_vec.push_back((__pyx_v_node_row.second.first[(((__pyx_v_self->node_info[__pyx_v_level]).parents_index_begin + ((__pyx_v_self->node_info[__pyx_v_level]).parents_index_step * __pyx_v_parent_num)) + __pyx_v_parent_feature_ctr)]));
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 853, __pyx_L1_error)
            }
          }

          /* "awe_ml/classifier_cython.pyx":855
 *                             parent_vec.push_back(node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num + parent_feature_ctr])
 * 
 *                         full_tree_data[0].parent_indicies[parent_num] = self.node_label_to_index_dict_list[level-1][parent_vec]             # <<<<<<<<<<<<<<
 * 
 *         #     print("level= ",level," child list= ", self.children_list[level])
 */
          try {
            ((__pyx_v_full_tree_data[0]).parent_indicies[__pyx_v_parent_num]) = ((__pyx_v_self->node_label_to_index_dict_list[(__pyx_v_level - 1)])[__pyx_v_parent_vec]);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 855, __pyx_L1_error)
          }
        }
        __pyx_L46_break:;

        /* "awe_ml/classifier_cython.pyx":847
 *                 if level==1: # need to handle level 1 separately due to having unlabeled parent
 *                     full_tree_data[0].parent_indicies[0] = 0
 *                 elif level>1:             # <<<<<<<<<<<<<<
 *                     for parent_num in range(0,level):  # will skip for level=0 due to having no parents (range(0) = none)
 *                         if node_row.second.first[self.node_info[level].parents_index_begin +self.node_info[level].parents_index_step*parent_num]==-1:
 */
      }
      __pyx_L44:;

      /* "awe_ml/classifier_cython.pyx":821
 *             node_num=-1
 *             # print("fit, level= ",level," node_map size= ",node_map.size())
 *             for node_row in node_map:             # <<<<<<<<<<<<<<
 *                 # print("node row= ",node_row)
 *                 node_num+=1
 */
    }

    /* "awe_ml/classifier_cython.pyx":870
 *             #### compute probability and noise weight for all nodes
 * 
 *             total_count.assign(n_features_combos,0)             # <<<<<<<<<<<<<<
 *             for node_index in range (n_features_combos):
 *                 full_tree_data[0].set_node(node_index) #set stored node index
 */
    __pyx_v_total_count.assign(__pyx_v_n_features_combos, 0);

    /* "awe_ml/classifier_cython.pyx":871
 * 
 *             total_count.assign(n_features_combos,0)
 *             for node_index in range (n_features_combos):             # <<<<<<<<<<<<<<
 *                 full_tree_data[0].set_node(node_index) #set stored node index
 *                 # print("node_index= ", node_index, " full tree data ",full_tree_data[0].getstate())
 */
    __pyx_t_24 = __pyx_v_n_features_combos;
    __pyx_t_25 = __pyx_t_24;
    for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
      __pyx_v_node_index = __pyx_t_26;

      /* "awe_ml/classifier_cython.pyx":872
 *             total_count.assign(n_features_combos,0)
 *             for node_index in range (n_features_combos):
 *                 full_tree_data[0].set_node(node_index) #set stored node index             # <<<<<<<<<<<<<<
 *                 # print("node_index= ", node_index, " full tree data ",full_tree_data[0].getstate())
 * 
 */
      (__pyx_v_full_tree_data[0]).set_node(__pyx_v_node_index);

      /* "awe_ml/classifier_cython.pyx":876
 * 
 * 
 *                 for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                     total_count[node_index]+=full_tree_data[0].counts[class_ind]
 * 
 */
      __pyx_t_32 = __pyx_v_self->n_classes;
      __pyx_t_33 = __pyx_t_32;
      for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
        __pyx_v_class_ind = __pyx_t_34;

        /* "awe_ml/classifier_cython.pyx":877
 * 
 *                 for class_ind in range(self.n_classes):
 *                     total_count[node_index]+=full_tree_data[0].counts[class_ind]             # <<<<<<<<<<<<<<
 * 
 *                 for class_ind in range(self.n_classes):
 */
        __pyx_t_35 = __pyx_v_node_index;
        try {
          __pyx_t_36 = (__pyx_v_full_tree_data[0]).counts[__pyx_v_class_ind];
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 877, __pyx_L1_error)
        }
        (__pyx_v_total_count[__pyx_t_35]) = ((__pyx_v_total_count[__pyx_t_35]) + __pyx_t_36);
      }

      /* "awe_ml/classifier_cython.pyx":879
 *                     total_count[node_index]+=full_tree_data[0].counts[class_ind]
 * 
 *                 for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                     full_tree_data[0].p0[class_ind]=full_tree_data[0].counts[class_ind]/<np_float>total_count[node_index]
 * 
 */
      __pyx_t_32 = __pyx_v_self->n_classes;
      __pyx_t_33 = __pyx_t_32;
      for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
        __pyx_v_class_ind = __pyx_t_34;

        /* "awe_ml/classifier_cython.pyx":880
 * 
 *                 for class_ind in range(self.n_classes):
 *                     full_tree_data[0].p0[class_ind]=full_tree_data[0].counts[class_ind]/<np_float>total_count[node_index]             # <<<<<<<<<<<<<<
 * 
 *                 # print("noise weight ",full_tree_data[0].noise_weight[0])
 */
        try {
          __pyx_t_35 = (__pyx_v_full_tree_data[0]).counts[__pyx_v_class_ind];
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 880, __pyx_L1_error)
        }
        try {
          ((__pyx_v_full_tree_data[0]).p0[__pyx_v_class_ind]) = (((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_35) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)(__pyx_v_total_count[__pyx_v_node_index])));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 880, __pyx_L1_error)
        }
      }

      /* "awe_ml/classifier_cython.pyx":884
 *                 # print("noise weight ",full_tree_data[0].noise_weight[0])
 *                 # print("new  weight  ",self.compute_noise_value(total_count[node_index]))
 *                 full_tree_data[0].noise_weight[0]=self.compute_noise_value(total_count[node_index])             # <<<<<<<<<<<<<<
 *                 # print("saved weight ",full_tree_data[0].noise_weight[0])
 *                 #
 */
      try {
        ((__pyx_v_full_tree_data[0]).noise_weight[0]) = __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_compute_noise_value(__pyx_v_self, (__pyx_v_total_count[__pyx_v_node_index]));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 884, __pyx_L1_error)
      }
    }
  }

  /* "awe_ml/classifier_cython.pyx":927
 *         cdef np_float corr_sum, corr_count
 * 
 *         if self.independence_model_c!=b"none":             # <<<<<<<<<<<<<<
 *             counts.assign(self.n_classes,0)
 * 
 */
  __pyx_t_11 = ((__pyx_v_self->independence_model_c != ((char const *)"none")) != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":928
 * 
 *         if self.independence_model_c!=b"none":
 *             counts.assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 * 
 *             node_label_to_index_dict_ptr = & self.node_label_to_index_dict_list[2]
 */
    __pyx_v_counts.assign(__pyx_v_self->n_classes, 0);

    /* "awe_ml/classifier_cython.pyx":930
 *             counts.assign(self.n_classes,0)
 * 
 *             node_label_to_index_dict_ptr = & self.node_label_to_index_dict_list[2]             # <<<<<<<<<<<<<<
 * 
 *             full_tree_data = & self.full_tree_vector[2] # use second level of tree
 */
    __pyx_v_node_label_to_index_dict_ptr = (&(__pyx_v_self->node_label_to_index_dict_list[2]));

    /* "awe_ml/classifier_cython.pyx":932
 *             node_label_to_index_dict_ptr = & self.node_label_to_index_dict_list[2]
 * 
 *             full_tree_data = & self.full_tree_vector[2] # use second level of tree             # <<<<<<<<<<<<<<
 * 
 *             #create map to store counts per class for computing independence
 */
    __pyx_v_full_tree_data = (&(__pyx_v_self->full_tree_vector[2]));

    /* "awe_ml/classifier_cython.pyx":935
 * 
 *             #create map to store counts per class for computing independence
 *             independence_count_map.clear()             # <<<<<<<<<<<<<<
 * 
 *             #iterate through all features
 */
    __pyx_v_independence_count_map.clear();

    /* "awe_ml/classifier_cython.pyx":938
 * 
 *             #iterate through all features
 *             for feature_num1 in range(self.n_features):             # <<<<<<<<<<<<<<
 *                 n_categories1=self.n_feature_categories_[feature_num1]
 * 
 */
    __pyx_t_18 = __pyx_v_self->n_features;
    __pyx_t_22 = __pyx_t_18;
    for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
      __pyx_v_feature_num1 = __pyx_t_23;

      /* "awe_ml/classifier_cython.pyx":939
 *             #iterate through all features
 *             for feature_num1 in range(self.n_features):
 *                 n_categories1=self.n_feature_categories_[feature_num1]             # <<<<<<<<<<<<<<
 * 
 *                 # iterate through second set of features
 */
      __pyx_v_n_categories1 = (__pyx_v_self->n_feature_categories_[__pyx_v_feature_num1]);

      /* "awe_ml/classifier_cython.pyx":942
 * 
 *                 # iterate through second set of features
 *                 for feature_num2 in range(self.n_features):             # <<<<<<<<<<<<<<
 *                     if feature_num1==feature_num2: #skip to next feature if f1=f2
 *                         continue
 */
      __pyx_t_24 = __pyx_v_self->n_features;
      __pyx_t_25 = __pyx_t_24;
      for (__pyx_t_26 = 0; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
        __pyx_v_feature_num2 = __pyx_t_26;

        /* "awe_ml/classifier_cython.pyx":943
 *                 # iterate through second set of features
 *                 for feature_num2 in range(self.n_features):
 *                     if feature_num1==feature_num2: #skip to next feature if f1=f2             # <<<<<<<<<<<<<<
 *                         continue
 *                     n_categories2=self.n_feature_categories_[feature_num2]
 */
        __pyx_t_11 = ((__pyx_v_feature_num1 == __pyx_v_feature_num2) != 0);
        if (__pyx_t_11) {

          /* "awe_ml/classifier_cython.pyx":944
 *                 for feature_num2 in range(self.n_features):
 *                     if feature_num1==feature_num2: #skip to next feature if f1=f2
 *                         continue             # <<<<<<<<<<<<<<
 *                     n_categories2=self.n_feature_categories_[feature_num2]
 *                     #initialize vector to store counts of feature1, all cat1, feature2, all cat2
 */
          goto __pyx_L59_continue;

          /* "awe_ml/classifier_cython.pyx":943
 *                 # iterate through second set of features
 *                 for feature_num2 in range(self.n_features):
 *                     if feature_num1==feature_num2: #skip to next feature if f1=f2             # <<<<<<<<<<<<<<
 *                         continue
 *                     n_categories2=self.n_feature_categories_[feature_num2]
 */
        }

        /* "awe_ml/classifier_cython.pyx":945
 *                     if feature_num1==feature_num2: #skip to next feature if f1=f2
 *                         continue
 *                     n_categories2=self.n_feature_categories_[feature_num2]             # <<<<<<<<<<<<<<
 *                     #initialize vector to store counts of feature1, all cat1, feature2, all cat2
 *                     summed_counts.assign(self.n_classes,0)
 */
        __pyx_v_n_categories2 = (__pyx_v_self->n_feature_categories_[__pyx_v_feature_num2]);

        /* "awe_ml/classifier_cython.pyx":947
 *                     n_categories2=self.n_feature_categories_[feature_num2]
 *                     #initialize vector to store counts of feature1, all cat1, feature2, all cat2
 *                     summed_counts.assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 * 
 *                     #iterate through categories for each feature
 */
        __pyx_v_summed_counts.assign(__pyx_v_self->n_classes, 0);

        /* "awe_ml/classifier_cython.pyx":950
 * 
 *                     #iterate through categories for each feature
 *                     for category_num1 in range (n_categories1):             # <<<<<<<<<<<<<<
 *                         #find single # label for feature, cat combo
 *                         feature_pair.first = feature_num1
 */
        __pyx_t_32 = __pyx_v_n_categories1;
        __pyx_t_33 = __pyx_t_32;
        for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
          __pyx_v_category_num1 = __pyx_t_34;

          /* "awe_ml/classifier_cython.pyx":952
 *                     for category_num1 in range (n_categories1):
 *                         #find single # label for feature, cat combo
 *                         feature_pair.first = feature_num1             # <<<<<<<<<<<<<<
 *                         feature_pair.second = category_num1
 *                         comb_feat_ind1 = self.feature_pair_to_comb_feat_ind.at(feature_pair)
 */
          __pyx_v_feature_pair.first = __pyx_v_feature_num1;

          /* "awe_ml/classifier_cython.pyx":953
 *                         #find single # label for feature, cat combo
 *                         feature_pair.first = feature_num1
 *                         feature_pair.second = category_num1             # <<<<<<<<<<<<<<
 *                         comb_feat_ind1 = self.feature_pair_to_comb_feat_ind.at(feature_pair)
 *                         #initialize vector to store counts of feature1, cat1, feature2, all cat2
 */
          __pyx_v_feature_pair.second = __pyx_v_category_num1;

          /* "awe_ml/classifier_cython.pyx":954
 *                         feature_pair.first = feature_num1
 *                         feature_pair.second = category_num1
 *                         comb_feat_ind1 = self.feature_pair_to_comb_feat_ind.at(feature_pair)             # <<<<<<<<<<<<<<
 *                         #initialize vector to store counts of feature1, cat1, feature2, all cat2
 *                         counts.assign(self.n_classes,0)
 */
          try {
            __pyx_t_37 = __pyx_v_self->feature_pair_to_comb_feat_ind.at(__pyx_v_feature_pair);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 954, __pyx_L1_error)
          }
          __pyx_v_comb_feat_ind1 = __pyx_t_37;

          /* "awe_ml/classifier_cython.pyx":956
 *                         comb_feat_ind1 = self.feature_pair_to_comb_feat_ind.at(feature_pair)
 *                         #initialize vector to store counts of feature1, cat1, feature2, all cat2
 *                         counts.assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 * 
 *                         for category_num2 in range (n_categories2):
 */
          __pyx_v_counts.assign(__pyx_v_self->n_classes, 0);

          /* "awe_ml/classifier_cython.pyx":958
 *                         counts.assign(self.n_classes,0)
 * 
 *                         for category_num2 in range (n_categories2):             # <<<<<<<<<<<<<<
 *                             #find single # label for feature, cat combo
 *                             feature_pair.first = feature_num2
 */
          __pyx_t_35 = __pyx_v_n_categories2;
          __pyx_t_36 = __pyx_t_35;
          for (__pyx_t_38 = 0; __pyx_t_38 < __pyx_t_36; __pyx_t_38+=1) {
            __pyx_v_category_num2 = __pyx_t_38;

            /* "awe_ml/classifier_cython.pyx":960
 *                         for category_num2 in range (n_categories2):
 *                             #find single # label for feature, cat combo
 *                             feature_pair.first = feature_num2             # <<<<<<<<<<<<<<
 *                             feature_pair.second = category_num2
 *                             comb_feat_ind2 = self.feature_pair_to_comb_feat_ind.at(feature_pair)
 */
            __pyx_v_feature_pair.first = __pyx_v_feature_num2;

            /* "awe_ml/classifier_cython.pyx":961
 *                             #find single # label for feature, cat combo
 *                             feature_pair.first = feature_num2
 *                             feature_pair.second = category_num2             # <<<<<<<<<<<<<<
 *                             comb_feat_ind2 = self.feature_pair_to_comb_feat_ind.at(feature_pair)
 * 
 */
            __pyx_v_feature_pair.second = __pyx_v_category_num2;

            /* "awe_ml/classifier_cython.pyx":962
 *                             feature_pair.first = feature_num2
 *                             feature_pair.second = category_num2
 *                             comb_feat_ind2 = self.feature_pair_to_comb_feat_ind.at(feature_pair)             # <<<<<<<<<<<<<<
 * 
 *                             #find the full tree index by creating a vector with the label
 */
            try {
              __pyx_t_39 = __pyx_v_self->feature_pair_to_comb_feat_ind.at(__pyx_v_feature_pair);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 962, __pyx_L1_error)
            }
            __pyx_v_comb_feat_ind2 = __pyx_t_39;

            /* "awe_ml/classifier_cython.pyx":965
 * 
 *                             #find the full tree index by creating a vector with the label
 *                             label_vec.clear()             # <<<<<<<<<<<<<<
 *                             if comb_feat_ind1<comb_feat_ind2:
 *                                 label_vec.push_back(comb_feat_ind1)
 */
            __pyx_v_label_vec.clear();

            /* "awe_ml/classifier_cython.pyx":966
 *                             #find the full tree index by creating a vector with the label
 *                             label_vec.clear()
 *                             if comb_feat_ind1<comb_feat_ind2:             # <<<<<<<<<<<<<<
 *                                 label_vec.push_back(comb_feat_ind1)
 *                                 label_vec.push_back(comb_feat_ind2)
 */
            __pyx_t_11 = ((__pyx_v_comb_feat_ind1 < __pyx_v_comb_feat_ind2) != 0);
            if (__pyx_t_11) {

              /* "awe_ml/classifier_cython.pyx":967
 *                             label_vec.clear()
 *                             if comb_feat_ind1<comb_feat_ind2:
 *                                 label_vec.push_back(comb_feat_ind1)             # <<<<<<<<<<<<<<
 *                                 label_vec.push_back(comb_feat_ind2)
 *                             else:
 */
              try {
                __pyx_v_label_vec.push_back(__pyx_v_comb_feat_ind1);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 967, __pyx_L1_error)
              }

              /* "awe_ml/classifier_cython.pyx":968
 *                             if comb_feat_ind1<comb_feat_ind2:
 *                                 label_vec.push_back(comb_feat_ind1)
 *                                 label_vec.push_back(comb_feat_ind2)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 label_vec.push_back(comb_feat_ind2)
 */
              try {
                __pyx_v_label_vec.push_back(__pyx_v_comb_feat_ind2);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 968, __pyx_L1_error)
              }

              /* "awe_ml/classifier_cython.pyx":966
 *                             #find the full tree index by creating a vector with the label
 *                             label_vec.clear()
 *                             if comb_feat_ind1<comb_feat_ind2:             # <<<<<<<<<<<<<<
 *                                 label_vec.push_back(comb_feat_ind1)
 *                                 label_vec.push_back(comb_feat_ind2)
 */
              goto __pyx_L66;
            }

            /* "awe_ml/classifier_cython.pyx":970
 *                                 label_vec.push_back(comb_feat_ind2)
 *                             else:
 *                                 label_vec.push_back(comb_feat_ind2)             # <<<<<<<<<<<<<<
 *                                 label_vec.push_back(comb_feat_ind1)
 * 
 */
            /*else*/ {
              try {
                __pyx_v_label_vec.push_back(__pyx_v_comb_feat_ind2);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 970, __pyx_L1_error)
              }

              /* "awe_ml/classifier_cython.pyx":971
 *                             else:
 *                                 label_vec.push_back(comb_feat_ind2)
 *                                 label_vec.push_back(comb_feat_ind1)             # <<<<<<<<<<<<<<
 * 
 *                             # print("feature {0}, cat {1} and feature {2} cat {3}".format(feature_num1,category_num1,feature_num2,category_num2))
 */
              try {
                __pyx_v_label_vec.push_back(__pyx_v_comb_feat_ind1);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 971, __pyx_L1_error)
              }
            }
            __pyx_L66:;

            /* "awe_ml/classifier_cython.pyx":976
 *                             # print("f1= {0}, f2= {1}".format(comb_feat_ind1,comb_feat_ind2))
 * 
 *                             if node_label_to_index_dict_ptr[0].count(label_vec)==1: # only add counts if node exists / counts nonzero             # <<<<<<<<<<<<<<
 *                                 full_tree_index = node_label_to_index_dict_ptr[0].at(label_vec)
 *                                 full_tree_data[0].set_node(full_tree_index)
 */
            __pyx_t_11 = (((__pyx_v_node_label_to_index_dict_ptr[0]).count(__pyx_v_label_vec) == 1) != 0);
            if (__pyx_t_11) {

              /* "awe_ml/classifier_cython.pyx":977
 * 
 *                             if node_label_to_index_dict_ptr[0].count(label_vec)==1: # only add counts if node exists / counts nonzero
 *                                 full_tree_index = node_label_to_index_dict_ptr[0].at(label_vec)             # <<<<<<<<<<<<<<
 *                                 full_tree_data[0].set_node(full_tree_index)
 *                                 for class_ind in range(self.n_classes):
 */
              try {
                __pyx_t_40 = (__pyx_v_node_label_to_index_dict_ptr[0]).at(__pyx_v_label_vec);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 977, __pyx_L1_error)
              }
              __pyx_v_full_tree_index = __pyx_t_40;

              /* "awe_ml/classifier_cython.pyx":978
 *                             if node_label_to_index_dict_ptr[0].count(label_vec)==1: # only add counts if node exists / counts nonzero
 *                                 full_tree_index = node_label_to_index_dict_ptr[0].at(label_vec)
 *                                 full_tree_data[0].set_node(full_tree_index)             # <<<<<<<<<<<<<<
 *                                 for class_ind in range(self.n_classes):
 *                                     counts[class_ind]+=full_tree_data[0].counts[class_ind]
 */
              (__pyx_v_full_tree_data[0]).set_node(__pyx_v_full_tree_index);

              /* "awe_ml/classifier_cython.pyx":979
 *                                 full_tree_index = node_label_to_index_dict_ptr[0].at(label_vec)
 *                                 full_tree_data[0].set_node(full_tree_index)
 *                                 for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                                     counts[class_ind]+=full_tree_data[0].counts[class_ind]
 * 
 */
              __pyx_t_41 = __pyx_v_self->n_classes;
              __pyx_t_42 = __pyx_t_41;
              for (__pyx_t_43 = 0; __pyx_t_43 < __pyx_t_42; __pyx_t_43+=1) {
                __pyx_v_class_ind = __pyx_t_43;

                /* "awe_ml/classifier_cython.pyx":980
 *                                 full_tree_data[0].set_node(full_tree_index)
 *                                 for class_ind in range(self.n_classes):
 *                                     counts[class_ind]+=full_tree_data[0].counts[class_ind]             # <<<<<<<<<<<<<<
 * 
 *                                 # print("full_tree_index=",full_tree_index)
 */
                __pyx_t_44 = __pyx_v_class_ind;
                try {
                  __pyx_t_45 = (__pyx_v_full_tree_data[0]).counts[__pyx_v_class_ind];
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(1, 980, __pyx_L1_error)
                }
                (__pyx_v_counts[__pyx_t_44]) = ((__pyx_v_counts[__pyx_t_44]) + __pyx_t_45);
              }

              /* "awe_ml/classifier_cython.pyx":976
 *                             # print("f1= {0}, f2= {1}".format(comb_feat_ind1,comb_feat_ind2))
 * 
 *                             if node_label_to_index_dict_ptr[0].count(label_vec)==1: # only add counts if node exists / counts nonzero             # <<<<<<<<<<<<<<
 *                                 full_tree_index = node_label_to_index_dict_ptr[0].at(label_vec)
 *                                 full_tree_data[0].set_node(full_tree_index)
 */
            }
          }

          /* "awe_ml/classifier_cython.pyx":986
 * 
 *                         #store counts to the map
 *                         comb_feat_pair.first = comb_feat_ind1             # <<<<<<<<<<<<<<
 *                         feature_pair.first = feature_num2
 *                         feature_pair.second = -1
 */
          __pyx_v_comb_feat_pair.first = __pyx_v_comb_feat_ind1;

          /* "awe_ml/classifier_cython.pyx":987
 *                         #store counts to the map
 *                         comb_feat_pair.first = comb_feat_ind1
 *                         feature_pair.first = feature_num2             # <<<<<<<<<<<<<<
 *                         feature_pair.second = -1
 *                         comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]
 */
          __pyx_v_feature_pair.first = __pyx_v_feature_num2;

          /* "awe_ml/classifier_cython.pyx":988
 *                         comb_feat_pair.first = comb_feat_ind1
 *                         feature_pair.first = feature_num2
 *                         feature_pair.second = -1             # <<<<<<<<<<<<<<
 *                         comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                         if comb_feat_pair.second<comb_feat_pair.first: #sort the label pair
 */
          __pyx_v_feature_pair.second = -1;

          /* "awe_ml/classifier_cython.pyx":989
 *                         feature_pair.first = feature_num2
 *                         feature_pair.second = -1
 *                         comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]             # <<<<<<<<<<<<<<
 *                         if comb_feat_pair.second<comb_feat_pair.first: #sort the label pair
 *                             temp = comb_feat_pair.first
 */
          __pyx_v_comb_feat_pair.second = (__pyx_v_self->feature_pair_to_comb_feat_ind[__pyx_v_feature_pair]);

          /* "awe_ml/classifier_cython.pyx":990
 *                         feature_pair.second = -1
 *                         comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                         if comb_feat_pair.second<comb_feat_pair.first: #sort the label pair             # <<<<<<<<<<<<<<
 *                             temp = comb_feat_pair.first
 *                             comb_feat_pair.first = comb_feat_pair.second
 */
          __pyx_t_11 = ((__pyx_v_comb_feat_pair.second < __pyx_v_comb_feat_pair.first) != 0);
          if (__pyx_t_11) {

            /* "awe_ml/classifier_cython.pyx":991
 *                         comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                         if comb_feat_pair.second<comb_feat_pair.first: #sort the label pair
 *                             temp = comb_feat_pair.first             # <<<<<<<<<<<<<<
 *                             comb_feat_pair.first = comb_feat_pair.second
 *                             comb_feat_pair.second = temp
 */
            __pyx_t_35 = __pyx_v_comb_feat_pair.first;
            __pyx_v_temp = __pyx_t_35;

            /* "awe_ml/classifier_cython.pyx":992
 *                         if comb_feat_pair.second<comb_feat_pair.first: #sort the label pair
 *                             temp = comb_feat_pair.first
 *                             comb_feat_pair.first = comb_feat_pair.second             # <<<<<<<<<<<<<<
 *                             comb_feat_pair.second = temp
 * 
 */
            __pyx_t_35 = __pyx_v_comb_feat_pair.second;
            __pyx_v_comb_feat_pair.first = __pyx_t_35;

            /* "awe_ml/classifier_cython.pyx":993
 *                             temp = comb_feat_pair.first
 *                             comb_feat_pair.first = comb_feat_pair.second
 *                             comb_feat_pair.second = temp             # <<<<<<<<<<<<<<
 * 
 *                         # print("f1={}, f2={}, counts={}\n".format(comb_feat_pair.first, comb_feat_pair.second,counts))
 */
            __pyx_v_comb_feat_pair.second = __pyx_v_temp;

            /* "awe_ml/classifier_cython.pyx":990
 *                         feature_pair.second = -1
 *                         comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                         if comb_feat_pair.second<comb_feat_pair.first: #sort the label pair             # <<<<<<<<<<<<<<
 *                             temp = comb_feat_pair.first
 *                             comb_feat_pair.first = comb_feat_pair.second
 */
          }

          /* "awe_ml/classifier_cython.pyx":996
 * 
 *                         # print("f1={}, f2={}, counts={}\n".format(comb_feat_pair.first, comb_feat_pair.second,counts))
 *                         independence_count_map[comb_feat_pair]=counts             # <<<<<<<<<<<<<<
 * 
 *                         for class_ind in range(self.n_classes):
 */
          (__pyx_v_independence_count_map[__pyx_v_comb_feat_pair]) = __pyx_v_counts;

          /* "awe_ml/classifier_cython.pyx":998
 *                         independence_count_map[comb_feat_pair]=counts
 * 
 *                         for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                             summed_counts[class_ind]+=counts.at(class_ind)
 *                     #store summed counts to the map
 */
          __pyx_t_35 = __pyx_v_self->n_classes;
          __pyx_t_36 = __pyx_t_35;
          for (__pyx_t_38 = 0; __pyx_t_38 < __pyx_t_36; __pyx_t_38+=1) {
            __pyx_v_class_ind = __pyx_t_38;

            /* "awe_ml/classifier_cython.pyx":999
 * 
 *                         for class_ind in range(self.n_classes):
 *                             summed_counts[class_ind]+=counts.at(class_ind)             # <<<<<<<<<<<<<<
 *                     #store summed counts to the map
 *                     comb_feat_pair.first = comb_feat_ind1
 */
            __pyx_t_41 = __pyx_v_class_ind;
            try {
              __pyx_t_46 = __pyx_v_counts.at(__pyx_v_class_ind);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 999, __pyx_L1_error)
            }
            (__pyx_v_summed_counts[__pyx_t_41]) = ((__pyx_v_summed_counts[__pyx_t_41]) + __pyx_t_46);
          }
        }

        /* "awe_ml/classifier_cython.pyx":1001
 *                             summed_counts[class_ind]+=counts.at(class_ind)
 *                     #store summed counts to the map
 *                     comb_feat_pair.first = comb_feat_ind1             # <<<<<<<<<<<<<<
 * 
 *                     feature_pair.first = feature_num1
 */
        __pyx_v_comb_feat_pair.first = __pyx_v_comb_feat_ind1;

        /* "awe_ml/classifier_cython.pyx":1003
 *                     comb_feat_pair.first = comb_feat_ind1
 * 
 *                     feature_pair.first = feature_num1             # <<<<<<<<<<<<<<
 *                     feature_pair.second = -1
 *                     comb_feat_pair.first  = self.feature_pair_to_comb_feat_ind[ feature_pair]
 */
        __pyx_v_feature_pair.first = __pyx_v_feature_num1;

        /* "awe_ml/classifier_cython.pyx":1004
 * 
 *                     feature_pair.first = feature_num1
 *                     feature_pair.second = -1             # <<<<<<<<<<<<<<
 *                     comb_feat_pair.first  = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                     # print("label",label)
 */
        __pyx_v_feature_pair.second = -1;

        /* "awe_ml/classifier_cython.pyx":1005
 *                     feature_pair.first = feature_num1
 *                     feature_pair.second = -1
 *                     comb_feat_pair.first  = self.feature_pair_to_comb_feat_ind[ feature_pair]             # <<<<<<<<<<<<<<
 *                     # print("label",label)
 *                     feature_pair.first = feature_num2
 */
        __pyx_v_comb_feat_pair.first = (__pyx_v_self->feature_pair_to_comb_feat_ind[__pyx_v_feature_pair]);

        /* "awe_ml/classifier_cython.pyx":1007
 *                     comb_feat_pair.first  = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                     # print("label",label)
 *                     feature_pair.first = feature_num2             # <<<<<<<<<<<<<<
 *                     # print("label",label)
 *                     comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]
 */
        __pyx_v_feature_pair.first = __pyx_v_feature_num2;

        /* "awe_ml/classifier_cython.pyx":1009
 *                     feature_pair.first = feature_num2
 *                     # print("label",label)
 *                     comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]             # <<<<<<<<<<<<<<
 *                     pair_sort(comb_feat_pair)
 * 
 */
        __pyx_v_comb_feat_pair.second = (__pyx_v_self->feature_pair_to_comb_feat_ind[__pyx_v_feature_pair]);

        /* "awe_ml/classifier_cython.pyx":1010
 *                     # print("label",label)
 *                     comb_feat_pair.second = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                     pair_sort(comb_feat_pair)             # <<<<<<<<<<<<<<
 * 
 *                     # ##DEBUG:
 */
        __pyx_f_6awe_ml_17classifier_cython_pair_sort(__pyx_v_comb_feat_pair);

        /* "awe_ml/classifier_cython.pyx":1017
 *                     # print("f1={}, f2={}, summed counts={}\n\n\n".format(comb_feat_pair.first, comb_feat_pair.second,summed_counts))
 * 
 *                     independence_count_map[comb_feat_pair]=summed_counts             # <<<<<<<<<<<<<<
 * 
 *             ################### compute correlations needed for finding independence
 */
        (__pyx_v_independence_count_map[__pyx_v_comb_feat_pair]) = __pyx_v_summed_counts;
        __pyx_L59_continue:;
      }
    }

    /* "awe_ml/classifier_cython.pyx":1026
 * 
 *             #iterate over all combinations of features
 *             for full_tree_index in range(full_tree_data[0].n_nodes):             # <<<<<<<<<<<<<<
 *                 full_tree_data[0].set_node(full_tree_index) #set node being used in tree
 *                 #find labels / feature numbers needed to load counts
 */
    __pyx_t_27 = (__pyx_v_full_tree_data[0]).n_nodes;
    __pyx_t_28 = __pyx_t_27;
    for (__pyx_t_47 = 0; __pyx_t_47 < __pyx_t_28; __pyx_t_47+=1) {
      __pyx_v_full_tree_index = __pyx_t_47;

      /* "awe_ml/classifier_cython.pyx":1027
 *             #iterate over all combinations of features
 *             for full_tree_index in range(full_tree_data[0].n_nodes):
 *                 full_tree_data[0].set_node(full_tree_index) #set node being used in tree             # <<<<<<<<<<<<<<
 *                 #find labels / feature numbers needed to load counts
 *                 comb_feat_ind1= full_tree_data[0].label[0]
 */
      (__pyx_v_full_tree_data[0]).set_node(__pyx_v_full_tree_index);

      /* "awe_ml/classifier_cython.pyx":1029
 *                 full_tree_data[0].set_node(full_tree_index) #set node being used in tree
 *                 #find labels / feature numbers needed to load counts
 *                 comb_feat_ind1= full_tree_data[0].label[0]             # <<<<<<<<<<<<<<
 *                 comb_feat_ind2= full_tree_data[0].label[1]
 * 
 */
      try {
        __pyx_t_18 = (__pyx_v_full_tree_data[0]).label[0];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1029, __pyx_L1_error)
      }
      __pyx_v_comb_feat_ind1 = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1030
 *                 #find labels / feature numbers needed to load counts
 *                 comb_feat_ind1= full_tree_data[0].label[0]
 *                 comb_feat_ind2= full_tree_data[0].label[1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_t_18 = (__pyx_v_full_tree_data[0]).label[1];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1030, __pyx_L1_error)
      }
      __pyx_v_comb_feat_ind2 = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1036
 *                 # feature_pair1= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind1)
 *                 # assign each element in pair to avoid some weird windows compiling error
 *                 feature_pair1.first = self.comb_feat_ind_to_feature_pair.at(comb_feat_ind1).first             # <<<<<<<<<<<<<<
 *                 feature_pair1.second = self.comb_feat_ind_to_feature_pair.at(comb_feat_ind1).second
 * 
 */
      try {
        __pyx_t_48 = __pyx_v_self->comb_feat_ind_to_feature_pair.at(__pyx_v_comb_feat_ind1);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1036, __pyx_L1_error)
      }
      __pyx_t_18 = __pyx_t_48->first;
      __pyx_v_feature_pair1.first = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1037
 *                 # assign each element in pair to avoid some weird windows compiling error
 *                 feature_pair1.first = self.comb_feat_ind_to_feature_pair.at(comb_feat_ind1).first
 *                 feature_pair1.second = self.comb_feat_ind_to_feature_pair.at(comb_feat_ind1).second             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_t_49 = __pyx_v_self->comb_feat_ind_to_feature_pair.at(__pyx_v_comb_feat_ind1);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1037, __pyx_L1_error)
      }
      __pyx_t_18 = __pyx_t_49->second;
      __pyx_v_feature_pair1.second = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1041
 * 
 * 
 *                 feature_num1 = feature_pair1.first             # <<<<<<<<<<<<<<
 *                 feature_pair1.second = -1
 *                 comb_feat_ind1all = self.feature_pair_to_comb_feat_ind.at(feature_pair1)
 */
      __pyx_t_18 = __pyx_v_feature_pair1.first;
      __pyx_v_feature_num1 = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1042
 * 
 *                 feature_num1 = feature_pair1.first
 *                 feature_pair1.second = -1             # <<<<<<<<<<<<<<
 *                 comb_feat_ind1all = self.feature_pair_to_comb_feat_ind.at(feature_pair1)
 * 
 */
      __pyx_v_feature_pair1.second = -1;

      /* "awe_ml/classifier_cython.pyx":1043
 *                 feature_num1 = feature_pair1.first
 *                 feature_pair1.second = -1
 *                 comb_feat_ind1all = self.feature_pair_to_comb_feat_ind.at(feature_pair1)             # <<<<<<<<<<<<<<
 * 
 *                 # assign each element in pair to avoid some weird windows compiling error
 */
      try {
        __pyx_t_50 = __pyx_v_self->feature_pair_to_comb_feat_ind.at(__pyx_v_feature_pair1);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1043, __pyx_L1_error)
      }
      __pyx_v_comb_feat_ind1all = __pyx_t_50;

      /* "awe_ml/classifier_cython.pyx":1047
 *                 # assign each element in pair to avoid some weird windows compiling error
 *                 # feature_pair2= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind2)
 *                 feature_pair2.first= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind2).first             # <<<<<<<<<<<<<<
 *                 feature_pair2.second= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind2).second
 * 
 */
      try {
        __pyx_t_51 = __pyx_v_self->comb_feat_ind_to_feature_pair.at(__pyx_v_comb_feat_ind2);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1047, __pyx_L1_error)
      }
      __pyx_t_18 = __pyx_t_51->first;
      __pyx_v_feature_pair2.first = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1048
 *                 # feature_pair2= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind2)
 *                 feature_pair2.first= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind2).first
 *                 feature_pair2.second= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind2).second             # <<<<<<<<<<<<<<
 * 
 *                 feature_num2 = feature_pair2.first
 */
      try {
        __pyx_t_52 = __pyx_v_self->comb_feat_ind_to_feature_pair.at(__pyx_v_comb_feat_ind2);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1048, __pyx_L1_error)
      }
      __pyx_t_18 = __pyx_t_52->second;
      __pyx_v_feature_pair2.second = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1050
 *                 feature_pair2.second= self.comb_feat_ind_to_feature_pair.at(comb_feat_ind2).second
 * 
 *                 feature_num2 = feature_pair2.first             # <<<<<<<<<<<<<<
 *                 feature_pair2.second = -1
 *                 comb_feat_ind2all = self.feature_pair_to_comb_feat_ind.at(feature_pair2)
 */
      __pyx_t_18 = __pyx_v_feature_pair2.first;
      __pyx_v_feature_num2 = __pyx_t_18;

      /* "awe_ml/classifier_cython.pyx":1051
 * 
 *                 feature_num2 = feature_pair2.first
 *                 feature_pair2.second = -1             # <<<<<<<<<<<<<<
 *                 comb_feat_ind2all = self.feature_pair_to_comb_feat_ind.at(feature_pair2)
 * 
 */
      __pyx_v_feature_pair2.second = -1;

      /* "awe_ml/classifier_cython.pyx":1052
 *                 feature_num2 = feature_pair2.first
 *                 feature_pair2.second = -1
 *                 comb_feat_ind2all = self.feature_pair_to_comb_feat_ind.at(feature_pair2)             # <<<<<<<<<<<<<<
 * 
 *                 #find counts needed to compute correlations
 */
      try {
        __pyx_t_53 = __pyx_v_self->feature_pair_to_comb_feat_ind.at(__pyx_v_feature_pair2);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1052, __pyx_L1_error)
      }
      __pyx_v_comb_feat_ind2all = __pyx_t_53;

      /* "awe_ml/classifier_cython.pyx":1056
 *                 #find counts needed to compute correlations
 * 
 *                 comb_feat_pair.first = comb_feat_ind1             # <<<<<<<<<<<<<<
 *                 comb_feat_pair.second = comb_feat_ind2all
 *                 pair_sort(comb_feat_pair)
 */
      __pyx_v_comb_feat_pair.first = __pyx_v_comb_feat_ind1;

      /* "awe_ml/classifier_cython.pyx":1057
 * 
 *                 comb_feat_pair.first = comb_feat_ind1
 *                 comb_feat_pair.second = comb_feat_ind2all             # <<<<<<<<<<<<<<
 *                 pair_sort(comb_feat_pair)
 *                 n_1x_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)
 */
      __pyx_v_comb_feat_pair.second = __pyx_v_comb_feat_ind2all;

      /* "awe_ml/classifier_cython.pyx":1058
 *                 comb_feat_pair.first = comb_feat_ind1
 *                 comb_feat_pair.second = comb_feat_ind2all
 *                 pair_sort(comb_feat_pair)             # <<<<<<<<<<<<<<
 *                 n_1x_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)
 * 
 */
      __pyx_f_6awe_ml_17classifier_cython_pair_sort(__pyx_v_comb_feat_pair);

      /* "awe_ml/classifier_cython.pyx":1059
 *                 comb_feat_pair.second = comb_feat_ind2all
 *                 pair_sort(comb_feat_pair)
 *                 n_1x_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)             # <<<<<<<<<<<<<<
 * 
 *                 comb_feat_pair.first = comb_feat_ind1all
 */
      try {
        __pyx_t_54 = __pyx_v_independence_count_map.at(__pyx_v_comb_feat_pair);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1059, __pyx_L1_error)
      }
      try {
        __pyx_t_55 = __pyx_t_54->at(0);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1059, __pyx_L1_error)
      }
      __pyx_v_n_1x_vec_ptr = (&__pyx_t_55);

      /* "awe_ml/classifier_cython.pyx":1061
 *                 n_1x_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)
 * 
 *                 comb_feat_pair.first = comb_feat_ind1all             # <<<<<<<<<<<<<<
 *                 comb_feat_pair.second = comb_feat_ind2
 *                 pair_sort(comb_feat_pair)
 */
      __pyx_v_comb_feat_pair.first = __pyx_v_comb_feat_ind1all;

      /* "awe_ml/classifier_cython.pyx":1062
 * 
 *                 comb_feat_pair.first = comb_feat_ind1all
 *                 comb_feat_pair.second = comb_feat_ind2             # <<<<<<<<<<<<<<
 *                 pair_sort(comb_feat_pair)
 *                 n_x1_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)
 */
      __pyx_v_comb_feat_pair.second = __pyx_v_comb_feat_ind2;

      /* "awe_ml/classifier_cython.pyx":1063
 *                 comb_feat_pair.first = comb_feat_ind1all
 *                 comb_feat_pair.second = comb_feat_ind2
 *                 pair_sort(comb_feat_pair)             # <<<<<<<<<<<<<<
 *                 n_x1_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)
 * 
 */
      __pyx_f_6awe_ml_17classifier_cython_pair_sort(__pyx_v_comb_feat_pair);

      /* "awe_ml/classifier_cython.pyx":1064
 *                 comb_feat_pair.second = comb_feat_ind2
 *                 pair_sort(comb_feat_pair)
 *                 n_x1_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_t_56 = __pyx_v_independence_count_map.at(__pyx_v_comb_feat_pair);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1064, __pyx_L1_error)
      }
      try {
        __pyx_t_57 = __pyx_t_56->at(0);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1064, __pyx_L1_error)
      }
      __pyx_v_n_x1_vec_ptr = (&__pyx_t_57);

      /* "awe_ml/classifier_cython.pyx":1067
 * 
 * 
 *                 comb_feat_pair.first = comb_feat_ind1all             # <<<<<<<<<<<<<<
 *                 comb_feat_pair.second = comb_feat_ind2all
 *                 pair_sort(comb_feat_pair)
 */
      __pyx_v_comb_feat_pair.first = __pyx_v_comb_feat_ind1all;

      /* "awe_ml/classifier_cython.pyx":1068
 * 
 *                 comb_feat_pair.first = comb_feat_ind1all
 *                 comb_feat_pair.second = comb_feat_ind2all             # <<<<<<<<<<<<<<
 *                 pair_sort(comb_feat_pair)
 *                 n_xx_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)
 */
      __pyx_v_comb_feat_pair.second = __pyx_v_comb_feat_ind2all;

      /* "awe_ml/classifier_cython.pyx":1069
 *                 comb_feat_pair.first = comb_feat_ind1all
 *                 comb_feat_pair.second = comb_feat_ind2all
 *                 pair_sort(comb_feat_pair)             # <<<<<<<<<<<<<<
 *                 n_xx_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)
 * 
 */
      __pyx_f_6awe_ml_17classifier_cython_pair_sort(__pyx_v_comb_feat_pair);

      /* "awe_ml/classifier_cython.pyx":1070
 *                 comb_feat_pair.second = comb_feat_ind2all
 *                 pair_sort(comb_feat_pair)
 *                 n_xx_vec_ptr = & independence_count_map.at(comb_feat_pair).at(0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_t_58 = __pyx_v_independence_count_map.at(__pyx_v_comb_feat_pair);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1070, __pyx_L1_error)
      }
      try {
        __pyx_t_59 = __pyx_t_58->at(0);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1070, __pyx_L1_error)
      }
      __pyx_v_n_xx_vec_ptr = (&__pyx_t_59);

      /* "awe_ml/classifier_cython.pyx":1073
 * 
 * 
 *                 n_11_vec_ptr = & full_tree_data[0].counts[0]  # is pointer to an integer /c-array             # <<<<<<<<<<<<<<
 * 
 *                 ### sum counts over classes
 */
      try {
        __pyx_t_18 = (__pyx_v_full_tree_data[0]).counts[0];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1073, __pyx_L1_error)
      }
      __pyx_v_n_11_vec_ptr = (&__pyx_t_18);

      /* "awe_ml/classifier_cython.pyx":1076
 * 
 *                 ### sum counts over classes
 *                 n_xx=0             # <<<<<<<<<<<<<<
 *                 n_1x=0
 *                 n_x1=0
 */
      __pyx_v_n_xx = 0.0;

      /* "awe_ml/classifier_cython.pyx":1077
 *                 ### sum counts over classes
 *                 n_xx=0
 *                 n_1x=0             # <<<<<<<<<<<<<<
 *                 n_x1=0
 *                 n_11=0
 */
      __pyx_v_n_1x = 0.0;

      /* "awe_ml/classifier_cython.pyx":1078
 *                 n_xx=0
 *                 n_1x=0
 *                 n_x1=0             # <<<<<<<<<<<<<<
 *                 n_11=0
 *                 for class_ind in range(self.n_classes):
 */
      __pyx_v_n_x1 = 0.0;

      /* "awe_ml/classifier_cython.pyx":1079
 *                 n_1x=0
 *                 n_x1=0
 *                 n_11=0             # <<<<<<<<<<<<<<
 *                 for class_ind in range(self.n_classes):
 *                     n_xx+=n_xx_vec_ptr[class_ind]
 */
      __pyx_v_n_11 = 0.0;

      /* "awe_ml/classifier_cython.pyx":1080
 *                 n_x1=0
 *                 n_11=0
 *                 for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                     n_xx+=n_xx_vec_ptr[class_ind]
 *                     n_1x+=n_1x_vec_ptr[class_ind]
 */
      __pyx_t_18 = __pyx_v_self->n_classes;
      __pyx_t_22 = __pyx_t_18;
      for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
        __pyx_v_class_ind = __pyx_t_23;

        /* "awe_ml/classifier_cython.pyx":1081
 *                 n_11=0
 *                 for class_ind in range(self.n_classes):
 *                     n_xx+=n_xx_vec_ptr[class_ind]             # <<<<<<<<<<<<<<
 *                     n_1x+=n_1x_vec_ptr[class_ind]
 *                     n_x1+=n_x1_vec_ptr[class_ind]
 */
        __pyx_v_n_xx = (__pyx_v_n_xx + (__pyx_v_n_xx_vec_ptr[__pyx_v_class_ind]));

        /* "awe_ml/classifier_cython.pyx":1082
 *                 for class_ind in range(self.n_classes):
 *                     n_xx+=n_xx_vec_ptr[class_ind]
 *                     n_1x+=n_1x_vec_ptr[class_ind]             # <<<<<<<<<<<<<<
 *                     n_x1+=n_x1_vec_ptr[class_ind]
 *                     n_11+=n_11_vec_ptr[class_ind]
 */
        __pyx_v_n_1x = (__pyx_v_n_1x + (__pyx_v_n_1x_vec_ptr[__pyx_v_class_ind]));

        /* "awe_ml/classifier_cython.pyx":1083
 *                     n_xx+=n_xx_vec_ptr[class_ind]
 *                     n_1x+=n_1x_vec_ptr[class_ind]
 *                     n_x1+=n_x1_vec_ptr[class_ind]             # <<<<<<<<<<<<<<
 *                     n_11+=n_11_vec_ptr[class_ind]
 * 
 */
        __pyx_v_n_x1 = (__pyx_v_n_x1 + (__pyx_v_n_x1_vec_ptr[__pyx_v_class_ind]));

        /* "awe_ml/classifier_cython.pyx":1084
 *                     n_1x+=n_1x_vec_ptr[class_ind]
 *                     n_x1+=n_x1_vec_ptr[class_ind]
 *                     n_11+=n_11_vec_ptr[class_ind]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_n_11 = (__pyx_v_n_11 + (__pyx_v_n_11_vec_ptr[__pyx_v_class_ind]));
      }

      /* "awe_ml/classifier_cython.pyx":1087
 * 
 * 
 *                 comb_feat_pair.first = comb_feat_ind1             # <<<<<<<<<<<<<<
 *                 comb_feat_pair.second = comb_feat_ind2
 *                 pair_sort(comb_feat_pair)
 */
      __pyx_v_comb_feat_pair.first = __pyx_v_comb_feat_ind1;

      /* "awe_ml/classifier_cython.pyx":1088
 * 
 *                 comb_feat_pair.first = comb_feat_ind1
 *                 comb_feat_pair.second = comb_feat_ind2             # <<<<<<<<<<<<<<
 *                 pair_sort(comb_feat_pair)
 * 
 */
      __pyx_v_comb_feat_pair.second = __pyx_v_comb_feat_ind2;

      /* "awe_ml/classifier_cython.pyx":1089
 *                 comb_feat_pair.first = comb_feat_ind1
 *                 comb_feat_pair.second = comb_feat_ind2
 *                 pair_sort(comb_feat_pair)             # <<<<<<<<<<<<<<
 * 
 *                 if n_xx!=n_1x and n_xx!=n_x1:
 */
      __pyx_f_6awe_ml_17classifier_cython_pair_sort(__pyx_v_comb_feat_pair);

      /* "awe_ml/classifier_cython.pyx":1091
 *                 pair_sort(comb_feat_pair)
 * 
 *                 if n_xx!=n_1x and n_xx!=n_x1:             # <<<<<<<<<<<<<<
 *                     a = n_1x*n_x1/n_xx
 *                     b = n_x1
 */
      __pyx_t_12 = ((__pyx_v_n_xx != __pyx_v_n_1x) != 0);
      if (__pyx_t_12) {
      } else {
        __pyx_t_11 = __pyx_t_12;
        goto __pyx_L78_bool_binop_done;
      }
      __pyx_t_12 = ((__pyx_v_n_xx != __pyx_v_n_x1) != 0);
      __pyx_t_11 = __pyx_t_12;
      __pyx_L78_bool_binop_done:;
      if (__pyx_t_11) {

        /* "awe_ml/classifier_cython.pyx":1092
 * 
 *                 if n_xx!=n_1x and n_xx!=n_x1:
 *                     a = n_1x*n_x1/n_xx             # <<<<<<<<<<<<<<
 *                     b = n_x1
 *                     # corr = abs((n_xx*n_11-n_1x*n_x1)/sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1) ))
 */
        __pyx_v_a = ((__pyx_v_n_1x * __pyx_v_n_x1) / __pyx_v_n_xx);

        /* "awe_ml/classifier_cython.pyx":1093
 *                 if n_xx!=n_1x and n_xx!=n_x1:
 *                     a = n_1x*n_x1/n_xx
 *                     b = n_x1             # <<<<<<<<<<<<<<
 *                     # corr = abs((n_xx*n_11-n_1x*n_x1)/sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1) ))
 *                     # corr = abs(1/(a**2*b-a*b**2)*( (b-2*a)*n_11**2+ (2*a**2-b**2)*n_11 )-1)
 */
        __pyx_v_b = __pyx_v_n_x1;

        /* "awe_ml/classifier_cython.pyx":1096
 *                     # corr = abs((n_xx*n_11-n_1x*n_x1)/sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1) ))
 *                     # corr = abs(1/(a**2*b-a*b**2)*( (b-2*a)*n_11**2+ (2*a**2-b**2)*n_11 )-1)
 *                     corr = min(abs((n_11 -a )/(b-a)),1)             # <<<<<<<<<<<<<<
 *                     # corr =1
 *                     self.correlation_map[comb_feat_pair]=corr
 */
        __pyx_t_60 = 1;
        __pyx_t_61 = fabs(((__pyx_v_n_11 - __pyx_v_a) / (__pyx_v_b - __pyx_v_a)));
        if (((__pyx_t_60 < __pyx_t_61) != 0)) {
          __pyx_t_62 = __pyx_t_60;
        } else {
          __pyx_t_62 = __pyx_t_61;
        }
        __pyx_v_corr = __pyx_t_62;

        /* "awe_ml/classifier_cython.pyx":1098
 *                     corr = min(abs((n_11 -a )/(b-a)),1)
 *                     # corr =1
 *                     self.correlation_map[comb_feat_pair]=corr             # <<<<<<<<<<<<<<
 *                 # else:
 *                 #     self.correlation_map[comb_feat_pair]=0
 */
        (__pyx_v_self->correlation_map[__pyx_v_comb_feat_pair]) = __pyx_v_corr;

        /* "awe_ml/classifier_cython.pyx":1102
 *                 #     self.correlation_map[comb_feat_pair]=0
 * 
 *                     if self.correlation_map.at(comb_feat_pair)>=0 and self.correlation_map.at(comb_feat_pair)<=1:             # <<<<<<<<<<<<<<
 *                         pass
 *                     else:
 */
        try {
          __pyx_t_63 = __pyx_v_self->correlation_map.at(__pyx_v_comb_feat_pair);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1102, __pyx_L1_error)
        }
        __pyx_t_12 = ((__pyx_t_63 >= 0.0) != 0);
        if (__pyx_t_12) {
        } else {
          __pyx_t_11 = __pyx_t_12;
          goto __pyx_L81_bool_binop_done;
        }
        try {
          __pyx_t_64 = __pyx_v_self->correlation_map.at(__pyx_v_comb_feat_pair);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1102, __pyx_L1_error)
        }
        __pyx_t_12 = ((__pyx_t_64 <= 1.0) != 0);
        __pyx_t_11 = __pyx_t_12;
        __pyx_L81_bool_binop_done:;
        if (__pyx_t_11) {
          goto __pyx_L80;
        }

        /* "awe_ml/classifier_cython.pyx":1105
 *                         pass
 *                     else:
 *                         print((n_xx*n_11-n_1x*n_x1))             # <<<<<<<<<<<<<<
 *                         print(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1))
 *                         print(sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1)))
 */
        /*else*/ {
          __pyx_t_16 = PyFloat_FromDouble(((__pyx_v_n_xx * __pyx_v_n_11) - (__pyx_v_n_1x * __pyx_v_n_x1))); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1105, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1105, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "awe_ml/classifier_cython.pyx":1106
 *                     else:
 *                         print((n_xx*n_11-n_1x*n_x1))
 *                         print(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1))             # <<<<<<<<<<<<<<
 *                         print(sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1)))
 *                         print("\nf1=",feature_num1, " f2=",feature_num2, "f1_comb=",comb_feat_ind1, " f2_comb=",comb_feat_ind2, )
 */
          __pyx_t_1 = PyFloat_FromDouble((((__pyx_v_n_1x * __pyx_v_n_x1) * (__pyx_v_n_xx - __pyx_v_n_1x)) * (__pyx_v_n_xx - __pyx_v_n_x1))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1106, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

          /* "awe_ml/classifier_cython.pyx":1107
 *                         print((n_xx*n_11-n_1x*n_x1))
 *                         print(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1))
 *                         print(sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1)))             # <<<<<<<<<<<<<<
 *                         print("\nf1=",feature_num1, " f2=",feature_num2, "f1_comb=",comb_feat_ind1, " f2_comb=",comb_feat_ind2, )
 *                         print("n_xx=",n_xx," n_1x=",n_1x," n_x1=",n_x1," n_11=",n_11)
 */
          __pyx_t_16 = PyFloat_FromDouble(sqrt((((__pyx_v_n_1x * __pyx_v_n_x1) * (__pyx_v_n_xx - __pyx_v_n_1x)) * (__pyx_v_n_xx - __pyx_v_n_x1)))); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1107, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1107, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "awe_ml/classifier_cython.pyx":1108
 *                         print(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1))
 *                         print(sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1)))
 *                         print("\nf1=",feature_num1, " f2=",feature_num2, "f1_comb=",comb_feat_ind1, " f2_comb=",comb_feat_ind2, )             # <<<<<<<<<<<<<<
 *                         print("n_xx=",n_xx," n_1x=",n_1x," n_x1=",n_x1," n_11=",n_11)
 *                         print("correlation = ",self.correlation_map.at(comb_feat_pair))
 */
          __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_num1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_16 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_num2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_6 = __Pyx_PyInt_From_npy_int32(__pyx_v_comb_feat_ind1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_3 = __Pyx_PyInt_From_npy_int32(__pyx_v_comb_feat_ind2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyTuple_New(8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_kp_u_f1);
          __Pyx_GIVEREF(__pyx_kp_u_f1);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_f1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
          __Pyx_INCREF(__pyx_kp_u_f2);
          __Pyx_GIVEREF(__pyx_kp_u_f2);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_f2);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_16);
          __Pyx_INCREF(__pyx_kp_u_f1_comb);
          __Pyx_GIVEREF(__pyx_kp_u_f1_comb);
          PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_f1_comb);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_6);
          __Pyx_INCREF(__pyx_kp_u_f2_comb);
          __Pyx_GIVEREF(__pyx_kp_u_f2_comb);
          PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_f2_comb);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_3);
          __pyx_t_1 = 0;
          __pyx_t_16 = 0;
          __pyx_t_6 = 0;
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "awe_ml/classifier_cython.pyx":1109
 *                         print(sqrt(n_1x*n_x1*(n_xx-n_1x)*(n_xx-n_x1)))
 *                         print("\nf1=",feature_num1, " f2=",feature_num2, "f1_comb=",comb_feat_ind1, " f2_comb=",comb_feat_ind2, )
 *                         print("n_xx=",n_xx," n_1x=",n_1x," n_x1=",n_x1," n_11=",n_11)             # <<<<<<<<<<<<<<
 *                         print("correlation = ",self.correlation_map.at(comb_feat_pair))
 *                         print("a= ",a,"b= ",b)
 */
          __pyx_t_3 = PyFloat_FromDouble(__pyx_v_n_xx); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_n_1x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_6 = PyFloat_FromDouble(__pyx_v_n_x1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_16 = PyFloat_FromDouble(__pyx_v_n_11); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_1 = PyTuple_New(8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_kp_u_n_xx);
          __Pyx_GIVEREF(__pyx_kp_u_n_xx);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_n_xx);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
          __Pyx_INCREF(__pyx_kp_u_n_1x);
          __Pyx_GIVEREF(__pyx_kp_u_n_1x);
          PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_n_1x);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
          __Pyx_INCREF(__pyx_kp_u_n_x1);
          __Pyx_GIVEREF(__pyx_kp_u_n_x1);
          PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_n_x1);
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_6);
          __Pyx_INCREF(__pyx_kp_u_n_11);
          __Pyx_GIVEREF(__pyx_kp_u_n_11);
          PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_n_11);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_16);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_6 = 0;
          __pyx_t_16 = 0;
          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

          /* "awe_ml/classifier_cython.pyx":1110
 *                         print("\nf1=",feature_num1, " f2=",feature_num2, "f1_comb=",comb_feat_ind1, " f2_comb=",comb_feat_ind2, )
 *                         print("n_xx=",n_xx," n_1x=",n_1x," n_x1=",n_x1," n_11=",n_11)
 *                         print("correlation = ",self.correlation_map.at(comb_feat_pair))             # <<<<<<<<<<<<<<
 *                         print("a= ",a,"b= ",b)
 *                         print("This should be -1:",1/(a**2*b-a*b**2)*( (b-2*a)*0**2+ (2*a**2-b**2)*0 )-1 )
 */
          try {
            __pyx_t_65 = __pyx_v_self->correlation_map.at(__pyx_v_comb_feat_pair);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1110, __pyx_L1_error)
          }
          __pyx_t_16 = PyFloat_FromDouble(__pyx_t_65); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1110, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1110, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_kp_u_correlation);
          __Pyx_GIVEREF(__pyx_kp_u_correlation);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_correlation);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_16);
          __pyx_t_16 = 0;
          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1110, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

          /* "awe_ml/classifier_cython.pyx":1111
 *                         print("n_xx=",n_xx," n_1x=",n_1x," n_x1=",n_x1," n_11=",n_11)
 *                         print("correlation = ",self.correlation_map.at(comb_feat_pair))
 *                         print("a= ",a,"b= ",b)             # <<<<<<<<<<<<<<
 *                         print("This should be -1:",1/(a**2*b-a*b**2)*( (b-2*a)*0**2+ (2*a**2-b**2)*0 )-1 )
 *                         print("This should be 0:",1/(a**2*b-a*b**2)*( (b-2*a)*a**2+ (2*a**2-b**2)*a )-1 )
 */
          __pyx_t_16 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1111, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1111, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_kp_u_a);
          __Pyx_GIVEREF(__pyx_kp_u_a);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_a);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_16);
          __Pyx_INCREF(__pyx_kp_u_b);
          __Pyx_GIVEREF(__pyx_kp_u_b);
          PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_b);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1);
          __pyx_t_16 = 0;
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "awe_ml/classifier_cython.pyx":1112
 *                         print("correlation = ",self.correlation_map.at(comb_feat_pair))
 *                         print("a= ",a,"b= ",b)
 *                         print("This should be -1:",1/(a**2*b-a*b**2)*( (b-2*a)*0**2+ (2*a**2-b**2)*0 )-1 )             # <<<<<<<<<<<<<<
 *                         print("This should be 0:",1/(a**2*b-a*b**2)*( (b-2*a)*a**2+ (2*a**2-b**2)*a )-1 )
 *                         print("This should be 1:",1/(a**2*b-a*b**2)*( (b-2*a)*b**2+ (2*a**2-b**2)*b )-1 )
 */
          __pyx_t_1 = PyFloat_FromDouble((((1.0 / ((pow(__pyx_v_a, 2.0) * __pyx_v_b) - (__pyx_v_a * pow(__pyx_v_b, 2.0)))) * (((__pyx_v_b - (2.0 * __pyx_v_a)) * 0.0) + (((2.0 * pow(__pyx_v_a, 2.0)) - pow(__pyx_v_b, 2.0)) * 0.0))) - 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1112, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1112, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_kp_u_This_should_be_1);
          __Pyx_GIVEREF(__pyx_kp_u_This_should_be_1);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_This_should_be_1);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1112, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "awe_ml/classifier_cython.pyx":1113
 *                         print("a= ",a,"b= ",b)
 *                         print("This should be -1:",1/(a**2*b-a*b**2)*( (b-2*a)*0**2+ (2*a**2-b**2)*0 )-1 )
 *                         print("This should be 0:",1/(a**2*b-a*b**2)*( (b-2*a)*a**2+ (2*a**2-b**2)*a )-1 )             # <<<<<<<<<<<<<<
 *                         print("This should be 1:",1/(a**2*b-a*b**2)*( (b-2*a)*b**2+ (2*a**2-b**2)*b )-1 )
 * 
 */
          __pyx_t_1 = PyFloat_FromDouble((((1.0 / ((pow(__pyx_v_a, 2.0) * __pyx_v_b) - (__pyx_v_a * pow(__pyx_v_b, 2.0)))) * (((__pyx_v_b - (2.0 * __pyx_v_a)) * pow(__pyx_v_a, 2.0)) + (((2.0 * pow(__pyx_v_a, 2.0)) - pow(__pyx_v_b, 2.0)) * __pyx_v_a))) - 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1113, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1113, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_kp_u_This_should_be_0);
          __Pyx_GIVEREF(__pyx_kp_u_This_should_be_0);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_This_should_be_0);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1113, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "awe_ml/classifier_cython.pyx":1114
 *                         print("This should be -1:",1/(a**2*b-a*b**2)*( (b-2*a)*0**2+ (2*a**2-b**2)*0 )-1 )
 *                         print("This should be 0:",1/(a**2*b-a*b**2)*( (b-2*a)*a**2+ (2*a**2-b**2)*a )-1 )
 *                         print("This should be 1:",1/(a**2*b-a*b**2)*( (b-2*a)*b**2+ (2*a**2-b**2)*b )-1 )             # <<<<<<<<<<<<<<
 * 
 *                         # raise ValueError ("GAAHHHHHHHHHH")
 */
          __pyx_t_1 = PyFloat_FromDouble((((1.0 / ((pow(__pyx_v_a, 2.0) * __pyx_v_b) - (__pyx_v_a * pow(__pyx_v_b, 2.0)))) * (((__pyx_v_b - (2.0 * __pyx_v_a)) * pow(__pyx_v_b, 2.0)) + (((2.0 * pow(__pyx_v_a, 2.0)) - pow(__pyx_v_b, 2.0)) * __pyx_v_b))) - 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_kp_u_This_should_be_1_2);
          __Pyx_GIVEREF(__pyx_kp_u_This_should_be_1_2);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_This_should_be_1_2);
          __Pyx_GIVEREF(__pyx_t_1);
          PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1114, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_L80:;

        /* "awe_ml/classifier_cython.pyx":1091
 *                 pair_sort(comb_feat_pair)
 * 
 *                 if n_xx!=n_1x and n_xx!=n_x1:             # <<<<<<<<<<<<<<
 *                     a = n_1x*n_x1/n_xx
 *                     b = n_x1
 */
      }
    }

    /* "awe_ml/classifier_cython.pyx":1119
 * 
 *             #### find average correlation
 *             corr_sum=0             # <<<<<<<<<<<<<<
 *             corr_count=0
 *             for correlation_val in self.correlation_map:
 */
    __pyx_v_corr_sum = 0.0;

    /* "awe_ml/classifier_cython.pyx":1120
 *             #### find average correlation
 *             corr_sum=0
 *             corr_count=0             # <<<<<<<<<<<<<<
 *             for correlation_val in self.correlation_map:
 *                 corr_count+=1
 */
    __pyx_v_corr_count = 0.0;

    /* "awe_ml/classifier_cython.pyx":1121
 *             corr_sum=0
 *             corr_count=0
 *             for correlation_val in self.correlation_map:             # <<<<<<<<<<<<<<
 *                 corr_count+=1
 *                 corr_sum+=correlation_val.second
 */
    __pyx_t_67 = &__pyx_v_self->correlation_map;
    __pyx_t_66 = __pyx_t_67->begin();
    for (;;) {
      if (!(__pyx_t_66 != __pyx_t_67->end())) break;
      __pyx_t_68 = *__pyx_t_66;
      ++__pyx_t_66;
      __pyx_v_correlation_val = __pyx_t_68;

      /* "awe_ml/classifier_cython.pyx":1122
 *             corr_count=0
 *             for correlation_val in self.correlation_map:
 *                 corr_count+=1             # <<<<<<<<<<<<<<
 *                 corr_sum+=correlation_val.second
 * 
 */
      __pyx_v_corr_count = (__pyx_v_corr_count + 1.0);

      /* "awe_ml/classifier_cython.pyx":1123
 *             for correlation_val in self.correlation_map:
 *                 corr_count+=1
 *                 corr_sum+=correlation_val.second             # <<<<<<<<<<<<<<
 * 
 *             self.ave_corr = corr_sum / corr_count
 */
      __pyx_v_corr_sum = (__pyx_v_corr_sum + __pyx_v_correlation_val.second);

      /* "awe_ml/classifier_cython.pyx":1121
 *             corr_sum=0
 *             corr_count=0
 *             for correlation_val in self.correlation_map:             # <<<<<<<<<<<<<<
 *                 corr_count+=1
 *                 corr_sum+=correlation_val.second
 */
    }

    /* "awe_ml/classifier_cython.pyx":1125
 *                 corr_sum+=correlation_val.second
 * 
 *             self.ave_corr = corr_sum / corr_count             # <<<<<<<<<<<<<<
 *             print("average correlation = ", self.ave_corr)#, "indep model= ", self.independence_model_c)
 * 
 */
    __pyx_v_self->ave_corr = (__pyx_v_corr_sum / __pyx_v_corr_count);

    /* "awe_ml/classifier_cython.pyx":1126
 * 
 *             self.ave_corr = corr_sum / corr_count
 *             print("average correlation = ", self.ave_corr)#, "indep model= ", self.independence_model_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ave_corr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_u_average_correlation);
    __Pyx_GIVEREF(__pyx_kp_u_average_correlation);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_average_correlation);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":927
 *         cdef np_float corr_sum, corr_count
 * 
 *         if self.independence_model_c!=b"none":             # <<<<<<<<<<<<<<
 *             counts.assign(self.n_classes,0)
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1133
 *         #     print("fit: level= ",level," child list= ", self.children_list[level])
 * 
 *         return self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":630
 * 
 * 
 *     cpdef fit(self, X_in, y_in, list feature_names_txt=None, list categorical_bin_list=None, list numeric_bin_list=None):             # <<<<<<<<<<<<<<
 *         """
 *         Train the classifier on data X with targets y
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __PYX_XDEC_MEMVIEW(&__pyx_t_20, 1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y, 1);
  __Pyx_XDECREF(__pyx_v_classes_dict);
  __PYX_XDEC_MEMVIEW(&__pyx_v_feature_col, 1);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_val);
  __Pyx_XDECREF(__pyx_v_X_in);
  __Pyx_XDECREF(__pyx_v_y_in);
  __Pyx_XDECREF(__pyx_v_categorical_bin_list);
  __Pyx_XDECREF(__pyx_v_numeric_bin_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_10fit[] = "\n        Train the classifier on data X with targets y\n        Assume X is integer array with features numbered 0 to N, -1 is missing feature\n        assume classes (y) are sequentially ordered from  0 to N\n\n        :param X_in:\n        :type X_in: np.ndarray\n        :param y:\n        :param categorical_bin_list: list of categorical bin tuples, if passed overrides bins derived from bin_data function\n        :param numeric_bin_list: list of numeric bin tuples, if passed overrides bins derived from bin_data function\n        :return: the classifier object itself i.e. \"self\"\n        ";
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11fit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_X_in = 0;
  PyObject *__pyx_v_y_in = 0;
  PyObject *__pyx_v_feature_names_txt = 0;
  PyObject *__pyx_v_categorical_bin_list = 0;
  PyObject *__pyx_v_numeric_bin_list = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X_in,&__pyx_n_s_y_in,&__pyx_n_s_feature_names_txt,&__pyx_n_s_categorical_bin_list,&__pyx_n_s_numeric_bin_list,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[2] = ((PyObject*)Py_None);
    values[3] = ((PyObject*)Py_None);
    values[4] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_in)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_in)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit", 0, 2, 5, 1); __PYX_ERR(1, 630, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feature_names_txt);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_categorical_bin_list);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_numeric_bin_list);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fit") < 0)) __PYX_ERR(1, 630, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_X_in = values[0];
    __pyx_v_y_in = values[1];
    __pyx_v_feature_names_txt = ((PyObject*)values[2]);
    __pyx_v_categorical_bin_list = ((PyObject*)values[3]);
    __pyx_v_numeric_bin_list = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit", 0, 2, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 630, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_feature_names_txt), (&PyList_Type), 1, "feature_names_txt", 1))) __PYX_ERR(1, 630, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_categorical_bin_list), (&PyList_Type), 1, "categorical_bin_list", 1))) __PYX_ERR(1, 630, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_numeric_bin_list), (&PyList_Type), 1, "numeric_bin_list", 1))) __PYX_ERR(1, 630, __pyx_L1_error)
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_10fit(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), __pyx_v_X_in, __pyx_v_y_in, __pyx_v_feature_names_txt, __pyx_v_categorical_bin_list, __pyx_v_numeric_bin_list);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_10fit(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X_in, PyObject *__pyx_v_y_in, PyObject *__pyx_v_feature_names_txt, PyObject *__pyx_v_categorical_bin_list, PyObject *__pyx_v_numeric_bin_list) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit __pyx_t_2;
  __Pyx_RefNannySetupContext("fit", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.feature_names_txt = __pyx_v_feature_names_txt;
  __pyx_t_2.categorical_bin_list = __pyx_v_categorical_bin_list;
  __pyx_t_2.numeric_bin_list = __pyx_v_numeric_bin_list;
  __pyx_t_1 = __pyx_vtabptr_6awe_ml_17classifier_cython_AWE_ML_Cython->fit(__pyx_v_self, __pyx_v_X_in, __pyx_v_y_in, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1137
 * 
 * 
 *     cdef inline np_float compute_noise_value(self,const np_long & total_count):             # <<<<<<<<<<<<<<
 *         return min((total_count**self.noise_exponent) / self.noise_scale , 1 )
 * 
 */

static CYTHON_INLINE __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_compute_noise_value(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long const &__pyx_v_total_count) {
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_2;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_3;
  __Pyx_RefNannySetupContext("compute_noise_value", 0);

  /* "awe_ml/classifier_cython.pyx":1138
 * 
 *     cdef inline np_float compute_noise_value(self,const np_long & total_count):
 *         return min((total_count**self.noise_exponent) / self.noise_scale , 1 )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = 1;
  __pyx_t_2 = (pow(((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_total_count), __pyx_v_self->noise_exponent) / __pyx_v_self->noise_scale);
  if (((__pyx_t_1 < __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":1137
 * 
 * 
 *     cdef inline np_float compute_noise_value(self,const np_long & total_count):             # <<<<<<<<<<<<<<
 *         return min((total_count**self.noise_exponent) / self.noise_scale , 1 )
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1142
 * 
 *     #void
 *     cdef create_and_process_node(self, np_long & child_depth, vector[np_long] & child_label, vector[vector[np_long] ] & data_by_class, vector[np_long] & parent_label, np_long & child_comb_feat_ind):#, np_long & parent_depth, vector[np_long] & parent_label):             # <<<<<<<<<<<<<<
 *         """
 *         child is the node to be created
 */

static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_and_process_node(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_depth, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_child_label, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_data_by_class, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_parent_label, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_comb_feat_ind) {
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_counts;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_total_data_count;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_num_nonzero_classes;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_new_node;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_new_node_data_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_num;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_2;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("create_and_process_node", 0);

  /* "awe_ml/classifier_cython.pyx":1156
 * 
 *         #### count data
 *         cdef np_long class_ind, class_counts, total_data_count = 0, num_nonzero_classes =0             # <<<<<<<<<<<<<<
 *         for class_ind in range(self.n_classes):
 *             class_counts = data_by_class[class_ind].size()
 */
  __pyx_v_total_data_count = 0;
  __pyx_v_num_nonzero_classes = 0;

  /* "awe_ml/classifier_cython.pyx":1157
 *         #### count data
 *         cdef np_long class_ind, class_counts, total_data_count = 0, num_nonzero_classes =0
 *         for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             class_counts = data_by_class[class_ind].size()
 *             total_data_count+=class_counts #count total data
 */
  __pyx_t_1 = __pyx_v_self->n_classes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_class_ind = __pyx_t_3;

    /* "awe_ml/classifier_cython.pyx":1158
 *         cdef np_long class_ind, class_counts, total_data_count = 0, num_nonzero_classes =0
 *         for class_ind in range(self.n_classes):
 *             class_counts = data_by_class[class_ind].size()             # <<<<<<<<<<<<<<
 *             total_data_count+=class_counts #count total data
 *             if class_counts>0:
 */
    __pyx_v_class_counts = (__pyx_v_data_by_class[__pyx_v_class_ind]).size();

    /* "awe_ml/classifier_cython.pyx":1159
 *         for class_ind in range(self.n_classes):
 *             class_counts = data_by_class[class_ind].size()
 *             total_data_count+=class_counts #count total data             # <<<<<<<<<<<<<<
 *             if class_counts>0:
 *                 num_nonzero_classes+=1  # count number of nonzero classes
 */
    __pyx_v_total_data_count = (__pyx_v_total_data_count + __pyx_v_class_counts);

    /* "awe_ml/classifier_cython.pyx":1160
 *             class_counts = data_by_class[class_ind].size()
 *             total_data_count+=class_counts #count total data
 *             if class_counts>0:             # <<<<<<<<<<<<<<
 *                 num_nonzero_classes+=1  # count number of nonzero classes
 * 
 */
    __pyx_t_4 = ((__pyx_v_class_counts > 0) != 0);
    if (__pyx_t_4) {

      /* "awe_ml/classifier_cython.pyx":1161
 *             total_data_count+=class_counts #count total data
 *             if class_counts>0:
 *                 num_nonzero_classes+=1  # count number of nonzero classes             # <<<<<<<<<<<<<<
 * 
 *         #### do not create node if there is not enough data
 */
      __pyx_v_num_nonzero_classes = (__pyx_v_num_nonzero_classes + 1);

      /* "awe_ml/classifier_cython.pyx":1160
 *             class_counts = data_by_class[class_ind].size()
 *             total_data_count+=class_counts #count total data
 *             if class_counts>0:             # <<<<<<<<<<<<<<
 *                 num_nonzero_classes+=1  # count number of nonzero classes
 * 
 */
    }
  }

  /* "awe_ml/classifier_cython.pyx":1164
 * 
 *         #### do not create node if there is not enough data
 *         if total_data_count<self.n_min_to_add_leaf:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_4 = ((__pyx_v_total_data_count < __pyx_v_self->n_min_to_add_leaf) != 0);
  if (__pyx_t_4) {

    /* "awe_ml/classifier_cython.pyx":1165
 *         #### do not create node if there is not enough data
 *         if total_data_count<self.n_min_to_add_leaf:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         #### create new node
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "awe_ml/classifier_cython.pyx":1164
 * 
 *         #### do not create node if there is not enough data
 *         if total_data_count<self.n_min_to_add_leaf:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1171
 *         cdef vector[np_long] * new_node_data_ptr
 * 
 *         self.nodes[child_depth][child_label] = new_node #perform a copy of new node to create new node             # <<<<<<<<<<<<<<
 *         new_node_data_ptr = & self.nodes[child_depth][child_label].first
 *         new_node_data_ptr[0].resize(self.node_info[child_depth].size,-1)  #intialize vector to the correct size
 */
  ((__pyx_v_self->nodes[__pyx_v_child_depth])[__pyx_v_child_label]) = __pyx_v_new_node;

  /* "awe_ml/classifier_cython.pyx":1172
 * 
 *         self.nodes[child_depth][child_label] = new_node #perform a copy of new node to create new node
 *         new_node_data_ptr = & self.nodes[child_depth][child_label].first             # <<<<<<<<<<<<<<
 *         new_node_data_ptr[0].resize(self.node_info[child_depth].size,-1)  #intialize vector to the correct size
 * 
 */
  __pyx_v_new_node_data_ptr = (&((__pyx_v_self->nodes[__pyx_v_child_depth])[__pyx_v_child_label]).first);

  /* "awe_ml/classifier_cython.pyx":1173
 *         self.nodes[child_depth][child_label] = new_node #perform a copy of new node to create new node
 *         new_node_data_ptr = & self.nodes[child_depth][child_label].first
 *         new_node_data_ptr[0].resize(self.node_info[child_depth].size,-1)  #intialize vector to the correct size             # <<<<<<<<<<<<<<
 * 
 *         # update counts of node
 */
  try {
    (__pyx_v_new_node_data_ptr[0]).resize((__pyx_v_self->node_info[__pyx_v_child_depth]).size, -1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1173, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1177
 *         # update counts of node
 *         cdef np_long class_num
 *         for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             new_node_data_ptr[0][self.node_info[child_depth].counts_index+class_num]=data_by_class[class_num].size()
 * 
 */
  __pyx_t_1 = __pyx_v_self->n_classes;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_class_num = __pyx_t_3;

    /* "awe_ml/classifier_cython.pyx":1178
 *         cdef np_long class_num
 *         for class_num in range(self.n_classes):
 *             new_node_data_ptr[0][self.node_info[child_depth].counts_index+class_num]=data_by_class[class_num].size()             # <<<<<<<<<<<<<<
 * 
 *         # add parent label to child
 */
    ((__pyx_v_new_node_data_ptr[0])[((__pyx_v_self->node_info[__pyx_v_child_depth]).counts_index + __pyx_v_class_num)]) = (__pyx_v_data_by_class[__pyx_v_class_num]).size();
  }

  /* "awe_ml/classifier_cython.pyx":1181
 * 
 *         # add parent label to child
 *         self.add_parent_label(child_label, child_depth, parent_label, child_comb_feat_ind)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->add_parent_label(__pyx_v_self, __pyx_v_child_label, __pyx_v_child_depth, __pyx_v_parent_label, __pyx_v_child_comb_feat_ind);

  /* "awe_ml/classifier_cython.pyx":1185
 * 
 *         # only create children if there is data in more than one class
 *         if num_nonzero_classes>1:             # <<<<<<<<<<<<<<
 *             self.create_children(child_depth,child_label, data_by_class)
 * 
 */
  __pyx_t_4 = ((__pyx_v_num_nonzero_classes > 1) != 0);
  if (__pyx_t_4) {

    /* "awe_ml/classifier_cython.pyx":1186
 *         # only create children if there is data in more than one class
 *         if num_nonzero_classes>1:
 *             self.create_children(child_depth,child_label, data_by_class)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->create_children(__pyx_v_self, __pyx_v_child_depth, __pyx_v_child_label, __pyx_v_data_by_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "awe_ml/classifier_cython.pyx":1185
 * 
 *         # only create children if there is data in more than one class
 *         if num_nonzero_classes>1:             # <<<<<<<<<<<<<<
 *             self.create_children(child_depth,child_label, data_by_class)
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1142
 * 
 *     #void
 *     cdef create_and_process_node(self, np_long & child_depth, vector[np_long] & child_label, vector[vector[np_long] ] & data_by_class, vector[np_long] & parent_label, np_long & child_comb_feat_ind):#, np_long & parent_depth, vector[np_long] & parent_label):             # <<<<<<<<<<<<<<
 *         """
 *         child is the node to be created
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.create_and_process_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1190
 * 
 *     #void
 *     cdef create_children(self,np_long & parent_depth, vector[np_long] & parent_label, vector[vector[np_long] ] & parent_data_by_class):             # <<<<<<<<<<<<<<
 *         """
 *         create a function that can be called recursively to fill in nodes
 */

static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_children(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_parent_depth, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_parent_label, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_parent_data_by_class) {
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_updated_index;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_childrens_comb_feat_inds;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_comb_features_to_add;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_potential_comb_feat_inds;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_potential_features;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_feature_pair;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_category_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_categories;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_num;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::size_type __pyx_v_parent_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_datum_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_num_random;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_unshuffled;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_begin;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_rand_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_temp;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_potential_features;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_gini_by_features;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_datum_category;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_total_count;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_ctr;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_data_counts;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_count_per_cat;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_selected_features;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_weighted_gini;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_gini_per_cat;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_p_i;
  __Pyx_memviewslice __pyx_v_gini_inds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_num;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_child_label;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_data_by_class;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_feature;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_category;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_3;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_4;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_5;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_6;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_7;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_8;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::size_type __pyx_t_9;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::size_type __pyx_t_10;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::size_type __pyx_t_11;
  int __pyx_t_12;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_13;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator __pyx_t_14;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_t_15;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_19;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_20;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  __Pyx_memviewslice __pyx_t_28 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_29;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  __Pyx_RefNannySetupContext("create_children", 0);

  /* "awe_ml/classifier_cython.pyx":1201
 * 
 *         cdef np_long child_depth
 *         child_depth=parent_depth+1             # <<<<<<<<<<<<<<
 * 
 *         #check if the children are too deep
 */
  __pyx_v_child_depth = (__pyx_v_parent_depth + 1);

  /* "awe_ml/classifier_cython.pyx":1204
 * 
 *         #check if the children are too deep
 *         if self.max_depth>0 and child_depth>self.max_depth:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->max_depth > 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_child_depth > __pyx_v_self->max_depth) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "awe_ml/classifier_cython.pyx":1205
 *         #check if the children are too deep
 *         if self.max_depth>0 and child_depth>self.max_depth:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # check that parent has not been updated (it must exist)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "awe_ml/classifier_cython.pyx":1204
 * 
 *         #check if the children are too deep
 *         if self.max_depth>0 and child_depth>self.max_depth:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1209
 *         # check that parent has not been updated (it must exist)
 *         cdef np_long parent_updated_index
 *         parent_updated_index = self.node_info[parent_depth].updated_index             # <<<<<<<<<<<<<<
 * 
 *         if self.nodes[parent_depth][parent_label].first[parent_updated_index] ==1:
 */
  __pyx_t_3 = (__pyx_v_self->node_info[__pyx_v_parent_depth]).updated_index;
  __pyx_v_parent_updated_index = __pyx_t_3;

  /* "awe_ml/classifier_cython.pyx":1211
 *         parent_updated_index = self.node_info[parent_depth].updated_index
 * 
 *         if self.nodes[parent_depth][parent_label].first[parent_updated_index] ==1:             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */
  __pyx_t_1 = (((((__pyx_v_self->nodes[__pyx_v_parent_depth])[__pyx_v_parent_label]).first[__pyx_v_parent_updated_index]) == 1) != 0);
  if (__pyx_t_1) {

    /* "awe_ml/classifier_cython.pyx":1212
 * 
 *         if self.nodes[parent_depth][parent_label].first[parent_updated_index] ==1:
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             self.nodes[parent_depth][parent_label].first[parent_updated_index]=1
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "awe_ml/classifier_cython.pyx":1211
 *         parent_updated_index = self.node_info[parent_depth].updated_index
 * 
 *         if self.nodes[parent_depth][parent_label].first[parent_updated_index] ==1:             # <<<<<<<<<<<<<<
 *             return
 *         else:
 */
  }

  /* "awe_ml/classifier_cython.pyx":1214
 *             return
 *         else:
 *             self.nodes[parent_depth][parent_label].first[parent_updated_index]=1             # <<<<<<<<<<<<<<
 * 
 *         #################################################
 */
  /*else*/ {
    (((__pyx_v_self->nodes[__pyx_v_parent_depth])[__pyx_v_parent_label]).first[__pyx_v_parent_updated_index]) = 1;
  }

  /* "awe_ml/classifier_cython.pyx":1230
 *         # for each feature, iterate over all possible categories
 *         cdef np_long feature_num
 *         for feature_num in range(self.n_features):             # <<<<<<<<<<<<<<
 *             n_categories=self.n_feature_categories_[feature_num]
 *             comb_features_to_add.resize(0)
 */
  __pyx_t_3 = __pyx_v_self->n_features;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_feature_num = __pyx_t_5;

    /* "awe_ml/classifier_cython.pyx":1231
 *         cdef np_long feature_num
 *         for feature_num in range(self.n_features):
 *             n_categories=self.n_feature_categories_[feature_num]             # <<<<<<<<<<<<<<
 *             comb_features_to_add.resize(0)
 * 
 */
    __pyx_v_n_categories = (__pyx_v_self->n_feature_categories_[__pyx_v_feature_num]);

    /* "awe_ml/classifier_cython.pyx":1232
 *         for feature_num in range(self.n_features):
 *             n_categories=self.n_feature_categories_[feature_num]
 *             comb_features_to_add.resize(0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_v_comb_features_to_add.resize(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 1232, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":1237
 *             #determine if a given feature is in the label (by checking each category of that feature) and if not,
 *                 # add all indices for the given feature to potential_comb_feat_inds
 *             for category_num in range (n_categories):             # <<<<<<<<<<<<<<
 *                 #convert pair (feature_num, category_num) into a single number index and add to list comb_features_to_add
 *                 feature_pair.first = feature_num
 */
    __pyx_t_6 = __pyx_v_n_categories;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_category_num = __pyx_t_8;

      /* "awe_ml/classifier_cython.pyx":1239
 *             for category_num in range (n_categories):
 *                 #convert pair (feature_num, category_num) into a single number index and add to list comb_features_to_add
 *                 feature_pair.first = feature_num             # <<<<<<<<<<<<<<
 *                 feature_pair.second = category_num
 *                 comb_feat_ind = self.feature_pair_to_comb_feat_ind[ feature_pair]
 */
      __pyx_v_feature_pair.first = __pyx_v_feature_num;

      /* "awe_ml/classifier_cython.pyx":1240
 *                 #convert pair (feature_num, category_num) into a single number index and add to list comb_features_to_add
 *                 feature_pair.first = feature_num
 *                 feature_pair.second = category_num             # <<<<<<<<<<<<<<
 *                 comb_feat_ind = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                 comb_features_to_add.push_back(comb_feat_ind)
 */
      __pyx_v_feature_pair.second = __pyx_v_category_num;

      /* "awe_ml/classifier_cython.pyx":1241
 *                 feature_pair.first = feature_num
 *                 feature_pair.second = category_num
 *                 comb_feat_ind = self.feature_pair_to_comb_feat_ind[ feature_pair]             # <<<<<<<<<<<<<<
 *                 comb_features_to_add.push_back(comb_feat_ind)
 * 
 */
      __pyx_v_comb_feat_ind = (__pyx_v_self->feature_pair_to_comb_feat_ind[__pyx_v_feature_pair]);

      /* "awe_ml/classifier_cython.pyx":1242
 *                 feature_pair.second = category_num
 *                 comb_feat_ind = self.feature_pair_to_comb_feat_ind[ feature_pair]
 *                 comb_features_to_add.push_back(comb_feat_ind)             # <<<<<<<<<<<<<<
 * 
 *                 #if comb_feat_ind in parent features skip this feature
 */
      try {
        __pyx_v_comb_features_to_add.push_back(__pyx_v_comb_feat_ind);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1242, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":1245
 * 
 *                 #if comb_feat_ind in parent features skip this feature
 *                 for parent_num in range(parent_label.size() ):             # <<<<<<<<<<<<<<
 *                     if comb_feat_ind== parent_label[parent_num]:
 *                         break #if parent found break twice
 */
      __pyx_t_9 = __pyx_v_parent_label.size();
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_parent_num = __pyx_t_11;

        /* "awe_ml/classifier_cython.pyx":1246
 *                 #if comb_feat_ind in parent features skip this feature
 *                 for parent_num in range(parent_label.size() ):
 *                     if comb_feat_ind== parent_label[parent_num]:             # <<<<<<<<<<<<<<
 *                         break #if parent found break twice
 *                 else: # no parent found so go to next iteration
 */
        __pyx_t_1 = ((__pyx_v_comb_feat_ind == (__pyx_v_parent_label[__pyx_v_parent_num])) != 0);
        if (__pyx_t_1) {

          /* "awe_ml/classifier_cython.pyx":1247
 *                 for parent_num in range(parent_label.size() ):
 *                     if comb_feat_ind== parent_label[parent_num]:
 *                         break #if parent found break twice             # <<<<<<<<<<<<<<
 *                 else: # no parent found so go to next iteration
 *                     continue
 */
          goto __pyx_L12_break;

          /* "awe_ml/classifier_cython.pyx":1246
 *                 #if comb_feat_ind in parent features skip this feature
 *                 for parent_num in range(parent_label.size() ):
 *                     if comb_feat_ind== parent_label[parent_num]:             # <<<<<<<<<<<<<<
 *                         break #if parent found break twice
 *                 else: # no parent found so go to next iteration
 */
        }
      }
      /*else*/ {

        /* "awe_ml/classifier_cython.pyx":1249
 *                         break #if parent found break twice
 *                 else: # no parent found so go to next iteration
 *                     continue             # <<<<<<<<<<<<<<
 *                 break # parent found so break again(broke out of previous loop thus reaching here)
 *             else: # no parent found, add features to potential_comb_feat_inds
 */
        goto __pyx_L9_continue;
      }
      __pyx_L12_break:;

      /* "awe_ml/classifier_cython.pyx":1250
 *                 else: # no parent found so go to next iteration
 *                     continue
 *                 break # parent found so break again(broke out of previous loop thus reaching here)             # <<<<<<<<<<<<<<
 *             else: # no parent found, add features to potential_comb_feat_inds
 *                 potential_comb_feat_inds.insert(potential_comb_feat_inds.end(), comb_features_to_add.begin(), comb_features_to_add.end())
 */
      goto __pyx_L10_break;
      __pyx_L9_continue:;
    }
    /*else*/ {

      /* "awe_ml/classifier_cython.pyx":1252
 *                 break # parent found so break again(broke out of previous loop thus reaching here)
 *             else: # no parent found, add features to potential_comb_feat_inds
 *                 potential_comb_feat_inds.insert(potential_comb_feat_inds.end(), comb_features_to_add.begin(), comb_features_to_add.end())             # <<<<<<<<<<<<<<
 *                 potential_features.push_back(feature_num)
 * 
 */
      try {
        __pyx_v_potential_comb_feat_inds.insert(__pyx_v_potential_comb_feat_inds.end(), __pyx_v_comb_features_to_add.begin(), __pyx_v_comb_features_to_add.end());
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1252, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":1253
 *             else: # no parent found, add features to potential_comb_feat_inds
 *                 potential_comb_feat_inds.insert(potential_comb_feat_inds.end(), comb_features_to_add.begin(), comb_features_to_add.end())
 *                 potential_features.push_back(feature_num)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      try {
        __pyx_v_potential_features.push_back(__pyx_v_feature_num);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1253, __pyx_L1_error)
      }
    }
    __pyx_L10_break:;
  }

  /* "awe_ml/classifier_cython.pyx":1267
 *         cdef np_long[:] gini_inds
 * 
 *         n_potential_features = potential_features.size()             # <<<<<<<<<<<<<<
 * 
 *         if (child_depth<=self.max_fully_connected_depth) or (n_potential_features<self.features_per_node): # create all fully connected children
 */
  __pyx_v_n_potential_features = __pyx_v_potential_features.size();

  /* "awe_ml/classifier_cython.pyx":1269
 *         n_potential_features = potential_features.size()
 * 
 *         if (child_depth<=self.max_fully_connected_depth) or (n_potential_features<self.features_per_node): # create all fully connected children             # <<<<<<<<<<<<<<
 *             childrens_comb_feat_inds = potential_comb_feat_inds
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_child_depth <= __pyx_v_self->max_fully_connected_depth) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_n_potential_features < __pyx_v_self->features_per_node) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "awe_ml/classifier_cython.pyx":1270
 * 
 *         if (child_depth<=self.max_fully_connected_depth) or (n_potential_features<self.features_per_node): # create all fully connected children
 *             childrens_comb_feat_inds = potential_comb_feat_inds             # <<<<<<<<<<<<<<
 *         else:
 *             if self.node_split_model =="gini" or self.node_split_model =="gini_random":
 */
    __pyx_v_childrens_comb_feat_inds = __pyx_v_potential_comb_feat_inds;

    /* "awe_ml/classifier_cython.pyx":1269
 *         n_potential_features = potential_features.size()
 * 
 *         if (child_depth<=self.max_fully_connected_depth) or (n_potential_features<self.features_per_node): # create all fully connected children             # <<<<<<<<<<<<<<
 *             childrens_comb_feat_inds = potential_comb_feat_inds
 *         else:
 */
    goto __pyx_L14;
  }

  /* "awe_ml/classifier_cython.pyx":1272
 *             childrens_comb_feat_inds = potential_comb_feat_inds
 *         else:
 *             if self.node_split_model =="gini" or self.node_split_model =="gini_random":             # <<<<<<<<<<<<<<
 *                 if self.node_split_model == "gini_random":
 *                     ### randomly choose  subset of features, use  Fisher-Yates shuffle:
 */
  /*else*/ {
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->node_split_model, __pyx_n_u_gini, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __pyx_t_12 = (__pyx_t_2 != 0);
    if (!__pyx_t_12) {
    } else {
      __pyx_t_1 = __pyx_t_12;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_12 = (__Pyx_PyUnicode_Equals(__pyx_v_self->node_split_model, __pyx_n_u_gini_random, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_12 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L18_bool_binop_done:;
    if (likely(__pyx_t_1)) {

      /* "awe_ml/classifier_cython.pyx":1273
 *         else:
 *             if self.node_split_model =="gini" or self.node_split_model =="gini_random":
 *                 if self.node_split_model == "gini_random":             # <<<<<<<<<<<<<<
 *                     ### randomly choose  subset of features, use  Fisher-Yates shuffle:
 * 
 */
      __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->node_split_model, __pyx_n_u_gini_random, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 1273, __pyx_L1_error)
      __pyx_t_2 = (__pyx_t_1 != 0);
      if (__pyx_t_2) {

        /* "awe_ml/classifier_cython.pyx":1277
 * 
 *                     #compute how many features to use
 *                     num_random = lround(n_potential_features*self.node_split_fraction)             # <<<<<<<<<<<<<<
 * 
 *                     n_unshuffled = n_potential_features #number of unshuffled features
 */
        __pyx_v_num_random = lround((__pyx_v_n_potential_features * __pyx_v_self->node_split_fraction));

        /* "awe_ml/classifier_cython.pyx":1279
 *                     num_random = lround(n_potential_features*self.node_split_fraction)
 * 
 *                     n_unshuffled = n_potential_features #number of unshuffled features             # <<<<<<<<<<<<<<
 *                     for begin in range(num_random):
 *                         # find unbiased random number in range [0,n_unshuffled)
 */
        __pyx_v_n_unshuffled = __pyx_v_n_potential_features;

        /* "awe_ml/classifier_cython.pyx":1280
 * 
 *                     n_unshuffled = n_potential_features #number of unshuffled features
 *                     for begin in range(num_random):             # <<<<<<<<<<<<<<
 *                         # find unbiased random number in range [0,n_unshuffled)
 *                         while True:
 */
        __pyx_t_3 = __pyx_v_num_random;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_begin = __pyx_t_5;

          /* "awe_ml/classifier_cython.pyx":1282
 *                     for begin in range(num_random):
 *                         # find unbiased random number in range [0,n_unshuffled)
 *                         while True:             # <<<<<<<<<<<<<<
 *                             rand_num = rand()
 *                             if rand_num< (RAND_MAX - RAND_MAX % n_unshuffled):
 */
          while (1) {

            /* "awe_ml/classifier_cython.pyx":1283
 *                         # find unbiased random number in range [0,n_unshuffled)
 *                         while True:
 *                             rand_num = rand()             # <<<<<<<<<<<<<<
 *                             if rand_num< (RAND_MAX - RAND_MAX % n_unshuffled):
 *                                 break
 */
            __pyx_v_rand_num = rand();

            /* "awe_ml/classifier_cython.pyx":1284
 *                         while True:
 *                             rand_num = rand()
 *                             if rand_num< (RAND_MAX - RAND_MAX % n_unshuffled):             # <<<<<<<<<<<<<<
 *                                 break
 *                         rand_num = rand_num%n_unshuffled
 */
            __pyx_t_2 = ((__pyx_v_rand_num < (RAND_MAX - (RAND_MAX % __pyx_v_n_unshuffled))) != 0);
            if (__pyx_t_2) {

              /* "awe_ml/classifier_cython.pyx":1285
 *                             rand_num = rand()
 *                             if rand_num< (RAND_MAX - RAND_MAX % n_unshuffled):
 *                                 break             # <<<<<<<<<<<<<<
 *                         rand_num = rand_num%n_unshuffled
 * 
 */
              goto __pyx_L24_break;

              /* "awe_ml/classifier_cython.pyx":1284
 *                         while True:
 *                             rand_num = rand()
 *                             if rand_num< (RAND_MAX - RAND_MAX % n_unshuffled):             # <<<<<<<<<<<<<<
 *                                 break
 *                         rand_num = rand_num%n_unshuffled
 */
            }
          }
          __pyx_L24_break:;

          /* "awe_ml/classifier_cython.pyx":1286
 *                             if rand_num< (RAND_MAX - RAND_MAX % n_unshuffled):
 *                                 break
 *                         rand_num = rand_num%n_unshuffled             # <<<<<<<<<<<<<<
 * 
 *                         #swap value at rand_num with value at begin
 */
          __pyx_v_rand_num = (__pyx_v_rand_num % __pyx_v_n_unshuffled);

          /* "awe_ml/classifier_cython.pyx":1289
 * 
 *                         #swap value at rand_num with value at begin
 *                         temp = potential_features[begin]             # <<<<<<<<<<<<<<
 *                         potential_features[begin] = potential_features[rand_num+begin]
 *                         potential_features[rand_num+begin] = temp
 */
          __pyx_v_temp = (__pyx_v_potential_features[__pyx_v_begin]);

          /* "awe_ml/classifier_cython.pyx":1290
 *                         #swap value at rand_num with value at begin
 *                         temp = potential_features[begin]
 *                         potential_features[begin] = potential_features[rand_num+begin]             # <<<<<<<<<<<<<<
 *                         potential_features[rand_num+begin] = temp
 * 
 */
          (__pyx_v_potential_features[__pyx_v_begin]) = (__pyx_v_potential_features[(__pyx_v_rand_num + __pyx_v_begin)]);

          /* "awe_ml/classifier_cython.pyx":1291
 *                         temp = potential_features[begin]
 *                         potential_features[begin] = potential_features[rand_num+begin]
 *                         potential_features[rand_num+begin] = temp             # <<<<<<<<<<<<<<
 * 
 *                         #decrement the number of unshuffled values and increment begin
 */
          (__pyx_v_potential_features[(__pyx_v_rand_num + __pyx_v_begin)]) = __pyx_v_temp;

          /* "awe_ml/classifier_cython.pyx":1294
 * 
 *                         #decrement the number of unshuffled values and increment begin
 *                         n_unshuffled-=1             # <<<<<<<<<<<<<<
 * 
 *                     #limit potential_features to only the randomly selected values
 */
          __pyx_v_n_unshuffled = (__pyx_v_n_unshuffled - 1);
        }

        /* "awe_ml/classifier_cython.pyx":1297
 * 
 *                     #limit potential_features to only the randomly selected values
 *                     potential_features.resize(num_random)             # <<<<<<<<<<<<<<
 *                     #TODO:  DEBUG / TEST THIS CODE / USE BETTER RANDOM NUMBERS
 * 
 */
        try {
          __pyx_v_potential_features.resize(__pyx_v_num_random);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1297, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":1273
 *         else:
 *             if self.node_split_model =="gini" or self.node_split_model =="gini_random":
 *                 if self.node_split_model == "gini_random":             # <<<<<<<<<<<<<<
 *                     ### randomly choose  subset of features, use  Fisher-Yates shuffle:
 * 
 */
      }

      /* "awe_ml/classifier_cython.pyx":1301
 * 
 *                 # find gini coeficient (or entropy) of every potential feature:
 *                 gini_by_features.clear()             # <<<<<<<<<<<<<<
 *                 gini_by_features.resize(n_potential_features,1)
 *                 for feature_ind in range(n_potential_features):   #iterate over each possible feature and analyze categories in the feature
 */
      __pyx_v_gini_by_features.clear();

      /* "awe_ml/classifier_cython.pyx":1302
 *                 # find gini coeficient (or entropy) of every potential feature:
 *                 gini_by_features.clear()
 *                 gini_by_features.resize(n_potential_features,1)             # <<<<<<<<<<<<<<
 *                 for feature_ind in range(n_potential_features):   #iterate over each possible feature and analyze categories in the feature
 *                     feature = potential_features[feature_ind]
 */
      try {
        __pyx_v_gini_by_features.resize(__pyx_v_n_potential_features, 1.0);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1302, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":1303
 *                 gini_by_features.clear()
 *                 gini_by_features.resize(n_potential_features,1)
 *                 for feature_ind in range(n_potential_features):   #iterate over each possible feature and analyze categories in the feature             # <<<<<<<<<<<<<<
 *                     feature = potential_features[feature_ind]
 * 
 */
      __pyx_t_3 = __pyx_v_n_potential_features;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_feature_ind = __pyx_t_5;

        /* "awe_ml/classifier_cython.pyx":1304
 *                 gini_by_features.resize(n_potential_features,1)
 *                 for feature_ind in range(n_potential_features):   #iterate over each possible feature and analyze categories in the feature
 *                     feature = potential_features[feature_ind]             # <<<<<<<<<<<<<<
 * 
 *                     n_categories= self.n_feature_categories_[feature]
 */
        __pyx_v_feature = (__pyx_v_potential_features[__pyx_v_feature_ind]);

        /* "awe_ml/classifier_cython.pyx":1306
 *                     feature = potential_features[feature_ind]
 * 
 *                     n_categories= self.n_feature_categories_[feature]             # <<<<<<<<<<<<<<
 * 
 *                     # count data by classification category in a given feature
 */
        __pyx_v_n_categories = (__pyx_v_self->n_feature_categories_[__pyx_v_feature]);

        /* "awe_ml/classifier_cython.pyx":1310
 *                     # count data by classification category in a given feature
 *                     # data_counts.clear()
 *                     data_counts.assign(n_categories,vector[np_long](self.n_classes, 0 ) )             # <<<<<<<<<<<<<<
 * 
 *                     # data_counts = np.zeros( (self.n_classes,n_categories),dtype=int )
 */
        try {
          __pyx_t_13 = std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> (__pyx_v_self->n_classes, 0);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1310, __pyx_L1_error)
        }
        __pyx_v_data_counts.assign(__pyx_v_n_categories, __pyx_t_13);

        /* "awe_ml/classifier_cython.pyx":1313
 * 
 *                     # data_counts = np.zeros( (self.n_classes,n_categories),dtype=int )
 *                     for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                         for datum_index in parent_data_by_class[class_num]:
 *                             datum_category = self.X[datum_index,feature]# find the category of feature "feature"
 */
        __pyx_t_6 = __pyx_v_self->n_classes;
        __pyx_t_7 = __pyx_t_6;
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
          __pyx_v_class_num = __pyx_t_8;

          /* "awe_ml/classifier_cython.pyx":1314
 *                     # data_counts = np.zeros( (self.n_classes,n_categories),dtype=int )
 *                     for class_num in range(self.n_classes):
 *                         for datum_index in parent_data_by_class[class_num]:             # <<<<<<<<<<<<<<
 *                             datum_category = self.X[datum_index,feature]# find the category of feature "feature"
 *                             # if the category is not missing:
 */
          __pyx_t_15 = &(__pyx_v_parent_data_by_class[__pyx_v_class_num]);
          __pyx_t_14 = __pyx_t_15->begin();
          for (;;) {
            if (!(__pyx_t_14 != __pyx_t_15->end())) break;
            __pyx_t_16 = *__pyx_t_14;
            ++__pyx_t_14;
            __pyx_v_datum_index = __pyx_t_16;

            /* "awe_ml/classifier_cython.pyx":1315
 *                     for class_num in range(self.n_classes):
 *                         for datum_index in parent_data_by_class[class_num]:
 *                             datum_category = self.X[datum_index,feature]# find the category of feature "feature"             # <<<<<<<<<<<<<<
 *                             # if the category is not missing:
 *                             if datum_category>=0:
 */
            __pyx_t_17 = __pyx_v_datum_index;
            __pyx_t_18 = __pyx_v_feature;
            __pyx_v_datum_category = (*((__pyx_t_6awe_ml_17classifier_cython_np_long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->X.data + __pyx_t_17 * __pyx_v_self->X.strides[0]) ) + __pyx_t_18 * __pyx_v_self->X.strides[1]) )));

            /* "awe_ml/classifier_cython.pyx":1317
 *                             datum_category = self.X[datum_index,feature]# find the category of feature "feature"
 *                             # if the category is not missing:
 *                             if datum_category>=0:             # <<<<<<<<<<<<<<
 *                                 data_counts[datum_category][class_num]+=1
 * 
 */
            __pyx_t_2 = ((__pyx_v_datum_category >= 0) != 0);
            if (__pyx_t_2) {

              /* "awe_ml/classifier_cython.pyx":1318
 *                             # if the category is not missing:
 *                             if datum_category>=0:
 *                                 data_counts[datum_category][class_num]+=1             # <<<<<<<<<<<<<<
 * 
 *                     ###### gini coeficient
 */
              __pyx_t_16 = __pyx_v_datum_category;
              __pyx_t_19 = __pyx_v_class_num;
              ((__pyx_v_data_counts[__pyx_t_16])[__pyx_t_19]) = (((__pyx_v_data_counts[__pyx_t_16])[__pyx_t_19]) + 1);

              /* "awe_ml/classifier_cython.pyx":1317
 *                             datum_category = self.X[datum_index,feature]# find the category of feature "feature"
 *                             # if the category is not missing:
 *                             if datum_category>=0:             # <<<<<<<<<<<<<<
 *                                 data_counts[datum_category][class_num]+=1
 * 
 */
            }

            /* "awe_ml/classifier_cython.pyx":1314
 *                     # data_counts = np.zeros( (self.n_classes,n_categories),dtype=int )
 *                     for class_num in range(self.n_classes):
 *                         for datum_index in parent_data_by_class[class_num]:             # <<<<<<<<<<<<<<
 *                             datum_category = self.X[datum_index,feature]# find the category of feature "feature"
 *                             # if the category is not missing:
 */
          }
        }

        /* "awe_ml/classifier_cython.pyx":1322
 *                     ###### gini coeficient
 *                     # count_per_cat = np.sum(data_counts,axis=0)
 *                     count_per_cat.assign(n_categories,0)             # <<<<<<<<<<<<<<
 *                     total_count = 0
 *                     for category_num in range(n_categories):
 */
        __pyx_v_count_per_cat.assign(__pyx_v_n_categories, 0);

        /* "awe_ml/classifier_cython.pyx":1323
 *                     # count_per_cat = np.sum(data_counts,axis=0)
 *                     count_per_cat.assign(n_categories,0)
 *                     total_count = 0             # <<<<<<<<<<<<<<
 *                     for category_num in range(n_categories):
 *                         for class_num in range(self.n_classes):
 */
        __pyx_v_total_count = 0;

        /* "awe_ml/classifier_cython.pyx":1324
 *                     count_per_cat.assign(n_categories,0)
 *                     total_count = 0
 *                     for category_num in range(n_categories):             # <<<<<<<<<<<<<<
 *                         for class_num in range(self.n_classes):
 *                             count_per_cat[category_num] += data_counts[category_num][class_num]
 */
        __pyx_t_6 = __pyx_v_n_categories;
        __pyx_t_7 = __pyx_t_6;
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
          __pyx_v_category_num = __pyx_t_8;

          /* "awe_ml/classifier_cython.pyx":1325
 *                     total_count = 0
 *                     for category_num in range(n_categories):
 *                         for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                             count_per_cat[category_num] += data_counts[category_num][class_num]
 *                         total_count+=count_per_cat[category_num]
 */
          __pyx_t_16 = __pyx_v_self->n_classes;
          __pyx_t_19 = __pyx_t_16;
          for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
            __pyx_v_class_num = __pyx_t_20;

            /* "awe_ml/classifier_cython.pyx":1326
 *                     for category_num in range(n_categories):
 *                         for class_num in range(self.n_classes):
 *                             count_per_cat[category_num] += data_counts[category_num][class_num]             # <<<<<<<<<<<<<<
 *                         total_count+=count_per_cat[category_num]
 * 
 */
            __pyx_t_21 = __pyx_v_category_num;
            (__pyx_v_count_per_cat[__pyx_t_21]) = ((__pyx_v_count_per_cat[__pyx_t_21]) + ((__pyx_v_data_counts[__pyx_v_category_num])[__pyx_v_class_num]));
          }

          /* "awe_ml/classifier_cython.pyx":1327
 *                         for class_num in range(self.n_classes):
 *                             count_per_cat[category_num] += data_counts[category_num][class_num]
 *                         total_count+=count_per_cat[category_num]             # <<<<<<<<<<<<<<
 * 
 *                     if total_count==0:
 */
          __pyx_v_total_count = (__pyx_v_total_count + (__pyx_v_count_per_cat[__pyx_v_category_num]));
        }

        /* "awe_ml/classifier_cython.pyx":1329
 *                         total_count+=count_per_cat[category_num]
 * 
 *                     if total_count==0:             # <<<<<<<<<<<<<<
 *                         gini_by_features[feature_ind] = 10000  #if there are no features (i.e. all are missing, set gini to >1 so that this feature is not selected)
 *                                                              #max gini is 1
 */
        __pyx_t_2 = ((__pyx_v_total_count == 0) != 0);
        if (__pyx_t_2) {

          /* "awe_ml/classifier_cython.pyx":1330
 * 
 *                     if total_count==0:
 *                         gini_by_features[feature_ind] = 10000  #if there are no features (i.e. all are missing, set gini to >1 so that this feature is not selected)             # <<<<<<<<<<<<<<
 *                                                              #max gini is 1
 *                     else:
 */
          (__pyx_v_gini_by_features[__pyx_v_feature_ind]) = 10000.0;

          /* "awe_ml/classifier_cython.pyx":1329
 *                         total_count+=count_per_cat[category_num]
 * 
 *                     if total_count==0:             # <<<<<<<<<<<<<<
 *                         gini_by_features[feature_ind] = 10000  #if there are no features (i.e. all are missing, set gini to >1 so that this feature is not selected)
 *                                                              #max gini is 1
 */
          goto __pyx_L37;
        }

        /* "awe_ml/classifier_cython.pyx":1333
 *                                                              #max gini is 1
 *                     else:
 *                         weighted_gini = 0             # <<<<<<<<<<<<<<
 *                         for category_num in range(n_categories):
 *                             gini_per_cat=1
 */
        /*else*/ {
          __pyx_v_weighted_gini = 0.0;

          /* "awe_ml/classifier_cython.pyx":1334
 *                     else:
 *                         weighted_gini = 0
 *                         for category_num in range(n_categories):             # <<<<<<<<<<<<<<
 *                             gini_per_cat=1
 *                             if count_per_cat[category_num]>0:
 */
          __pyx_t_6 = __pyx_v_n_categories;
          __pyx_t_7 = __pyx_t_6;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_category_num = __pyx_t_8;

            /* "awe_ml/classifier_cython.pyx":1335
 *                         weighted_gini = 0
 *                         for category_num in range(n_categories):
 *                             gini_per_cat=1             # <<<<<<<<<<<<<<
 *                             if count_per_cat[category_num]>0:
 *                                 for class_num in range(self.n_classes):
 */
            __pyx_v_gini_per_cat = 1.0;

            /* "awe_ml/classifier_cython.pyx":1336
 *                         for category_num in range(n_categories):
 *                             gini_per_cat=1
 *                             if count_per_cat[category_num]>0:             # <<<<<<<<<<<<<<
 *                                 for class_num in range(self.n_classes):
 *                                     p_i = <np_float> data_counts[category_num][class_num]/count_per_cat[category_num]
 */
            __pyx_t_2 = (((__pyx_v_count_per_cat[__pyx_v_category_num]) > 0) != 0);
            if (__pyx_t_2) {

              /* "awe_ml/classifier_cython.pyx":1337
 *                             gini_per_cat=1
 *                             if count_per_cat[category_num]>0:
 *                                 for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                                     p_i = <np_float> data_counts[category_num][class_num]/count_per_cat[category_num]
 *                                     gini_per_cat -= p_i**2
 */
              __pyx_t_16 = __pyx_v_self->n_classes;
              __pyx_t_19 = __pyx_t_16;
              for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
                __pyx_v_class_num = __pyx_t_20;

                /* "awe_ml/classifier_cython.pyx":1338
 *                             if count_per_cat[category_num]>0:
 *                                 for class_num in range(self.n_classes):
 *                                     p_i = <np_float> data_counts[category_num][class_num]/count_per_cat[category_num]             # <<<<<<<<<<<<<<
 *                                     gini_per_cat -= p_i**2
 *                             ### could alternatively calculate entropy here #TODO add option for entropy
 */
                __pyx_v_p_i = (((__pyx_t_6awe_ml_17classifier_cython_np_float)((__pyx_v_data_counts[__pyx_v_category_num])[__pyx_v_class_num])) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)(__pyx_v_count_per_cat[__pyx_v_category_num])));

                /* "awe_ml/classifier_cython.pyx":1339
 *                                 for class_num in range(self.n_classes):
 *                                     p_i = <np_float> data_counts[category_num][class_num]/count_per_cat[category_num]
 *                                     gini_per_cat -= p_i**2             # <<<<<<<<<<<<<<
 *                             ### could alternatively calculate entropy here #TODO add option for entropy
 * 
 */
                __pyx_v_gini_per_cat = (__pyx_v_gini_per_cat - pow(__pyx_v_p_i, 2.0));
              }

              /* "awe_ml/classifier_cython.pyx":1336
 *                         for category_num in range(n_categories):
 *                             gini_per_cat=1
 *                             if count_per_cat[category_num]>0:             # <<<<<<<<<<<<<<
 *                                 for class_num in range(self.n_classes):
 *                                     p_i = <np_float> data_counts[category_num][class_num]/count_per_cat[category_num]
 */
            }

            /* "awe_ml/classifier_cython.pyx":1342
 *                             ### could alternatively calculate entropy here #TODO add option for entropy
 * 
 *                             weighted_gini+=  <np_float>count_per_cat[category_num] /total_count*gini_per_cat             # <<<<<<<<<<<<<<
 * 
 *                         gini_by_features[feature_ind]=weighted_gini
 */
            __pyx_v_weighted_gini = (__pyx_v_weighted_gini + ((((__pyx_t_6awe_ml_17classifier_cython_np_float)(__pyx_v_count_per_cat[__pyx_v_category_num])) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_total_count)) * __pyx_v_gini_per_cat));
          }

          /* "awe_ml/classifier_cython.pyx":1344
 *                             weighted_gini+=  <np_float>count_per_cat[category_num] /total_count*gini_per_cat
 * 
 *                         gini_by_features[feature_ind]=weighted_gini             # <<<<<<<<<<<<<<
 * 
 *                 # find the features that minimize the gini coeficcient
 */
          (__pyx_v_gini_by_features[__pyx_v_feature_ind]) = __pyx_v_weighted_gini;
        }
        __pyx_L37:;
      }

      /* "awe_ml/classifier_cython.pyx":1347
 * 
 *                 # find the features that minimize the gini coeficcient
 *                 gini_inds = np.argsort(gini_by_features).astype(NP_LONG)             # <<<<<<<<<<<<<<
 * 
 *                 for feature_ctr in range(self.features_per_node):
 */
      __pyx_t_24 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_25 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_argsort); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_24 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_v_gini_by_features); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __pyx_t_26 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_25))) {
        __pyx_t_26 = PyMethod_GET_SELF(__pyx_t_25);
        if (likely(__pyx_t_26)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_25);
          __Pyx_INCREF(__pyx_t_26);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_25, function);
        }
      }
      if (!__pyx_t_26) {
        __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_25, __pyx_t_24); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 1347, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        __Pyx_GOTREF(__pyx_t_23);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_25)) {
          PyObject *__pyx_temp[2] = {__pyx_t_26, __pyx_t_24};
          __pyx_t_23 = __Pyx_PyFunction_FastCall(__pyx_t_25, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_25)) {
          PyObject *__pyx_temp[2] = {__pyx_t_26, __pyx_t_24};
          __pyx_t_23 = __Pyx_PyCFunction_FastCall(__pyx_t_25, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        } else
        #endif
        {
          __pyx_t_27 = PyTuple_New(1+1); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __Pyx_GIVEREF(__pyx_t_26); PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_26); __pyx_t_26 = NULL;
          __Pyx_GIVEREF(__pyx_t_24);
          PyTuple_SET_ITEM(__pyx_t_27, 0+1, __pyx_t_24);
          __pyx_t_24 = 0;
          __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_25, __pyx_t_27, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      __pyx_t_25 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_astype); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_23 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_LONG); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 1347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_27 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_25))) {
        __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_25);
        if (likely(__pyx_t_27)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_25);
          __Pyx_INCREF(__pyx_t_27);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_25, function);
        }
      }
      if (!__pyx_t_27) {
        __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_t_25, __pyx_t_23); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1347, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        __Pyx_GOTREF(__pyx_t_22);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_25)) {
          PyObject *__pyx_temp[2] = {__pyx_t_27, __pyx_t_23};
          __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_25, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_25)) {
          PyObject *__pyx_temp[2] = {__pyx_t_27, __pyx_t_23};
          __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_25, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
        } else
        #endif
        {
          __pyx_t_24 = PyTuple_New(1+1); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_GIVEREF(__pyx_t_27); PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_27); __pyx_t_27 = NULL;
          __Pyx_GIVEREF(__pyx_t_23);
          PyTuple_SET_ITEM(__pyx_t_24, 0+1, __pyx_t_23);
          __pyx_t_23 = 0;
          __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_25, __pyx_t_24, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1347, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      __pyx_t_28 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_22, PyBUF_WRITABLE); if (unlikely(!__pyx_t_28.memview)) __PYX_ERR(1, 1347, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __pyx_v_gini_inds = __pyx_t_28;
      __pyx_t_28.memview = NULL;
      __pyx_t_28.data = NULL;

      /* "awe_ml/classifier_cython.pyx":1349
 *                 gini_inds = np.argsort(gini_by_features).astype(NP_LONG)
 * 
 *                 for feature_ctr in range(self.features_per_node):             # <<<<<<<<<<<<<<
 *                     feature_num = gini_inds[feature_ctr]
 *                     selected_features.push_back(potential_features[feature_num])
 */
      __pyx_t_3 = __pyx_v_self->features_per_node;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_feature_ctr = __pyx_t_5;

        /* "awe_ml/classifier_cython.pyx":1350
 * 
 *                 for feature_ctr in range(self.features_per_node):
 *                     feature_num = gini_inds[feature_ctr]             # <<<<<<<<<<<<<<
 *                     selected_features.push_back(potential_features[feature_num])
 * 
 */
        __pyx_t_29 = __pyx_v_feature_ctr;
        __pyx_v_feature_num = (*((__pyx_t_6awe_ml_17classifier_cython_np_long *) ( /* dim=0 */ (__pyx_v_gini_inds.data + __pyx_t_29 * __pyx_v_gini_inds.strides[0]) )));

        /* "awe_ml/classifier_cython.pyx":1351
 *                 for feature_ctr in range(self.features_per_node):
 *                     feature_num = gini_inds[feature_ctr]
 *                     selected_features.push_back(potential_features[feature_num])             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        try {
          __pyx_v_selected_features.push_back((__pyx_v_potential_features[__pyx_v_feature_num]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1351, __pyx_L1_error)
        }
      }

      /* "awe_ml/classifier_cython.pyx":1272
 *             childrens_comb_feat_inds = potential_comb_feat_inds
 *         else:
 *             if self.node_split_model =="gini" or self.node_split_model =="gini_random":             # <<<<<<<<<<<<<<
 *                 if self.node_split_model == "gini_random":
 *                     ### randomly choose  subset of features, use  Fisher-Yates shuffle:
 */
      goto __pyx_L17;
    }

    /* "awe_ml/classifier_cython.pyx":1354
 * 
 *             else:
 *                 raise ValueError("Unkown node split model "+str(self.node_split_model))             # <<<<<<<<<<<<<<
 * 
 *             # ########   DEBUG
 */
    /*else*/ {
      __pyx_t_22 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_self->node_split_model); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __pyx_t_25 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unkown_node_split_model, __pyx_t_22); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_25); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1354, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_Raise(__pyx_t_22, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __PYX_ERR(1, 1354, __pyx_L1_error)
    }
    __pyx_L17:;

    /* "awe_ml/classifier_cython.pyx":1361
 * 
 *             # add all possible children for selected features
 *             for feature_num in selected_features: #iterate over features             # <<<<<<<<<<<<<<
 *                 n_categories = self.n_feature_categories_[feature_num]
 *                 comb_features_to_add.clear()
 */
    __pyx_t_14 = __pyx_v_selected_features.begin();
    for (;;) {
      if (!(__pyx_t_14 != __pyx_v_selected_features.end())) break;
      __pyx_t_3 = *__pyx_t_14;
      ++__pyx_t_14;
      __pyx_v_feature_num = __pyx_t_3;

      /* "awe_ml/classifier_cython.pyx":1362
 *             # add all possible children for selected features
 *             for feature_num in selected_features: #iterate over features
 *                 n_categories = self.n_feature_categories_[feature_num]             # <<<<<<<<<<<<<<
 *                 comb_features_to_add.clear()
 * 
 */
      __pyx_v_n_categories = (__pyx_v_self->n_feature_categories_[__pyx_v_feature_num]);

      /* "awe_ml/classifier_cython.pyx":1363
 *             for feature_num in selected_features: #iterate over features
 *                 n_categories = self.n_feature_categories_[feature_num]
 *                 comb_features_to_add.clear()             # <<<<<<<<<<<<<<
 * 
 *                 for category_num in range(n_categories):
 */
      __pyx_v_comb_features_to_add.clear();

      /* "awe_ml/classifier_cython.pyx":1365
 *                 comb_features_to_add.clear()
 * 
 *                 for category_num in range(n_categories):             # <<<<<<<<<<<<<<
 *                     feature_pair.first = feature_num
 *                     feature_pair.second = category_num
 */
      __pyx_t_3 = __pyx_v_n_categories;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_category_num = __pyx_t_5;

        /* "awe_ml/classifier_cython.pyx":1366
 * 
 *                 for category_num in range(n_categories):
 *                     feature_pair.first = feature_num             # <<<<<<<<<<<<<<
 *                     feature_pair.second = category_num
 *                     comb_features_to_add.push_back(self.feature_pair_to_comb_feat_ind[feature_pair])
 */
        __pyx_v_feature_pair.first = __pyx_v_feature_num;

        /* "awe_ml/classifier_cython.pyx":1367
 *                 for category_num in range(n_categories):
 *                     feature_pair.first = feature_num
 *                     feature_pair.second = category_num             # <<<<<<<<<<<<<<
 *                     comb_features_to_add.push_back(self.feature_pair_to_comb_feat_ind[feature_pair])
 *                 # childrens_comb_feat_inds.extend(comb_features_to_add)
 */
        __pyx_v_feature_pair.second = __pyx_v_category_num;

        /* "awe_ml/classifier_cython.pyx":1368
 *                     feature_pair.first = feature_num
 *                     feature_pair.second = category_num
 *                     comb_features_to_add.push_back(self.feature_pair_to_comb_feat_ind[feature_pair])             # <<<<<<<<<<<<<<
 *                 # childrens_comb_feat_inds.extend(comb_features_to_add)
 *                 childrens_comb_feat_inds.insert(childrens_comb_feat_inds.end(), comb_features_to_add.begin(), comb_features_to_add.end())
 */
        try {
          __pyx_v_comb_features_to_add.push_back((__pyx_v_self->feature_pair_to_comb_feat_ind[__pyx_v_feature_pair]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1368, __pyx_L1_error)
        }
      }

      /* "awe_ml/classifier_cython.pyx":1370
 *                     comb_features_to_add.push_back(self.feature_pair_to_comb_feat_ind[feature_pair])
 *                 # childrens_comb_feat_inds.extend(comb_features_to_add)
 *                 childrens_comb_feat_inds.insert(childrens_comb_feat_inds.end(), comb_features_to_add.begin(), comb_features_to_add.end())             # <<<<<<<<<<<<<<
 * 
 *         ###############################################
 */
      try {
        __pyx_v_childrens_comb_feat_inds.insert(__pyx_v_childrens_comb_feat_inds.end(), __pyx_v_comb_features_to_add.begin(), __pyx_v_comb_features_to_add.end());
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1370, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":1361
 * 
 *             # add all possible children for selected features
 *             for feature_num in selected_features: #iterate over features             # <<<<<<<<<<<<<<
 *                 n_categories = self.n_feature_categories_[feature_num]
 *                 comb_features_to_add.clear()
 */
    }
  }
  __pyx_L14:;

  /* "awe_ml/classifier_cython.pyx":1378
 *         cdef vector[vector[np_long] ] data_by_class
 * 
 *         for comb_feat_ind in childrens_comb_feat_inds:             # <<<<<<<<<<<<<<
 *             child_label = parent_label # copy parent label
 * 
 */
  __pyx_t_14 = __pyx_v_childrens_comb_feat_inds.begin();
  for (;;) {
    if (!(__pyx_t_14 != __pyx_v_childrens_comb_feat_inds.end())) break;
    __pyx_t_3 = *__pyx_t_14;
    ++__pyx_t_14;
    __pyx_v_comb_feat_ind = __pyx_t_3;

    /* "awe_ml/classifier_cython.pyx":1379
 * 
 *         for comb_feat_ind in childrens_comb_feat_inds:
 *             child_label = parent_label # copy parent label             # <<<<<<<<<<<<<<
 * 
 *             child_label.push_back(comb_feat_ind) # add child to parent label
 */
    __pyx_v_child_label = __pyx_v_parent_label;

    /* "awe_ml/classifier_cython.pyx":1381
 *             child_label = parent_label # copy parent label
 * 
 *             child_label.push_back(comb_feat_ind) # add child to parent label             # <<<<<<<<<<<<<<
 *             sort(child_label.begin(),child_label.end()) # sort label
 * 
 */
    try {
      __pyx_v_child_label.push_back(__pyx_v_comb_feat_ind);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 1381, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":1382
 * 
 *             child_label.push_back(comb_feat_ind) # add child to parent label
 *             sort(child_label.begin(),child_label.end()) # sort label             # <<<<<<<<<<<<<<
 * 
 *             # check if child node exists and if not, create child node by calling create_and_process_node.
 */
    std::sort<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator>(__pyx_v_child_label.begin(), __pyx_v_child_label.end());

    /* "awe_ml/classifier_cython.pyx":1385
 * 
 *             # check if child node exists and if not, create child node by calling create_and_process_node.
 *             if self.nodes[child_depth].find(child_label)==self.nodes[child_depth].end():             # <<<<<<<<<<<<<<
 * 
 *                 # iterate through data and find all data that has the child feature in it
 */
    __pyx_t_2 = (((__pyx_v_self->nodes[__pyx_v_child_depth]).find(__pyx_v_child_label) == (__pyx_v_self->nodes[__pyx_v_child_depth]).end()) != 0);
    if (__pyx_t_2) {

      /* "awe_ml/classifier_cython.pyx":1388
 * 
 *                 # iterate through data and find all data that has the child feature in it
 *                 feature_pair = self.comb_feat_ind_to_feature_pair[comb_feat_ind]             # <<<<<<<<<<<<<<
 *                 child_feature = feature_pair.first
 *                 child_category = feature_pair.second
 */
      __pyx_v_feature_pair = (__pyx_v_self->comb_feat_ind_to_feature_pair[__pyx_v_comb_feat_ind]);

      /* "awe_ml/classifier_cython.pyx":1389
 *                 # iterate through data and find all data that has the child feature in it
 *                 feature_pair = self.comb_feat_ind_to_feature_pair[comb_feat_ind]
 *                 child_feature = feature_pair.first             # <<<<<<<<<<<<<<
 *                 child_category = feature_pair.second
 *                 #### select data to pass to child
 */
      __pyx_t_3 = __pyx_v_feature_pair.first;
      __pyx_v_child_feature = __pyx_t_3;

      /* "awe_ml/classifier_cython.pyx":1390
 *                 feature_pair = self.comb_feat_ind_to_feature_pair[comb_feat_ind]
 *                 child_feature = feature_pair.first
 *                 child_category = feature_pair.second             # <<<<<<<<<<<<<<
 *                 #### select data to pass to child
 * 
 */
      __pyx_t_3 = __pyx_v_feature_pair.second;
      __pyx_v_child_category = __pyx_t_3;

      /* "awe_ml/classifier_cython.pyx":1394
 * 
 *                 #reset data_by_class to zero
 *                 data_by_class.clear()             # <<<<<<<<<<<<<<
 *                 data_by_class.resize(self.n_classes)
 * 
 */
      __pyx_v_data_by_class.clear();

      /* "awe_ml/classifier_cython.pyx":1395
 *                 #reset data_by_class to zero
 *                 data_by_class.clear()
 *                 data_by_class.resize(self.n_classes)             # <<<<<<<<<<<<<<
 * 
 *                 for class_num in range(self.n_classes):
 */
      try {
        __pyx_v_data_by_class.resize(__pyx_v_self->n_classes);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1395, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":1397
 *                 data_by_class.resize(self.n_classes)
 * 
 *                 for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                     for datum_index in parent_data_by_class[class_num]: # iterate through each data row in each class
 * 
 */
      __pyx_t_3 = __pyx_v_self->n_classes;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_class_num = __pyx_t_5;

        /* "awe_ml/classifier_cython.pyx":1398
 * 
 *                 for class_num in range(self.n_classes):
 *                     for datum_index in parent_data_by_class[class_num]: # iterate through each data row in each class             # <<<<<<<<<<<<<<
 * 
 *                             if self.X[datum_index,child_feature] ==child_category:  #if the category of label[0] in datum is the same as the category, label[1], add data
 */
        __pyx_t_15 = &(__pyx_v_parent_data_by_class[__pyx_v_class_num]);
        __pyx_t_30 = __pyx_t_15->begin();
        for (;;) {
          if (!(__pyx_t_30 != __pyx_t_15->end())) break;
          __pyx_t_6 = *__pyx_t_30;
          ++__pyx_t_30;
          __pyx_v_datum_index = __pyx_t_6;

          /* "awe_ml/classifier_cython.pyx":1400
 *                     for datum_index in parent_data_by_class[class_num]: # iterate through each data row in each class
 * 
 *                             if self.X[datum_index,child_feature] ==child_category:  #if the category of label[0] in datum is the same as the category, label[1], add data             # <<<<<<<<<<<<<<
 *                                                             # automatically excludes NaNs
 *                                 data_by_class[class_num].push_back(datum_index)
 */
          __pyx_t_31 = __pyx_v_datum_index;
          __pyx_t_32 = __pyx_v_child_feature;
          __pyx_t_2 = (((*((__pyx_t_6awe_ml_17classifier_cython_np_long *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_self->X.data + __pyx_t_31 * __pyx_v_self->X.strides[0]) ) + __pyx_t_32 * __pyx_v_self->X.strides[1]) ))) == __pyx_v_child_category) != 0);
          if (__pyx_t_2) {

            /* "awe_ml/classifier_cython.pyx":1402
 *                             if self.X[datum_index,child_feature] ==child_category:  #if the category of label[0] in datum is the same as the category, label[1], add data
 *                                                             # automatically excludes NaNs
 *                                 data_by_class[class_num].push_back(datum_index)             # <<<<<<<<<<<<<<
 * 
 *                 self.create_and_process_node(child_depth, child_label, data_by_class, parent_label, comb_feat_ind)#, parent_depth=parent_depth, parent_label=parent_label)
 */
            try {
              (__pyx_v_data_by_class[__pyx_v_class_num]).push_back(__pyx_v_datum_index);
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 1402, __pyx_L1_error)
            }

            /* "awe_ml/classifier_cython.pyx":1400
 *                     for datum_index in parent_data_by_class[class_num]: # iterate through each data row in each class
 * 
 *                             if self.X[datum_index,child_feature] ==child_category:  #if the category of label[0] in datum is the same as the category, label[1], add data             # <<<<<<<<<<<<<<
 *                                                             # automatically excludes NaNs
 *                                 data_by_class[class_num].push_back(datum_index)
 */
          }

          /* "awe_ml/classifier_cython.pyx":1398
 * 
 *                 for class_num in range(self.n_classes):
 *                     for datum_index in parent_data_by_class[class_num]: # iterate through each data row in each class             # <<<<<<<<<<<<<<
 * 
 *                             if self.X[datum_index,child_feature] ==child_category:  #if the category of label[0] in datum is the same as the category, label[1], add data
 */
        }
      }

      /* "awe_ml/classifier_cython.pyx":1404
 *                                 data_by_class[class_num].push_back(datum_index)
 * 
 *                 self.create_and_process_node(child_depth, child_label, data_by_class, parent_label, comb_feat_ind)#, parent_depth=parent_depth, parent_label=parent_label)             # <<<<<<<<<<<<<<
 * 
 *             else: # child node already exists, add it to node lists
 */
      __pyx_t_22 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->create_and_process_node(__pyx_v_self, __pyx_v_child_depth, __pyx_v_child_label, __pyx_v_data_by_class, __pyx_v_parent_label, __pyx_v_comb_feat_ind); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

      /* "awe_ml/classifier_cython.pyx":1385
 * 
 *             # check if child node exists and if not, create child node by calling create_and_process_node.
 *             if self.nodes[child_depth].find(child_label)==self.nodes[child_depth].end():             # <<<<<<<<<<<<<<
 * 
 *                 # iterate through data and find all data that has the child feature in it
 */
      goto __pyx_L51;
    }

    /* "awe_ml/classifier_cython.pyx":1407
 * 
 *             else: # child node already exists, add it to node lists
 *                 self.add_parent_label(child_label,child_depth,parent_label, comb_feat_ind)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->add_parent_label(__pyx_v_self, __pyx_v_child_label, __pyx_v_child_depth, __pyx_v_parent_label, __pyx_v_comb_feat_ind);
    }
    __pyx_L51:;

    /* "awe_ml/classifier_cython.pyx":1378
 *         cdef vector[vector[np_long] ] data_by_class
 * 
 *         for comb_feat_ind in childrens_comb_feat_inds:             # <<<<<<<<<<<<<<
 *             child_label = parent_label # copy parent label
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1190
 * 
 *     #void
 *     cdef create_children(self,np_long & parent_depth, vector[np_long] & parent_label, vector[vector[np_long] ] & parent_data_by_class):             # <<<<<<<<<<<<<<
 *         """
 *         create a function that can be called recursively to fill in nodes
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __PYX_XDEC_MEMVIEW(&__pyx_t_28, 1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.create_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_gini_inds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1411
 * 
 * 
 *     cdef void add_parent_label(self, vector[np_long] & child_label, np_long & child_depth, vector[np_long] & parent_label, np_long & child_comb_feat_ind):             # <<<<<<<<<<<<<<
 *         """
 *         add parent to child by iterating through possible parents
 */

static void __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_add_parent_label(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_child_label, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_depth, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_parent_label, __pyx_t_6awe_ml_17classifier_cython_np_long &__pyx_v_child_comb_feat_ind) {
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_local_parent_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_feature_ctr;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_child_data;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_2;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_3;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_4;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_5;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_6;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_7;
  __Pyx_RefNannySetupContext("add_parent_label", 0);

  /* "awe_ml/classifier_cython.pyx":1426
 *         cdef vector[np_long] * child_data
 * 
 *         if child_depth<=0:             # <<<<<<<<<<<<<<
 *             return # no parents for top level node
 * 
 */
  __pyx_t_1 = ((__pyx_v_child_depth <= 0) != 0);
  if (__pyx_t_1) {

    /* "awe_ml/classifier_cython.pyx":1427
 * 
 *         if child_depth<=0:
 *             return # no parents for top level node             # <<<<<<<<<<<<<<
 * 
 *         #add child to parent list
 */
    goto __pyx_L0;

    /* "awe_ml/classifier_cython.pyx":1426
 *         cdef vector[np_long] * child_data
 * 
 *         if child_depth<=0:             # <<<<<<<<<<<<<<
 *             return # no parents for top level node
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1430
 * 
 *         #add child to parent list
 *         self.nodes[child_depth-1][parent_label].second.push_back(child_comb_feat_ind)             # <<<<<<<<<<<<<<
 * 
 *         #add parent to child by iterating through possible parents and adding if not present
 */
  try {
    ((__pyx_v_self->nodes[(__pyx_v_child_depth - 1)])[__pyx_v_parent_label]).second.push_back(__pyx_v_child_comb_feat_ind);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1430, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1433
 * 
 *         #add parent to child by iterating through possible parents and adding if not present
 *         child_data = & self.nodes[child_depth][child_label].first             # <<<<<<<<<<<<<<
 *         for parent_num in range(child_depth):
 *             #find index of start of parent label
 */
  __pyx_v_child_data = (&((__pyx_v_self->nodes[__pyx_v_child_depth])[__pyx_v_child_label]).first);

  /* "awe_ml/classifier_cython.pyx":1434
 *         #add parent to child by iterating through possible parents and adding if not present
 *         child_data = & self.nodes[child_depth][child_label].first
 *         for parent_num in range(child_depth):             # <<<<<<<<<<<<<<
 *             #find index of start of parent label
 *             local_parent_ind = self.node_info[child_depth].parents_index_begin+parent_num*self.node_info[child_depth].parents_index_step
 */
  __pyx_t_2 = __pyx_v_child_depth;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_parent_num = __pyx_t_4;

    /* "awe_ml/classifier_cython.pyx":1436
 *         for parent_num in range(child_depth):
 *             #find index of start of parent label
 *             local_parent_ind = self.node_info[child_depth].parents_index_begin+parent_num*self.node_info[child_depth].parents_index_step             # <<<<<<<<<<<<<<
 *             if child_data[0][local_parent_ind]==-1:
 *                 # no parents left, match not found, save parent
 */
    __pyx_v_local_parent_ind = ((__pyx_v_self->node_info[__pyx_v_child_depth]).parents_index_begin + (__pyx_v_parent_num * (__pyx_v_self->node_info[__pyx_v_child_depth]).parents_index_step));

    /* "awe_ml/classifier_cython.pyx":1437
 *             #find index of start of parent label
 *             local_parent_ind = self.node_info[child_depth].parents_index_begin+parent_num*self.node_info[child_depth].parents_index_step
 *             if child_data[0][local_parent_ind]==-1:             # <<<<<<<<<<<<<<
 *                 # no parents left, match not found, save parent
 *                 for parent_feature_ctr in range(self.node_info[child_depth].parents_index_step):
 */
    __pyx_t_1 = ((((__pyx_v_child_data[0])[__pyx_v_local_parent_ind]) == -1L) != 0);
    if (__pyx_t_1) {

      /* "awe_ml/classifier_cython.pyx":1439
 *             if child_data[0][local_parent_ind]==-1:
 *                 # no parents left, match not found, save parent
 *                 for parent_feature_ctr in range(self.node_info[child_depth].parents_index_step):             # <<<<<<<<<<<<<<
 *                     child_data[0][local_parent_ind+parent_feature_ctr]=parent_label[parent_feature_ctr]
 *                 break # we're done
 */
      __pyx_t_5 = (__pyx_v_self->node_info[__pyx_v_child_depth]).parents_index_step;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_parent_feature_ctr = __pyx_t_7;

        /* "awe_ml/classifier_cython.pyx":1440
 *                 # no parents left, match not found, save parent
 *                 for parent_feature_ctr in range(self.node_info[child_depth].parents_index_step):
 *                     child_data[0][local_parent_ind+parent_feature_ctr]=parent_label[parent_feature_ctr]             # <<<<<<<<<<<<<<
 *                 break # we're done
 * 
 */
        ((__pyx_v_child_data[0])[(__pyx_v_local_parent_ind + __pyx_v_parent_feature_ctr)]) = (__pyx_v_parent_label[__pyx_v_parent_feature_ctr]);
      }

      /* "awe_ml/classifier_cython.pyx":1441
 *                 for parent_feature_ctr in range(self.node_info[child_depth].parents_index_step):
 *                     child_data[0][local_parent_ind+parent_feature_ctr]=parent_label[parent_feature_ctr]
 *                 break # we're done             # <<<<<<<<<<<<<<
 * 
 *             ### following code not needed as we're assuming parent has not been added yet
 */
      goto __pyx_L5_break;

      /* "awe_ml/classifier_cython.pyx":1437
 *             #find index of start of parent label
 *             local_parent_ind = self.node_info[child_depth].parents_index_begin+parent_num*self.node_info[child_depth].parents_index_step
 *             if child_data[0][local_parent_ind]==-1:             # <<<<<<<<<<<<<<
 *                 # no parents left, match not found, save parent
 *                 for parent_feature_ctr in range(self.node_info[child_depth].parents_index_step):
 */
    }
  }
  __pyx_L5_break:;

  /* "awe_ml/classifier_cython.pyx":1411
 * 
 * 
 *     cdef void add_parent_label(self, vector[np_long] & child_label, np_long & child_depth, vector[np_long] & parent_label, np_long & child_comb_feat_ind):             # <<<<<<<<<<<<<<
 *         """
 *         add parent to child by iterating through possible parents
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("awe_ml.classifier_cython.AWE_ML_Cython.add_parent_label", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "awe_ml/classifier_cython.pyx":1454
 * 
 *     #void
 *     cdef  create_classifier_tree(self):             # <<<<<<<<<<<<<<
 *         """
 *         # intially create a simple tree of all nodes up to max depth, eventually use more sophisticated feature selection
 */

static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_classifier_tree(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_node_label;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_parent_label;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_current_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_sample_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_data;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_comb_feat_ind;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_data_by_class;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_2;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("create_classifier_tree", 0);

  /* "awe_ml/classifier_cython.pyx":1466
 * 
 *         cdef vector[np_long]  node_label, parent_label #default_node,
 *         cdef np_long current_depth, sample_ind, class_num, n_data, child_comb_feat_ind=0             # <<<<<<<<<<<<<<
 * 
 *         # create top level node
 */
  __pyx_v_child_comb_feat_ind = 0;

  /* "awe_ml/classifier_cython.pyx":1469
 * 
 *         # create top level node
 *         current_depth = 0             # <<<<<<<<<<<<<<
 *         node_label.resize(0)
 *         parent_label = node_label
 */
  __pyx_v_current_depth = 0;

  /* "awe_ml/classifier_cython.pyx":1470
 *         # create top level node
 *         current_depth = 0
 *         node_label.resize(0)             # <<<<<<<<<<<<<<
 *         parent_label = node_label
 * 
 */
  try {
    __pyx_v_node_label.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1470, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1471
 *         current_depth = 0
 *         node_label.resize(0)
 *         parent_label = node_label             # <<<<<<<<<<<<<<
 * 
 *         # sort data into lists by class
 */
  __pyx_v_parent_label = __pyx_v_node_label;

  /* "awe_ml/classifier_cython.pyx":1476
 * 
 *         cdef vector[vector[np_long] ] data_by_class
 *         data_by_class.resize(self.n_classes)             # <<<<<<<<<<<<<<
 * 
 *         n_data = self.X.shape[0]
 */
  try {
    __pyx_v_data_by_class.resize(__pyx_v_self->n_classes);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1476, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1478
 *         data_by_class.resize(self.n_classes)
 * 
 *         n_data = self.X.shape[0]             # <<<<<<<<<<<<<<
 *         for sample_ind in range(n_data):
 *             class_num = self.y[sample_ind]
 */
  __pyx_v_n_data = (__pyx_v_self->X.shape[0]);

  /* "awe_ml/classifier_cython.pyx":1479
 * 
 *         n_data = self.X.shape[0]
 *         for sample_ind in range(n_data):             # <<<<<<<<<<<<<<
 *             class_num = self.y[sample_ind]
 *             data_by_class[class_num].push_back(sample_ind)
 */
  __pyx_t_1 = __pyx_v_n_data;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_sample_ind = __pyx_t_3;

    /* "awe_ml/classifier_cython.pyx":1480
 *         n_data = self.X.shape[0]
 *         for sample_ind in range(n_data):
 *             class_num = self.y[sample_ind]             # <<<<<<<<<<<<<<
 *             data_by_class[class_num].push_back(sample_ind)
 * 
 */
    __pyx_t_4 = __pyx_v_sample_ind;
    __pyx_v_class_num = (*((__pyx_t_6awe_ml_17classifier_cython_np_long *) ( /* dim=0 */ (__pyx_v_self->y.data + __pyx_t_4 * __pyx_v_self->y.strides[0]) )));

    /* "awe_ml/classifier_cython.pyx":1481
 *         for sample_ind in range(n_data):
 *             class_num = self.y[sample_ind]
 *             data_by_class[class_num].push_back(sample_ind)             # <<<<<<<<<<<<<<
 * 
 *         self.create_and_process_node(current_depth,node_label,data_by_class,parent_label,child_comb_feat_ind)#, parent_depth, default_node)
 */
    try {
      (__pyx_v_data_by_class[__pyx_v_class_num]).push_back(__pyx_v_sample_ind);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 1481, __pyx_L1_error)
    }
  }

  /* "awe_ml/classifier_cython.pyx":1483
 *             data_by_class[class_num].push_back(sample_ind)
 * 
 *         self.create_and_process_node(current_depth,node_label,data_by_class,parent_label,child_comb_feat_ind)#, parent_depth, default_node)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->create_and_process_node(__pyx_v_self, __pyx_v_current_depth, __pyx_v_node_label, __pyx_v_data_by_class, __pyx_v_parent_label, __pyx_v_child_comb_feat_ind); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "awe_ml/classifier_cython.pyx":1454
 * 
 *     #void
 *     cdef  create_classifier_tree(self):             # <<<<<<<<<<<<<<
 *         """
 *         # intially create a simple tree of all nodes up to max depth, eventually use more sophisticated feature selection
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.create_classifier_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1488
 * 
 * 
 *     cdef  find_used_feature_combos (self, np_long[:] example, vector[vector[np_long]] & full_tree_indicies_list,             # <<<<<<<<<<<<<<
 *                                    vector[vector[np_long]] & full_tree_to_local_tree_lookup_list,
 *                                     vector[vector[vector[np_long]]] & compressed_comb_feat_ind_child_tree, vector[vector[vector[np_long]]] & compressed_full_tree_ind_child_tree):
 */

static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_used_feature_combos(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __Pyx_memviewslice __pyx_v_example, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_full_tree_indicies_list, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_full_tree_to_local_tree_lookup_list, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &__pyx_v_compressed_comb_feat_ind_child_tree, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &__pyx_v_compressed_full_tree_ind_child_tree) {
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_num;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_feature_pair;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator __pyx_v_label_itr;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_comb_feats_vec;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_level;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator __pyx_v_end_it;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator __pyx_v_used_children_it;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_used_children;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_child_label;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_parent_indicies;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_child_full_tree_indicies;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_child_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_child_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_index_full_tree;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_label_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_tree_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_local_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_local_tree_size;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_full_tree_indicies_ptr;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_full_tree_to_local_tree_indicies_lookup_ptr;
  FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_parent_full_tree_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_2;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_7;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator __pyx_t_8;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::size_type __pyx_t_9;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::size_type __pyx_t_10;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::size_type __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_14;
  __Pyx_FakeReference<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > __pyx_t_15;
  __Pyx_FakeReference<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > __pyx_t_16;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_17;
  __Pyx_RefNannySetupContext("find_used_feature_combos", 0);

  /* "awe_ml/classifier_cython.pyx":1508
 *         cdef vector[np_long] comb_feats_vec
 * 
 *         for feature_num in range(self.n_features): # iterate through all features in the example             # <<<<<<<<<<<<<<
 *             # exclude missing valued features:
 *             if example[feature_num]>=0:
 */
  __pyx_t_1 = __pyx_v_self->n_features;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_feature_num = __pyx_t_3;

    /* "awe_ml/classifier_cython.pyx":1510
 *         for feature_num in range(self.n_features): # iterate through all features in the example
 *             # exclude missing valued features:
 *             if example[feature_num]>=0:             # <<<<<<<<<<<<<<
 *                 #find comb_feat_ind or return -1 if it doesn't exist
 *                 feature_pair.first = feature_num
 */
    __pyx_t_4 = __pyx_v_feature_num;
    __pyx_t_5 = (((*((__pyx_t_6awe_ml_17classifier_cython_np_long *) ( /* dim=0 */ (__pyx_v_example.data + __pyx_t_4 * __pyx_v_example.strides[0]) ))) >= 0) != 0);
    if (__pyx_t_5) {

      /* "awe_ml/classifier_cython.pyx":1512
 *             if example[feature_num]>=0:
 *                 #find comb_feat_ind or return -1 if it doesn't exist
 *                 feature_pair.first = feature_num             # <<<<<<<<<<<<<<
 *                 feature_pair.second = example[feature_num]
 *                 label_itr = self.feature_pair_to_comb_feat_ind.find(feature_pair)
 */
      __pyx_v_feature_pair.first = __pyx_v_feature_num;

      /* "awe_ml/classifier_cython.pyx":1513
 *                 #find comb_feat_ind or return -1 if it doesn't exist
 *                 feature_pair.first = feature_num
 *                 feature_pair.second = example[feature_num]             # <<<<<<<<<<<<<<
 *                 label_itr = self.feature_pair_to_comb_feat_ind.find(feature_pair)
 *                 if label_itr==self.feature_pair_to_comb_feat_ind.end():
 */
      __pyx_t_6 = __pyx_v_feature_num;
      __pyx_v_feature_pair.second = (*((__pyx_t_6awe_ml_17classifier_cython_np_long *) ( /* dim=0 */ (__pyx_v_example.data + __pyx_t_6 * __pyx_v_example.strides[0]) )));

      /* "awe_ml/classifier_cython.pyx":1514
 *                 feature_pair.first = feature_num
 *                 feature_pair.second = example[feature_num]
 *                 label_itr = self.feature_pair_to_comb_feat_ind.find(feature_pair)             # <<<<<<<<<<<<<<
 *                 if label_itr==self.feature_pair_to_comb_feat_ind.end():
 *                     comb_feat_ind = -1
 */
      __pyx_v_label_itr = __pyx_v_self->feature_pair_to_comb_feat_ind.find(__pyx_v_feature_pair);

      /* "awe_ml/classifier_cython.pyx":1515
 *                 feature_pair.second = example[feature_num]
 *                 label_itr = self.feature_pair_to_comb_feat_ind.find(feature_pair)
 *                 if label_itr==self.feature_pair_to_comb_feat_ind.end():             # <<<<<<<<<<<<<<
 *                     comb_feat_ind = -1
 *                     # warn("Feature Num "+str(feature_num)+" with value "+str(example[feature_num])+" has not been seen before, it is being ignored")
 */
      __pyx_t_5 = ((__pyx_v_label_itr == __pyx_v_self->feature_pair_to_comb_feat_ind.end()) != 0);
      if (__pyx_t_5) {

        /* "awe_ml/classifier_cython.pyx":1516
 *                 label_itr = self.feature_pair_to_comb_feat_ind.find(feature_pair)
 *                 if label_itr==self.feature_pair_to_comb_feat_ind.end():
 *                     comb_feat_ind = -1             # <<<<<<<<<<<<<<
 *                     # warn("Feature Num "+str(feature_num)+" with value "+str(example[feature_num])+" has not been seen before, it is being ignored")
 *                 else:
 */
        __pyx_v_comb_feat_ind = -1;

        /* "awe_ml/classifier_cython.pyx":1515
 *                 feature_pair.second = example[feature_num]
 *                 label_itr = self.feature_pair_to_comb_feat_ind.find(feature_pair)
 *                 if label_itr==self.feature_pair_to_comb_feat_ind.end():             # <<<<<<<<<<<<<<
 *                     comb_feat_ind = -1
 *                     # warn("Feature Num "+str(feature_num)+" with value "+str(example[feature_num])+" has not been seen before, it is being ignored")
 */
        goto __pyx_L6;
      }

      /* "awe_ml/classifier_cython.pyx":1519
 *                     # warn("Feature Num "+str(feature_num)+" with value "+str(example[feature_num])+" has not been seen before, it is being ignored")
 *                 else:
 *                     comb_feat_ind = deref(label_itr).second             # <<<<<<<<<<<<<<
 *                     comb_feats_vec.push_back(comb_feat_ind)
 * 
 */
      /*else*/ {
        __pyx_t_7 = (*__pyx_v_label_itr).second;
        __pyx_v_comb_feat_ind = __pyx_t_7;

        /* "awe_ml/classifier_cython.pyx":1520
 *                 else:
 *                     comb_feat_ind = deref(label_itr).second
 *                     comb_feats_vec.push_back(comb_feat_ind)             # <<<<<<<<<<<<<<
 * 
 *         # sort feature list for fast set_intersection later
 */
        try {
          __pyx_v_comb_feats_vec.push_back(__pyx_v_comb_feat_ind);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1520, __pyx_L1_error)
        }
      }
      __pyx_L6:;

      /* "awe_ml/classifier_cython.pyx":1510
 *         for feature_num in range(self.n_features): # iterate through all features in the example
 *             # exclude missing valued features:
 *             if example[feature_num]>=0:             # <<<<<<<<<<<<<<
 *                 #find comb_feat_ind or return -1 if it doesn't exist
 *                 feature_pair.first = feature_num
 */
    }
  }

  /* "awe_ml/classifier_cython.pyx":1523
 * 
 *         # sort feature list for fast set_intersection later
 *         sort(comb_feats_vec.begin(),comb_feats_vec.end())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  std::sort<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator>(__pyx_v_comb_feats_vec.begin(), __pyx_v_comb_feats_vec.end());

  /* "awe_ml/classifier_cython.pyx":1542
 * 
 * 
 *         tree_depth = self.full_tree_vector.size()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_tree_depth = __pyx_v_self->full_tree_vector.size();

  /* "awe_ml/classifier_cython.pyx":1546
 * 
 *         # create lists for values needed for classification
 *         full_tree_to_local_tree_lookup_list.resize(tree_depth) # create a vector of vectors that go from mask indicies to indicies in classification_values             # <<<<<<<<<<<<<<
 *         full_tree_indicies_list.resize(tree_depth)
 *         compressed_comb_feat_ind_child_tree.clear()
 */
  try {
    __pyx_v_full_tree_to_local_tree_lookup_list.resize(__pyx_v_tree_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1546, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1547
 *         # create lists for values needed for classification
 *         full_tree_to_local_tree_lookup_list.resize(tree_depth) # create a vector of vectors that go from mask indicies to indicies in classification_values
 *         full_tree_indicies_list.resize(tree_depth)             # <<<<<<<<<<<<<<
 *         compressed_comb_feat_ind_child_tree.clear()
 *         compressed_comb_feat_ind_child_tree.resize(tree_depth)
 */
  try {
    __pyx_v_full_tree_indicies_list.resize(__pyx_v_tree_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1547, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1548
 *         full_tree_to_local_tree_lookup_list.resize(tree_depth) # create a vector of vectors that go from mask indicies to indicies in classification_values
 *         full_tree_indicies_list.resize(tree_depth)
 *         compressed_comb_feat_ind_child_tree.clear()             # <<<<<<<<<<<<<<
 *         compressed_comb_feat_ind_child_tree.resize(tree_depth)
 *         compressed_full_tree_ind_child_tree.clear()
 */
  __pyx_v_compressed_comb_feat_ind_child_tree.clear();

  /* "awe_ml/classifier_cython.pyx":1549
 *         full_tree_indicies_list.resize(tree_depth)
 *         compressed_comb_feat_ind_child_tree.clear()
 *         compressed_comb_feat_ind_child_tree.resize(tree_depth)             # <<<<<<<<<<<<<<
 *         compressed_full_tree_ind_child_tree.clear()
 *         compressed_full_tree_ind_child_tree.resize(tree_depth)
 */
  try {
    __pyx_v_compressed_comb_feat_ind_child_tree.resize(__pyx_v_tree_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1549, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1550
 *         compressed_comb_feat_ind_child_tree.clear()
 *         compressed_comb_feat_ind_child_tree.resize(tree_depth)
 *         compressed_full_tree_ind_child_tree.clear()             # <<<<<<<<<<<<<<
 *         compressed_full_tree_ind_child_tree.resize(tree_depth)
 * 
 */
  __pyx_v_compressed_full_tree_ind_child_tree.clear();

  /* "awe_ml/classifier_cython.pyx":1551
 *         compressed_comb_feat_ind_child_tree.resize(tree_depth)
 *         compressed_full_tree_ind_child_tree.clear()
 *         compressed_full_tree_ind_child_tree.resize(tree_depth)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_compressed_full_tree_ind_child_tree.resize(__pyx_v_tree_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1551, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1555
 * 
 *         #store the full tree indicies for top level node:
 *         full_tree_indicies_list[0].push_back(0)             # <<<<<<<<<<<<<<
 * 
 *         # for level in range  (tree_depth):
 */
  try {
    (__pyx_v_full_tree_indicies_list[0]).push_back(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1555, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1561
 * 
 *         # determine which feature combos are in the particular example
 *         for level in range(tree_depth):             # <<<<<<<<<<<<<<
 *             # node_labels = self.node_label_list[level]
 *             # print("find_combos1")
 */
  __pyx_t_1 = __pyx_v_tree_depth;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_level = __pyx_t_3;

    /* "awe_ml/classifier_cython.pyx":1565
 *             # print("find_combos1")
 * 
 *             full_tree_indicies_ptr = & full_tree_indicies_list[level]             # <<<<<<<<<<<<<<
 *             if level !=0:# if not on top level, use indicies from previous level to search for children
 *                 parent_full_tree_data = & self.full_tree_vector[level-1]
 */
    __pyx_v_full_tree_indicies_ptr = (&(__pyx_v_full_tree_indicies_list[__pyx_v_level]));

    /* "awe_ml/classifier_cython.pyx":1566
 * 
 *             full_tree_indicies_ptr = & full_tree_indicies_list[level]
 *             if level !=0:# if not on top level, use indicies from previous level to search for children             # <<<<<<<<<<<<<<
 *                 parent_full_tree_data = & self.full_tree_vector[level-1]
 * 
 */
    __pyx_t_5 = ((__pyx_v_level != 0) != 0);
    if (__pyx_t_5) {

      /* "awe_ml/classifier_cython.pyx":1567
 *             full_tree_indicies_ptr = & full_tree_indicies_list[level]
 *             if level !=0:# if not on top level, use indicies from previous level to search for children
 *                 parent_full_tree_data = & self.full_tree_vector[level-1]             # <<<<<<<<<<<<<<
 * 
 *                 # parent_node_labels = self.node_label_list[level-1]
 */
      __pyx_v_parent_full_tree_data = (&(__pyx_v_self->full_tree_vector[(__pyx_v_level - 1)]));

      /* "awe_ml/classifier_cython.pyx":1570
 * 
 *                 # parent_node_labels = self.node_label_list[level-1]
 *                 parent_indicies = full_tree_indicies_list[level-1]             # <<<<<<<<<<<<<<
 *                 full_tree_indicies_ptr[0].clear()
 *                 # print("find_combos2")
 */
      __pyx_v_parent_indicies = (__pyx_v_full_tree_indicies_list[(__pyx_v_level - 1)]);

      /* "awe_ml/classifier_cython.pyx":1571
 *                 # parent_node_labels = self.node_label_list[level-1]
 *                 parent_indicies = full_tree_indicies_list[level-1]
 *                 full_tree_indicies_ptr[0].clear()             # <<<<<<<<<<<<<<
 *                 # print("find_combos2")
 * 
 */
      (__pyx_v_full_tree_indicies_ptr[0]).clear();

      /* "awe_ml/classifier_cython.pyx":1575
 * 
 *                 #iterate through parents
 *                 for parent_index_full_tree in parent_indicies:             # <<<<<<<<<<<<<<
 *                     parent_full_tree_data[0].set_node(parent_index_full_tree) #TODO: make it so that set_node is optional, data can be accessed without it
 *                     child_ptr = & self.children_list[level-1][parent_index_full_tree]
 */
      __pyx_t_8 = __pyx_v_parent_indicies.begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_v_parent_indicies.end())) break;
        __pyx_t_7 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_parent_index_full_tree = __pyx_t_7;

        /* "awe_ml/classifier_cython.pyx":1576
 *                 #iterate through parents
 *                 for parent_index_full_tree in parent_indicies:
 *                     parent_full_tree_data[0].set_node(parent_index_full_tree) #TODO: make it so that set_node is optional, data can be accessed without it             # <<<<<<<<<<<<<<
 *                     child_ptr = & self.children_list[level-1][parent_index_full_tree]
 *                     # print("find_combos2a",parent_index_full_tree,"max size",self.children_list[level-1].size())
 */
        (__pyx_v_parent_full_tree_data[0]).set_node(__pyx_v_parent_index_full_tree);

        /* "awe_ml/classifier_cython.pyx":1577
 *                 for parent_index_full_tree in parent_indicies:
 *                     parent_full_tree_data[0].set_node(parent_index_full_tree) #TODO: make it so that set_node is optional, data can be accessed without it
 *                     child_ptr = & self.children_list[level-1][parent_index_full_tree]             # <<<<<<<<<<<<<<
 *                     # print("find_combos2a",parent_index_full_tree,"max size",self.children_list[level-1].size())
 *                     # print("child_size = ",child_ptr[0].size()," level= ",level)
 */
        __pyx_v_child_ptr = (&((__pyx_v_self->children_list[(__pyx_v_level - 1)])[__pyx_v_parent_index_full_tree]));

        /* "awe_ml/classifier_cython.pyx":1583
 * 
 *                     #find children of each parent and find intersection with features uses
 *                     used_children.resize( min(child_ptr[0].size(),comb_feats_vec.size()))             # <<<<<<<<<<<<<<
 *                     used_children_it = used_children.begin()
 *                     # print(comb_feats_vec)
 */
        __pyx_t_9 = __pyx_v_comb_feats_vec.size();
        __pyx_t_10 = (__pyx_v_child_ptr[0]).size();
        if (((__pyx_t_9 < __pyx_t_10) != 0)) {
          __pyx_t_11 = __pyx_t_9;
        } else {
          __pyx_t_11 = __pyx_t_10;
        }
        try {
          __pyx_v_used_children.resize(__pyx_t_11);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1583, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":1584
 *                     #find children of each parent and find intersection with features uses
 *                     used_children.resize( min(child_ptr[0].size(),comb_feats_vec.size()))
 *                     used_children_it = used_children.begin()             # <<<<<<<<<<<<<<
 *                     # print(comb_feats_vec)
 *                     # print(used_children)
 */
        __pyx_v_used_children_it = __pyx_v_used_children.begin();

        /* "awe_ml/classifier_cython.pyx":1588
 *                     # print(used_children)
 *                     # print(child_ptr[0])
 *                     end_it=set_intersection(child_ptr[0].begin(),child_ptr[0].end(),comb_feats_vec.begin(),comb_feats_vec.end(),used_children_it )             # <<<<<<<<<<<<<<
 *                     used_children.resize(end_it - used_children_it )
 *                     ###### iterate over used children, save label and add to full_tree_indicies vector
 */
        __pyx_v_end_it = std::set_intersection<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator>((__pyx_v_child_ptr[0]).begin(), (__pyx_v_child_ptr[0]).end(), __pyx_v_comb_feats_vec.begin(), __pyx_v_comb_feats_vec.end(), __pyx_v_used_children_it);

        /* "awe_ml/classifier_cython.pyx":1589
 *                     # print(child_ptr[0])
 *                     end_it=set_intersection(child_ptr[0].begin(),child_ptr[0].end(),comb_feats_vec.begin(),comb_feats_vec.end(),used_children_it )
 *                     used_children.resize(end_it - used_children_it )             # <<<<<<<<<<<<<<
 *                     ###### iterate over used children, save label and add to full_tree_indicies vector
 *                     child_full_tree_indicies.clear()
 */
        try {
          __pyx_v_used_children.resize((__pyx_v_end_it - __pyx_v_used_children_it));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1589, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":1591
 *                     used_children.resize(end_it - used_children_it )
 *                     ###### iterate over used children, save label and add to full_tree_indicies vector
 *                     child_full_tree_indicies.clear()             # <<<<<<<<<<<<<<
 *                     while used_children_it != end_it:
 *                         ## copy parent label to child label
 */
        __pyx_v_child_full_tree_indicies.clear();

        /* "awe_ml/classifier_cython.pyx":1592
 *                     ###### iterate over used children, save label and add to full_tree_indicies vector
 *                     child_full_tree_indicies.clear()
 *                     while used_children_it != end_it:             # <<<<<<<<<<<<<<
 *                         ## copy parent label to child label
 *                         child_label.resize(level)
 */
        while (1) {
          __pyx_t_5 = ((__pyx_v_used_children_it != __pyx_v_end_it) != 0);
          if (!__pyx_t_5) break;

          /* "awe_ml/classifier_cython.pyx":1594
 *                     while used_children_it != end_it:
 *                         ## copy parent label to child label
 *                         child_label.resize(level)             # <<<<<<<<<<<<<<
 *                         for label_ind in range(level-1):
 *                             child_label[label_ind]=parent_full_tree_data[0].label[label_ind] #TODO: make it so that set_node is optional, data can be accessed without it
 */
          try {
            __pyx_v_child_label.resize(__pyx_v_level);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1594, __pyx_L1_error)
          }

          /* "awe_ml/classifier_cython.pyx":1595
 *                         ## copy parent label to child label
 *                         child_label.resize(level)
 *                         for label_ind in range(level-1):             # <<<<<<<<<<<<<<
 *                             child_label[label_ind]=parent_full_tree_data[0].label[label_ind] #TODO: make it so that set_node is optional, data can be accessed without it
 *                         ## add child feature to label and sort
 */
          __pyx_t_12 = (__pyx_v_level - 1);
          __pyx_t_13 = __pyx_t_12;
          for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
            __pyx_v_label_ind = __pyx_t_7;

            /* "awe_ml/classifier_cython.pyx":1596
 *                         child_label.resize(level)
 *                         for label_ind in range(level-1):
 *                             child_label[label_ind]=parent_full_tree_data[0].label[label_ind] #TODO: make it so that set_node is optional, data can be accessed without it             # <<<<<<<<<<<<<<
 *                         ## add child feature to label and sort
 *                         child_label[level-1] = deref(used_children_it)
 */
            try {
              __pyx_t_14 = (__pyx_v_parent_full_tree_data[0]).label[__pyx_v_label_ind];
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 1596, __pyx_L1_error)
            }
            (__pyx_v_child_label[__pyx_v_label_ind]) = __pyx_t_14;
          }

          /* "awe_ml/classifier_cython.pyx":1598
 *                             child_label[label_ind]=parent_full_tree_data[0].label[label_ind] #TODO: make it so that set_node is optional, data can be accessed without it
 *                         ## add child feature to label and sort
 *                         child_label[level-1] = deref(used_children_it)             # <<<<<<<<<<<<<<
 *                         sort(child_label.begin(),child_label.end()) # sort child label
 * 
 */
          (__pyx_v_child_label[(__pyx_v_level - 1)]) = (*__pyx_v_used_children_it);

          /* "awe_ml/classifier_cython.pyx":1599
 *                         ## add child feature to label and sort
 *                         child_label[level-1] = deref(used_children_it)
 *                         sort(child_label.begin(),child_label.end()) # sort child label             # <<<<<<<<<<<<<<
 * 
 *                         # find index of said label
 */
          std::sort<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator>(__pyx_v_child_label.begin(), __pyx_v_child_label.end());

          /* "awe_ml/classifier_cython.pyx":1602
 * 
 *                         # find index of said label
 *                         child_index = & self.node_label_to_index_dict_list[level][child_label]             # <<<<<<<<<<<<<<
 * 
 *                         # add index to full_tree_indicies_set
 */
          __pyx_v_child_index = (&((__pyx_v_self->node_label_to_index_dict_list[__pyx_v_level])[__pyx_v_child_label]));

          /* "awe_ml/classifier_cython.pyx":1605
 * 
 *                         # add index to full_tree_indicies_set
 *                         full_tree_indicies_ptr[0].push_back(child_index[0])             # <<<<<<<<<<<<<<
 *                         child_full_tree_indicies.push_back(child_index[0])
 * 
 */
          try {
            (__pyx_v_full_tree_indicies_ptr[0]).push_back((__pyx_v_child_index[0]));
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1605, __pyx_L1_error)
          }

          /* "awe_ml/classifier_cython.pyx":1606
 *                         # add index to full_tree_indicies_set
 *                         full_tree_indicies_ptr[0].push_back(child_index[0])
 *                         child_full_tree_indicies.push_back(child_index[0])             # <<<<<<<<<<<<<<
 * 
 *                         inc(used_children_it)
 */
          try {
            __pyx_v_child_full_tree_indicies.push_back((__pyx_v_child_index[0]));
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1606, __pyx_L1_error)
          }

          /* "awe_ml/classifier_cython.pyx":1608
 *                         child_full_tree_indicies.push_back(child_index[0])
 * 
 *                         inc(used_children_it)             # <<<<<<<<<<<<<<
 *                     #### store children to the parents
 *                     compressed_comb_feat_ind_child_tree.at(level-1).push_back(used_children)
 */
          (void)((++__pyx_v_used_children_it));
        }

        /* "awe_ml/classifier_cython.pyx":1610
 *                         inc(used_children_it)
 *                     #### store children to the parents
 *                     compressed_comb_feat_ind_child_tree.at(level-1).push_back(used_children)             # <<<<<<<<<<<<<<
 *                     compressed_full_tree_ind_child_tree.at(level-1).push_back(child_full_tree_indicies)
 * 
 */
        try {
          __pyx_t_15 = __pyx_v_compressed_comb_feat_ind_child_tree.at((__pyx_v_level - 1));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1610, __pyx_L1_error)
        }
        try {
          __pyx_t_15->push_back(__pyx_v_used_children);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1610, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":1611
 *                     #### store children to the parents
 *                     compressed_comb_feat_ind_child_tree.at(level-1).push_back(used_children)
 *                     compressed_full_tree_ind_child_tree.at(level-1).push_back(child_full_tree_indicies)             # <<<<<<<<<<<<<<
 * 
 *                 # print("find_combos3")
 */
        try {
          __pyx_t_16 = __pyx_v_compressed_full_tree_ind_child_tree.at((__pyx_v_level - 1));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1611, __pyx_L1_error)
        }
        try {
          __pyx_t_16->push_back(__pyx_v_child_full_tree_indicies);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1611, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":1575
 * 
 *                 #iterate through parents
 *                 for parent_index_full_tree in parent_indicies:             # <<<<<<<<<<<<<<
 *                     parent_full_tree_data[0].set_node(parent_index_full_tree) #TODO: make it so that set_node is optional, data can be accessed without it
 *                     child_ptr = & self.children_list[level-1][parent_index_full_tree]
 */
      }

      /* "awe_ml/classifier_cython.pyx":1616
 * 
 *                 # sort and deduplicate full_tree_indicies_ptr
 *                 sort(full_tree_indicies_ptr[0].begin(),full_tree_indicies_ptr[0].end())             # <<<<<<<<<<<<<<
 *                 end_it = unique(full_tree_indicies_ptr[0].begin(),full_tree_indicies_ptr[0].end())
 *                 full_tree_indicies_ptr[0].resize(end_it - full_tree_indicies_ptr[0].begin() )
 */
      std::sort<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator>((__pyx_v_full_tree_indicies_ptr[0]).begin(), (__pyx_v_full_tree_indicies_ptr[0]).end());

      /* "awe_ml/classifier_cython.pyx":1617
 *                 # sort and deduplicate full_tree_indicies_ptr
 *                 sort(full_tree_indicies_ptr[0].begin(),full_tree_indicies_ptr[0].end())
 *                 end_it = unique(full_tree_indicies_ptr[0].begin(),full_tree_indicies_ptr[0].end())             # <<<<<<<<<<<<<<
 *                 full_tree_indicies_ptr[0].resize(end_it - full_tree_indicies_ptr[0].begin() )
 * 
 */
      __pyx_v_end_it = std::unique<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ::iterator>((__pyx_v_full_tree_indicies_ptr[0]).begin(), (__pyx_v_full_tree_indicies_ptr[0]).end());

      /* "awe_ml/classifier_cython.pyx":1618
 *                 sort(full_tree_indicies_ptr[0].begin(),full_tree_indicies_ptr[0].end())
 *                 end_it = unique(full_tree_indicies_ptr[0].begin(),full_tree_indicies_ptr[0].end())
 *                 full_tree_indicies_ptr[0].resize(end_it - full_tree_indicies_ptr[0].begin() )             # <<<<<<<<<<<<<<
 * 
 *             ######### create a vector to translate from mask indicies to compressed classification values indicies
 */
      try {
        (__pyx_v_full_tree_indicies_ptr[0]).resize((__pyx_v_end_it - (__pyx_v_full_tree_indicies_ptr[0]).begin()));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1618, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":1566
 * 
 *             full_tree_indicies_ptr = & full_tree_indicies_list[level]
 *             if level !=0:# if not on top level, use indicies from previous level to search for children             # <<<<<<<<<<<<<<
 *                 parent_full_tree_data = & self.full_tree_vector[level-1]
 * 
 */
    }

    /* "awe_ml/classifier_cython.pyx":1621
 * 
 *             ######### create a vector to translate from mask indicies to compressed classification values indicies
 *             full_tree_to_local_tree_indicies_lookup_ptr = & full_tree_to_local_tree_lookup_list[level]             # <<<<<<<<<<<<<<
 *             # print("level=",level)
 *             # print("n_nodes = ",self.full_tree_vector[level].n_nodes)
 */
    __pyx_v_full_tree_to_local_tree_indicies_lookup_ptr = (&(__pyx_v_full_tree_to_local_tree_lookup_list[__pyx_v_level]));

    /* "awe_ml/classifier_cython.pyx":1624
 *             # print("level=",level)
 *             # print("n_nodes = ",self.full_tree_vector[level].n_nodes)
 *             full_tree_to_local_tree_indicies_lookup_ptr[0].assign(self.full_tree_vector[level].n_nodes,-1)             # <<<<<<<<<<<<<<
 * 
 *             local_tree_size = full_tree_indicies_ptr[0].size()
 */
    try {
      (__pyx_v_full_tree_to_local_tree_indicies_lookup_ptr[0]).assign((__pyx_v_self->full_tree_vector[__pyx_v_level]).n_nodes, -1L);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 1624, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":1626
 *             full_tree_to_local_tree_indicies_lookup_ptr[0].assign(self.full_tree_vector[level].n_nodes,-1)
 * 
 *             local_tree_size = full_tree_indicies_ptr[0].size()             # <<<<<<<<<<<<<<
 *             for local_index in range(local_tree_size):
 *                 full_tree_to_local_tree_indicies_lookup_ptr[0][full_tree_indicies_ptr[0][local_index]]=local_index
 */
    __pyx_v_local_tree_size = (__pyx_v_full_tree_indicies_ptr[0]).size();

    /* "awe_ml/classifier_cython.pyx":1627
 * 
 *             local_tree_size = full_tree_indicies_ptr[0].size()
 *             for local_index in range(local_tree_size):             # <<<<<<<<<<<<<<
 *                 full_tree_to_local_tree_indicies_lookup_ptr[0][full_tree_indicies_ptr[0][local_index]]=local_index
 * 
 */
    __pyx_t_7 = __pyx_v_local_tree_size;
    __pyx_t_14 = __pyx_t_7;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_14; __pyx_t_17+=1) {
      __pyx_v_local_index = __pyx_t_17;

      /* "awe_ml/classifier_cython.pyx":1628
 *             local_tree_size = full_tree_indicies_ptr[0].size()
 *             for local_index in range(local_tree_size):
 *                 full_tree_to_local_tree_indicies_lookup_ptr[0][full_tree_indicies_ptr[0][local_index]]=local_index             # <<<<<<<<<<<<<<
 * 
 *             # print("finished level")
 */
      ((__pyx_v_full_tree_to_local_tree_indicies_lookup_ptr[0])[((__pyx_v_full_tree_indicies_ptr[0])[__pyx_v_local_index])]) = __pyx_v_local_index;
    }
  }

  /* "awe_ml/classifier_cython.pyx":1488
 * 
 * 
 *     cdef  find_used_feature_combos (self, np_long[:] example, vector[vector[np_long]] & full_tree_indicies_list,             # <<<<<<<<<<<<<<
 *                                    vector[vector[np_long]] & full_tree_to_local_tree_lookup_list,
 *                                     vector[vector[vector[np_long]]] & compressed_comb_feat_ind_child_tree, vector[vector[vector[np_long]]] & compressed_full_tree_ind_child_tree):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.find_used_feature_combos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1632
 *             # print("finished level")
 * 
 *     def predict(self, X):             # <<<<<<<<<<<<<<
 *         """
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_13predict(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static char __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_12predict[] = "\n\n        :param X: data to predict on\n        :return: predicted clasees\n        ";
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_13predict(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("predict (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_12predict(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_X));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_12predict(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X) {
  PyObject *__pyx_v_probabilities = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("predict", 0);

  /* "awe_ml/classifier_cython.pyx":1638
 *         :return: predicted clasees
 *         """
 *         probabilities= self.predict_proba(X)             # <<<<<<<<<<<<<<
 *         return self.classify(probabilities)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->predict_proba(__pyx_v_self, __pyx_v_X, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_probabilities = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1639
 *         """
 *         probabilities= self.predict_proba(X)
 *         return self.classify(probabilities)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_classify); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_probabilities); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_probabilities};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1639, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_probabilities};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1639, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_probabilities);
      __Pyx_GIVEREF(__pyx_v_probabilities);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_probabilities);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":1632
 *             # print("finished level")
 * 
 *     def predict(self, X):             # <<<<<<<<<<<<<<
 *         """
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.predict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_probabilities);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1642
 * 
 * 
 *     def classify(self, probabilities= None, threshold = None):             # <<<<<<<<<<<<<<
 *         """
 *         :param probabilities: probabilities on which to classify
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15classify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_14classify[] = "\n        :param probabilities: probabilities on which to classify\n        :param threshold:  Threshold for classifying binary data, if None, 0.5 is used\n        :return:\n        ";
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15classify(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_probabilities = 0;
  PyObject *__pyx_v_threshold = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("classify (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_probabilities,&__pyx_n_s_threshold,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_probabilities);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "classify") < 0)) __PYX_ERR(1, 1642, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_probabilities = values[0];
    __pyx_v_threshold = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("classify", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1642, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.classify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14classify(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), __pyx_v_probabilities, __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14classify(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_probabilities, PyObject *__pyx_v_threshold) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_example = NULL;
  PyObject *__pyx_v_loc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("classify", 0);
  __Pyx_INCREF(__pyx_v_threshold);

  /* "awe_ml/classifier_cython.pyx":1648
 *         :return:
 *         """
 *         result = []             # <<<<<<<<<<<<<<
 * 
 *         if self.n_classes==2:  # use computed threshold if 2 classes.  If more than 2 classes, take class with highest predicted probability
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1650
 *         result = []
 * 
 *         if self.n_classes==2:  # use computed threshold if 2 classes.  If more than 2 classes, take class with highest predicted probability             # <<<<<<<<<<<<<<
 *             if threshold is None:
 *                 threshold = 0.5
 */
  __pyx_t_2 = ((__pyx_v_self->n_classes == 2) != 0);
  if (__pyx_t_2) {

    /* "awe_ml/classifier_cython.pyx":1651
 * 
 *         if self.n_classes==2:  # use computed threshold if 2 classes.  If more than 2 classes, take class with highest predicted probability
 *             if threshold is None:             # <<<<<<<<<<<<<<
 *                 threshold = 0.5
 *             for example in probabilities:
 */
    __pyx_t_2 = (__pyx_v_threshold == Py_None);
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "awe_ml/classifier_cython.pyx":1652
 *         if self.n_classes==2:  # use computed threshold if 2 classes.  If more than 2 classes, take class with highest predicted probability
 *             if threshold is None:
 *                 threshold = 0.5             # <<<<<<<<<<<<<<
 *             for example in probabilities:
 *                 if example[1]>threshold:
 */
      __Pyx_INCREF(__pyx_float_0_5);
      __Pyx_DECREF_SET(__pyx_v_threshold, __pyx_float_0_5);

      /* "awe_ml/classifier_cython.pyx":1651
 * 
 *         if self.n_classes==2:  # use computed threshold if 2 classes.  If more than 2 classes, take class with highest predicted probability
 *             if threshold is None:             # <<<<<<<<<<<<<<
 *                 threshold = 0.5
 *             for example in probabilities:
 */
    }

    /* "awe_ml/classifier_cython.pyx":1653
 *             if threshold is None:
 *                 threshold = 0.5
 *             for example in probabilities:             # <<<<<<<<<<<<<<
 *                 if example[1]>threshold:
 *                     result.append(self.classes_[1])
 */
    if (likely(PyList_CheckExact(__pyx_v_probabilities)) || PyTuple_CheckExact(__pyx_v_probabilities)) {
      __pyx_t_1 = __pyx_v_probabilities; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_probabilities); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1653, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1653, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1653, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1653, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1653, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_example, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "awe_ml/classifier_cython.pyx":1654
 *                 threshold = 0.5
 *             for example in probabilities:
 *                 if example[1]>threshold:             # <<<<<<<<<<<<<<
 *                     result.append(self.classes_[1])
 *                 else:
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_example, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1654, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_v_threshold, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1654, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1654, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_3) {

        /* "awe_ml/classifier_cython.pyx":1655
 *             for example in probabilities:
 *                 if example[1]>threshold:
 *                     result.append(self.classes_[1])             # <<<<<<<<<<<<<<
 *                 else:
 *                     result.append(self.classes_[0])
 */
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_self->classes_, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1655, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 1655, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "awe_ml/classifier_cython.pyx":1654
 *                 threshold = 0.5
 *             for example in probabilities:
 *                 if example[1]>threshold:             # <<<<<<<<<<<<<<
 *                     result.append(self.classes_[1])
 *                 else:
 */
        goto __pyx_L7;
      }

      /* "awe_ml/classifier_cython.pyx":1657
 *                     result.append(self.classes_[1])
 *                 else:
 *                     result.append(self.classes_[0])             # <<<<<<<<<<<<<<
 *         else:
 * 
 */
      /*else*/ {
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_self->classes_, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 1657, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L7:;

      /* "awe_ml/classifier_cython.pyx":1653
 *             if threshold is None:
 *                 threshold = 0.5
 *             for example in probabilities:             # <<<<<<<<<<<<<<
 *                 if example[1]>threshold:
 *                     result.append(self.classes_[1])
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":1650
 *         result = []
 * 
 *         if self.n_classes==2:  # use computed threshold if 2 classes.  If more than 2 classes, take class with highest predicted probability             # <<<<<<<<<<<<<<
 *             if threshold is None:
 *                 threshold = 0.5
 */
    goto __pyx_L3;
  }

  /* "awe_ml/classifier_cython.pyx":1660
 *         else:
 * 
 *             for example in probabilities:             # <<<<<<<<<<<<<<
 *                 loc = np.argmax(example)
 *                 result.append(self.classes_[loc])
 */
  /*else*/ {
    if (likely(PyList_CheckExact(__pyx_v_probabilities)) || PyTuple_CheckExact(__pyx_v_probabilities)) {
      __pyx_t_1 = __pyx_v_probabilities; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_probabilities); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1660, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1660, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1660, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 1660, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1660, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1660, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_example, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "awe_ml/classifier_cython.pyx":1661
 * 
 *             for example in probabilities:
 *                 loc = np.argmax(example)             # <<<<<<<<<<<<<<
 *                 result.append(self.classes_[loc])
 * 
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_argmax); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1661, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_example); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_example};
          __pyx_t_7 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1661, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_7);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_example};
          __pyx_t_7 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1661, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_7);
        } else
        #endif
        {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1661, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_INCREF(__pyx_v_example);
          __Pyx_GIVEREF(__pyx_v_example);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_example);
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1661, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF_SET(__pyx_v_loc, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "awe_ml/classifier_cython.pyx":1662
 *             for example in probabilities:
 *                 loc = np.argmax(example)
 *                 result.append(self.classes_[loc])             # <<<<<<<<<<<<<<
 * 
 *         result = np.array(result)
 */
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_self->classes_, __pyx_v_loc); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 1662, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "awe_ml/classifier_cython.pyx":1660
 *         else:
 * 
 *             for example in probabilities:             # <<<<<<<<<<<<<<
 *                 loc = np.argmax(example)
 *                 result.append(self.classes_[loc])
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "awe_ml/classifier_cython.pyx":1664
 *                 result.append(self.classes_[loc])
 * 
 *         result = np.array(result)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_result};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1664, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_result};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1664, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_result);
      __Pyx_GIVEREF(__pyx_v_result);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_result);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1664, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1665
 * 
 *         result = np.array(result)
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":1642
 * 
 * 
 *     def classify(self, probabilities= None, threshold = None):             # <<<<<<<<<<<<<<
 *         """
 *         :param probabilities: probabilities on which to classify
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.classify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_example);
  __Pyx_XDECREF(__pyx_v_loc);
  __Pyx_XDECREF(__pyx_v_threshold);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1669
 * 
 * 
 *     cdef np_long[:,:] validate_X(self,X):             # <<<<<<<<<<<<<<
 *         """
 *         Checks X for validity and bins input if necessary, and returns integer datatype
 */

static __Pyx_memviewslice __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_validate_X(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X) {
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannySetupContext("validate_X", 0);
  __Pyx_INCREF(__pyx_v_X);

  /* "awe_ml/classifier_cython.pyx":1676
 *         """
 *         # Check if fit had been called
 *         if self.X.size<=0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Trying to predict without calling fit")
 * 
 */
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->X, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "awe_ml/classifier_cython.pyx":1677
 *         # Check if fit had been called
 *         if self.X.size<=0:
 *             raise ValueError("Trying to predict without calling fit")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1677, __pyx_L1_error)

    /* "awe_ml/classifier_cython.pyx":1676
 *         """
 *         # Check if fit had been called
 *         if self.X.size<=0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Trying to predict without calling fit")
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1681
 * 
 *         cdef result
 *         if type(X)!=np.ndarray:             # <<<<<<<<<<<<<<
 *             X=np.array(X)
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_X)), ((PyObject *)__pyx_ptype_5numpy_ndarray), Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1681, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "awe_ml/classifier_cython.pyx":1682
 *         cdef result
 *         if type(X)!=np.ndarray:
 *             X=np.array(X)             # <<<<<<<<<<<<<<
 * 
 *         if len(X.shape)==1:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1682, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1682, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_X};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1682, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_X};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1682, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
        __Pyx_INCREF(__pyx_v_X);
        __Pyx_GIVEREF(__pyx_v_X);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":1681
 * 
 *         cdef result
 *         if type(X)!=np.ndarray:             # <<<<<<<<<<<<<<
 *             X=np.array(X)
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1684
 *             X=np.array(X)
 * 
 *         if len(X.shape)==1:             # <<<<<<<<<<<<<<
 *             X=X[np.newaxis,:]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_6 == 1) != 0);
  if (__pyx_t_3) {

    /* "awe_ml/classifier_cython.pyx":1685
 * 
 *         if len(X.shape)==1:
 *             X=X[np.newaxis,:]             # <<<<<<<<<<<<<<
 * 
 *         # Input validation
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_newaxis); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_slice__7);
    __Pyx_GIVEREF(__pyx_slice__7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_slice__7);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_X, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "awe_ml/classifier_cython.pyx":1684
 *             X=np.array(X)
 * 
 *         if len(X.shape)==1:             # <<<<<<<<<<<<<<
 *             X=X[np.newaxis,:]
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1688
 * 
 *         # Input validation
 *         if X.shape[1]!=self.n_features:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input does not have correct number of features")
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_features); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "awe_ml/classifier_cython.pyx":1689
 *         # Input validation
 *         if X.shape[1]!=self.n_features:
 *             raise ValueError("Input does not have correct number of features")             # <<<<<<<<<<<<<<
 * 
 *         # bin input data if needed
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 1689, __pyx_L1_error)

    /* "awe_ml/classifier_cython.pyx":1688
 * 
 *         # Input validation
 *         if X.shape[1]!=self.n_features:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input does not have correct number of features")
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":1693
 *         # bin input data if needed
 *         ############# bin input data if needed.
 *         if self.nbins>0:             # <<<<<<<<<<<<<<
 *             X = check_array(X,dtype=None,force_all_finite=False)
 *             X = bin_data_given_bins(X,self.categorical_bin_list,self.numeric_bin_list) #returns memview type
 */
  __pyx_t_3 = ((__pyx_v_self->nbins > 0) != 0);
  if (__pyx_t_3) {

    /* "awe_ml/classifier_cython.pyx":1694
 *         ############# bin input data if needed.
 *         if self.nbins>0:
 *             X = check_array(X,dtype=None,force_all_finite=False)             # <<<<<<<<<<<<<<
 *             X = bin_data_given_bins(X,self.categorical_bin_list,self.numeric_bin_list) #returns memview type
 *         else:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_check_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_X);
    __Pyx_GIVEREF(__pyx_v_X);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_X);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, Py_None) < 0) __PYX_ERR(1, 1694, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_force_all_finite, Py_False) < 0) __PYX_ERR(1, 1694, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "awe_ml/classifier_cython.pyx":1695
 *         if self.nbins>0:
 *             X = check_array(X,dtype=None,force_all_finite=False)
 *             X = bin_data_given_bins(X,self.categorical_bin_list,self.numeric_bin_list) #returns memview type             # <<<<<<<<<<<<<<
 *         else:
 *             X = check_array(X)
 */
    __pyx_t_2 = __pyx_v_self->categorical_bin_list;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = __pyx_v_self->numeric_bin_list;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = __pyx_f_6awe_ml_7binning_bin_data_given_bins(__pyx_v_X, ((PyObject*)__pyx_t_2), ((PyObject*)__pyx_t_1), 0); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(1, 1695, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_t_7, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_7binning_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_7binning_np_long, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1695, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;
    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":1693
 *         # bin input data if needed
 *         ############# bin input data if needed.
 *         if self.nbins>0:             # <<<<<<<<<<<<<<
 *             X = check_array(X,dtype=None,force_all_finite=False)
 *             X = bin_data_given_bins(X,self.categorical_bin_list,self.numeric_bin_list) #returns memview type
 */
    goto __pyx_L7;
  }

  /* "awe_ml/classifier_cython.pyx":1697
 *             X = bin_data_given_bins(X,self.categorical_bin_list,self.numeric_bin_list) #returns memview type
 *         else:
 *             X = check_array(X)             # <<<<<<<<<<<<<<
 *             X=X.astype(NP_LONG, copy=False)  #convert to integer type.  Binning automatically converts to integer type
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_check_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1697, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1697, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_X);
        __Pyx_GIVEREF(__pyx_v_X);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1697, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "awe_ml/classifier_cython.pyx":1698
 *         else:
 *             X = check_array(X)
 *             X=X.astype(NP_LONG, copy=False)  #convert to integer type.  Binning automatically converts to integer type             # <<<<<<<<<<<<<<
 * 
 *         return X
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_X, __pyx_n_s_astype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_LONG); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_copy, Py_False) < 0) __PYX_ERR(1, 1698, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_X, __pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L7:;

  /* "awe_ml/classifier_cython.pyx":1700
 *             X=X.astype(NP_LONG, copy=False)  #convert to integer type.  Binning automatically converts to integer type
 * 
 *         return X             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_X, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1700, __pyx_L1_error)
  __pyx_r = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":1669
 * 
 * 
 *     cdef np_long[:,:] validate_X(self,X):             # <<<<<<<<<<<<<<
 *         """
 *         Checks X for validity and bins input if necessary, and returns integer datatype
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.validate_X", __pyx_clineno, __pyx_lineno, __pyx_filename);

  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_X);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1703
 * 
 * 
 *     cpdef predict_proba(self, X):             # <<<<<<<<<<<<<<
 *         """
 *         returns the probability of each class
 */

static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17predict_proba(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_predict_proba(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X, int __pyx_skip_dispatch) {
  __Pyx_memviewslice __pyx_v_X_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_example = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_probability_array = NULL;
  PyArrayObject *__pyx_v_single_result = 0;
  CYTHON_UNUSED PyObject *__pyx_v_ind = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_single_result;
  __Pyx_Buffer __pyx_pybuffer_single_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("predict_proba", 0);
  __pyx_pybuffer_single_result.pybuffer.buf = NULL;
  __pyx_pybuffer_single_result.refcount = 0;
  __pyx_pybuffernd_single_result.data = NULL;
  __pyx_pybuffernd_single_result.rcbuffer = &__pyx_pybuffer_single_result;
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_predict_proba); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17predict_proba)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1703, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1703, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_X};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1703, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_X);
          __Pyx_GIVEREF(__pyx_v_X);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_X);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1703, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":1717
 * 
 * 
 *         X_view =self.validate_X(X)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->validate_X(__pyx_v_self, __pyx_v_X); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 1717, __pyx_L1_error)
  __pyx_v_X_view = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "awe_ml/classifier_cython.pyx":1726
 *         # else:
 * 
 *         probability_array = []             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np_float, ndim=1] single_result
 *         for ind, example in enumerate(X_view): # iterate through all the rows in the data
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_probability_array = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1728
 *         probability_array = []
 *         cdef np.ndarray[np_float, ndim=1] single_result
 *         for ind, example in enumerate(X_view): # iterate through all the rows in the data             # <<<<<<<<<<<<<<
 *             single_result = self.find_probability(example)
 *             single_result = single_result/np.sum(single_result) # normalize probabilities to sum to 1
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_X_view, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1728, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1728, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1728, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1728, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1728, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(1, 1728, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_XDEC_MEMVIEW(&__pyx_v_example, 1);
    __pyx_v_example = __pyx_t_9;
    __pyx_t_9.memview = NULL;
    __pyx_t_9.data = NULL;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_ind, __pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "awe_ml/classifier_cython.pyx":1729
 *         cdef np.ndarray[np_float, ndim=1] single_result
 *         for ind, example in enumerate(X_view): # iterate through all the rows in the data
 *             single_result = self.find_probability(example)             # <<<<<<<<<<<<<<
 *             single_result = single_result/np.sum(single_result) # normalize probabilities to sum to 1
 *             probability_array.append(single_result)
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->find_probability(__pyx_v_self, __pyx_v_example, 0, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1729, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer);
      __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_10 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer, (PyObject*)__pyx_v_single_result, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        }
        __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
      }
      __pyx_pybuffernd_single_result.diminfo[0].strides = __pyx_pybuffernd_single_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_single_result.diminfo[0].shape = __pyx_pybuffernd_single_result.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1729, __pyx_L1_error)
    }
    __Pyx_XDECREF_SET(__pyx_v_single_result, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "awe_ml/classifier_cython.pyx":1730
 *         for ind, example in enumerate(X_view): # iterate through all the rows in the data
 *             single_result = self.find_probability(example)
 *             single_result = single_result/np.sum(single_result) # normalize probabilities to sum to 1             # <<<<<<<<<<<<<<
 *             probability_array.append(single_result)
 * 
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_single_result)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1730, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_single_result)};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1730, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_single_result)};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1730, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1730, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_single_result));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_single_result));
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, ((PyObject *)__pyx_v_single_result));
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1730, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_single_result), __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1730, __pyx_L1_error)
    __pyx_t_15 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer);
      __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_10 < 0)) {
        PyErr_Fetch(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer, (PyObject*)__pyx_v_single_result, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_13, __pyx_t_12, __pyx_t_11);
        }
        __pyx_t_13 = __pyx_t_12 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_single_result.diminfo[0].strides = __pyx_pybuffernd_single_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_single_result.diminfo[0].shape = __pyx_pybuffernd_single_result.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 1730, __pyx_L1_error)
    }
    __pyx_t_15 = 0;
    __Pyx_DECREF_SET(__pyx_v_single_result, ((PyArrayObject *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "awe_ml/classifier_cython.pyx":1731
 *             single_result = self.find_probability(example)
 *             single_result = single_result/np.sum(single_result) # normalize probabilities to sum to 1
 *             probability_array.append(single_result)             # <<<<<<<<<<<<<<
 * 
 *         return np.array(probability_array)
 */
    __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_probability_array, ((PyObject *)__pyx_v_single_result)); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(1, 1731, __pyx_L1_error)

    /* "awe_ml/classifier_cython.pyx":1728
 *         probability_array = []
 *         cdef np.ndarray[np_float, ndim=1] single_result
 *         for ind, example in enumerate(X_view): # iterate through all the rows in the data             # <<<<<<<<<<<<<<
 *             single_result = self.find_probability(example)
 *             single_result = single_result/np.sum(single_result) # normalize probabilities to sum to 1
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1733
 *             probability_array.append(single_result)
 * 
 *         return np.array(probability_array)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_probability_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_probability_array};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1733, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_probability_array};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1733, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_probability_array);
      __Pyx_GIVEREF(__pyx_v_probability_array);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_probability_array);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":1703
 * 
 * 
 *     cpdef predict_proba(self, X):             # <<<<<<<<<<<<<<
 *         """
 *         returns the probability of each class
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_9, 1);
  __Pyx_XDECREF(__pyx_t_14);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.predict_proba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_single_result.rcbuffer->pybuffer);
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_view, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_example, 1);
  __Pyx_XDECREF(__pyx_v_probability_array);
  __Pyx_XDECREF((PyObject *)__pyx_v_single_result);
  __Pyx_XDECREF(__pyx_v_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17predict_proba(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static char __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_16predict_proba[] = "\n        returns the probability of each class\n        :param X:\n        :type X: np.ndarray\n        :return:\n        ";
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17predict_proba(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("predict_proba (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16predict_proba(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_X));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16predict_proba(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_X) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("predict_proba", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_predict_proba(__pyx_v_self, __pyx_v_X, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.predict_proba", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":1737
 * 
 * 
 *     cpdef np.ndarray[np_float, ndim=1] find_probability(self, np_long[:] example, bint save_intermediates = False):             # <<<<<<<<<<<<<<
 *         """
 *         run classifier and find probability given a single example
 */

static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19find_probability(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyArrayObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __Pyx_memviewslice __pyx_v_example, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability *__pyx_optional_args) {
  int __pyx_v_save_intermediates = ((int)0);
  std::string __pyx_v_usefulness_model;
  std::string __pyx_v_probability_scaling_method;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_full_tree_indicies_list;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_full_tree_to_local_tree_lookup_list;
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_compressed_comb_feat_ind_child_tree;
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_compressed_full_tree_ind_child_tree;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_level;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_full_tree_indicies;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_parent_full_tree_to_local_tree_lookup;
  FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_child_full_tree_data;
  FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_parent_full_tree_data;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_local_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_full_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_local_tree_size;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_index_full_tree;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_index_local;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_total_count;
  int __pyx_v_need_to_compute_noise_ratio;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_weight;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_child_noise;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_weight2;
  ClassificationValues<__pyx_t_6awe_ml_17classifier_cython_np_float>  *__pyx_v_classification_values;
  ClassificationValues<__pyx_t_6awe_ml_17classifier_cython_np_float>  *__pyx_v_parent_classification_values;
  std::vector<ClassificationValues<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_v_classification_values_list;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_tree_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_noise_exponent2_validated;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_child_comb_feat_ind_list_ptr;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_child_full_tree_ind_list_ptr;
  PyArrayObject *__pyx_v_independence_array = 0;
  PyObject *__pyx_v_independence_list = 0;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_correlation_sum;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_independence;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_child_feature_list;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_comb_feat;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_children;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_local_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_local_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_full_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_index_ctr;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_feature_num_pair;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float> ::iterator __pyx_v_corr_iter;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_noise_ratio;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_child_scaling_weight;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_usefulness_vec;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_child_scaled_p;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_parent_scaled_p;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_top_p0;
  PyArrayObject *__pyx_v_return_values = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_independence_array;
  __Pyx_Buffer __pyx_pybuffer_independence_array;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  std::string __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_12;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_13;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_14;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_15;
  PyArrayObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_23;
  __Pyx_FakeReference<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > __pyx_t_24;
  __Pyx_FakeReference<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_25;
  __Pyx_FakeReference<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > __pyx_t_26;
  __Pyx_FakeReference<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > __pyx_t_27;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_28;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_29;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_30;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_31;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_32;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_33;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_34;
  __Pyx_FakeReference<__pyx_t_6awe_ml_17classifier_cython_np_long> __pyx_t_35;
  long __pyx_t_36;
  long __pyx_t_37;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_38;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_39;
  __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_t_40;
  __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_t_41;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_42;
  __Pyx_RefNannySetupContext("find_probability", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_save_intermediates = __pyx_optional_args->save_intermediates;
    }
  }
  __pyx_pybuffer_independence_array.pybuffer.buf = NULL;
  __pyx_pybuffer_independence_array.refcount = 0;
  __pyx_pybuffernd_independence_array.data = NULL;
  __pyx_pybuffernd_independence_array.rcbuffer = &__pyx_pybuffer_independence_array;
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_find_probability); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19find_probability)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_example, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_save_intermediates); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1737, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1737, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1737, __pyx_L1_error)
      __pyx_r = ((PyArrayObject *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":1748
 *         #############
 *         # set references to the appropriate scaling & usefulness functions  (make it easier for c++ compiler?)
 *         cdef  string usefulness_model = self.usefulness_model.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef  string probability_scaling_method = self.probability_scaling_method.encode('UTF-8')
 * 
 */
  if (unlikely(__pyx_v_self->usefulness_model == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(1, 1748, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_self->usefulness_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1748, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_usefulness_model = __pyx_t_9;

  /* "awe_ml/classifier_cython.pyx":1749
 *         # set references to the appropriate scaling & usefulness functions  (make it easier for c++ compiler?)
 *         cdef  string usefulness_model = self.usefulness_model.encode('UTF-8')
 *         cdef  string probability_scaling_method = self.probability_scaling_method.encode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->probability_scaling_method == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(1, 1749, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_self->probability_scaling_method); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1749, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_probability_scaling_method = __pyx_t_9;

  /* "awe_ml/classifier_cython.pyx":1759
 *                                                         # use two vectors to save computation at the expense of memory
 * 
 *         self.find_used_feature_combos(example, full_tree_indicies_list, full_tree_to_local_tree_lookup_list, compressed_comb_feat_ind_child_tree,compressed_full_tree_ind_child_tree)             # <<<<<<<<<<<<<<
 * 
 *         #####################
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->find_used_feature_combos(__pyx_v_self, __pyx_v_example, __pyx_v_full_tree_indicies_list, __pyx_v_full_tree_to_local_tree_lookup_list, __pyx_v_compressed_comb_feat_ind_child_tree, __pyx_v_compressed_full_tree_ind_child_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1779
 *         cdef ClassificationValues[np_float] * parent_classification_values
 *         cdef vector[ClassificationValues[np_float]] classification_values_list
 *         cdef np_long tree_depth = full_tree_indicies_list.size()             # <<<<<<<<<<<<<<
 *         cdef np_float noise_exponent2_validated
 * 
 */
  __pyx_v_tree_depth = __pyx_v_full_tree_indicies_list.size();

  /* "awe_ml/classifier_cython.pyx":1782
 *         cdef np_float noise_exponent2_validated
 * 
 *         if self.noise_exponent2 is None:             # <<<<<<<<<<<<<<
 *             noise_exponent2_validated = self.noise_exponent
 *         else:
 */
  __pyx_t_10 = (__pyx_v_self->noise_exponent2 == Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":1783
 * 
 *         if self.noise_exponent2 is None:
 *             noise_exponent2_validated = self.noise_exponent             # <<<<<<<<<<<<<<
 *         else:
 *             noise_exponent2_validated = self.noise_exponent2
 */
    __pyx_t_12 = __pyx_v_self->noise_exponent;
    __pyx_v_noise_exponent2_validated = __pyx_t_12;

    /* "awe_ml/classifier_cython.pyx":1782
 *         cdef np_float noise_exponent2_validated
 * 
 *         if self.noise_exponent2 is None:             # <<<<<<<<<<<<<<
 *             noise_exponent2_validated = self.noise_exponent
 *         else:
 */
    goto __pyx_L3;
  }

  /* "awe_ml/classifier_cython.pyx":1785
 *             noise_exponent2_validated = self.noise_exponent
 *         else:
 *             noise_exponent2_validated = self.noise_exponent2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_self->noise_exponent2); if (unlikely((__pyx_t_12 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1785, __pyx_L1_error)
    __pyx_v_noise_exponent2_validated = __pyx_t_12;
  }
  __pyx_L3:;

  /* "awe_ml/classifier_cython.pyx":1793
 *         cdef vector[np_long] * child_full_tree_ind_list_ptr
 *         cdef np.ndarray[np_float, ndim=2] independence_array
 *         cdef list independence_list = []             # <<<<<<<<<<<<<<
 *         cdef np_float child, correlation_sum, independence
 *         cdef vector[np_long] child_feature_list
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_independence_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1802
 *         # print(self.correlation_map)
 * 
 *         if self.independence_model_c!=b"none":             # <<<<<<<<<<<<<<
 *             #intialize independence list
 *             for level in range(tree_depth):
 */
  __pyx_t_11 = ((__pyx_v_self->independence_model_c != ((char const *)"none")) != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":1804
 *         if self.independence_model_c!=b"none":
 *             #intialize independence list
 *             for level in range(tree_depth):             # <<<<<<<<<<<<<<
 *                 if level==0:
 *                     independence_array = np.full( (1,1),1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1
 */
    __pyx_t_13 = __pyx_v_tree_depth;
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_level = __pyx_t_15;

      /* "awe_ml/classifier_cython.pyx":1805
 *             #intialize independence list
 *             for level in range(tree_depth):
 *                 if level==0:             # <<<<<<<<<<<<<<
 *                     independence_array = np.full( (1,1),1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1
 *                 else:
 */
      __pyx_t_11 = ((__pyx_v_level == 0) != 0);
      if (__pyx_t_11) {

        /* "awe_ml/classifier_cython.pyx":1806
 *             for level in range(tree_depth):
 *                 if level==0:
 *                     independence_array = np.full( (1,1),1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1             # <<<<<<<<<<<<<<
 *                 else:
 *                     local_tree_size = full_tree_indicies_list[level].size()
 */
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_full); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order, __pyx_n_u_C) < 0) __PYX_ERR(1, 1806, __pyx_L1_error)
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_FLOAT); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1806, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__10, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1806, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1806, __pyx_L1_error)
        __pyx_t_16 = ((PyArrayObject *)__pyx_t_5);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer);
          __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
          if (unlikely(__pyx_t_7 < 0)) {
            PyErr_Fetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_independence_array, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_19);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
            }
            __pyx_t_17 = __pyx_t_18 = __pyx_t_19 = 0;
          }
          __pyx_pybuffernd_independence_array.diminfo[0].strides = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_independence_array.diminfo[0].shape = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_independence_array.diminfo[1].strides = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_independence_array.diminfo[1].shape = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.shape[1];
          if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1806, __pyx_L1_error)
        }
        __pyx_t_16 = 0;
        __Pyx_XDECREF_SET(__pyx_v_independence_array, ((PyArrayObject *)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "awe_ml/classifier_cython.pyx":1805
 *             #intialize independence list
 *             for level in range(tree_depth):
 *                 if level==0:             # <<<<<<<<<<<<<<
 *                     independence_array = np.full( (1,1),1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1
 *                 else:
 */
        goto __pyx_L7;
      }

      /* "awe_ml/classifier_cython.pyx":1808
 *                     independence_array = np.full( (1,1),1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1
 *                 else:
 *                     local_tree_size = full_tree_indicies_list[level].size()             # <<<<<<<<<<<<<<
 *                     independence_array = np.full( (local_tree_size,level),-1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1
 *                 independence_list.append(independence_array)
 */
      /*else*/ {
        __pyx_v_local_tree_size = (__pyx_v_full_tree_indicies_list[__pyx_v_level]).size();

        /* "awe_ml/classifier_cython.pyx":1809
 *                 else:
 *                     local_tree_size = full_tree_indicies_list[level].size()
 *                     independence_array = np.full( (local_tree_size,level),-1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1             # <<<<<<<<<<<<<<
 *                 independence_list.append(independence_array)
 * 
 */
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_npy_int32(__pyx_v_local_tree_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
        __pyx_t_5 = 0;
        __pyx_t_2 = 0;
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8);
        __Pyx_INCREF(__pyx_int_neg_1);
        __Pyx_GIVEREF(__pyx_int_neg_1);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_neg_1);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_order, __pyx_n_u_C) < 0) __PYX_ERR(1, 1809, __pyx_L1_error)
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_FLOAT); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1809, __pyx_L1_error)
        __pyx_t_16 = ((PyArrayObject *)__pyx_t_5);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer);
          __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
          if (unlikely(__pyx_t_7 < 0)) {
            PyErr_Fetch(&__pyx_t_19, &__pyx_t_18, &__pyx_t_17);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_independence_array, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_19); Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_17);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_19, __pyx_t_18, __pyx_t_17);
            }
            __pyx_t_19 = __pyx_t_18 = __pyx_t_17 = 0;
          }
          __pyx_pybuffernd_independence_array.diminfo[0].strides = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_independence_array.diminfo[0].shape = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_independence_array.diminfo[1].strides = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_independence_array.diminfo[1].shape = __pyx_pybuffernd_independence_array.rcbuffer->pybuffer.shape[1];
          if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 1809, __pyx_L1_error)
        }
        __pyx_t_16 = 0;
        __Pyx_XDECREF_SET(__pyx_v_independence_array, ((PyArrayObject *)__pyx_t_5));
        __pyx_t_5 = 0;
      }
      __pyx_L7:;

      /* "awe_ml/classifier_cython.pyx":1810
 *                     local_tree_size = full_tree_indicies_list[level].size()
 *                     independence_array = np.full( (local_tree_size,level),-1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1
 *                 independence_list.append(independence_array)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_independence_list, ((PyObject *)__pyx_v_independence_array)); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(1, 1810, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":1816
 *             # for level in [0]:
 * 
 *             for level in range(tree_depth-1):             # <<<<<<<<<<<<<<
 *                 # print("level=",level)
 *                 local_tree_size = full_tree_indicies_list[level].size()
 */
    __pyx_t_21 = (__pyx_v_tree_depth - 1);
    __pyx_t_22 = __pyx_t_21;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_22; __pyx_t_13+=1) {
      __pyx_v_level = __pyx_t_13;

      /* "awe_ml/classifier_cython.pyx":1818
 *             for level in range(tree_depth-1):
 *                 # print("level=",level)
 *                 local_tree_size = full_tree_indicies_list[level].size()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_local_tree_size = (__pyx_v_full_tree_indicies_list[__pyx_v_level]).size();

      /* "awe_ml/classifier_cython.pyx":1822
 * 
 *                 ########  iterate through each used parent node at the given level and compute independence for its children:
 *                 for parent_local_tree_index in range(local_tree_size):             # <<<<<<<<<<<<<<
 *                     # print("parent_local_tree_index=",parent_local_tree_index)
 * 
 */
      __pyx_t_14 = __pyx_v_local_tree_size;
      __pyx_t_15 = __pyx_t_14;
      for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_15; __pyx_t_23+=1) {
        __pyx_v_parent_local_tree_index = __pyx_t_23;

        /* "awe_ml/classifier_cython.pyx":1826
 * 
 * 
 *                     child_comb_feat_ind_list_ptr = & compressed_comb_feat_ind_child_tree.at(level).at(parent_local_tree_index)             # <<<<<<<<<<<<<<
 *                     child_full_tree_ind_list_ptr = & compressed_full_tree_ind_child_tree.at(level).at(parent_local_tree_index)
 *                     n_children = child_comb_feat_ind_list_ptr[0].size()
 */
        try {
          __pyx_t_24 = __pyx_v_compressed_comb_feat_ind_child_tree.at(__pyx_v_level);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1826, __pyx_L1_error)
        }
        try {
          __pyx_t_25 = __pyx_t_24->at(__pyx_v_parent_local_tree_index);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1826, __pyx_L1_error)
        }
        __pyx_v_child_comb_feat_ind_list_ptr = (&__pyx_t_25);

        /* "awe_ml/classifier_cython.pyx":1827
 * 
 *                     child_comb_feat_ind_list_ptr = & compressed_comb_feat_ind_child_tree.at(level).at(parent_local_tree_index)
 *                     child_full_tree_ind_list_ptr = & compressed_full_tree_ind_child_tree.at(level).at(parent_local_tree_index)             # <<<<<<<<<<<<<<
 *                     n_children = child_comb_feat_ind_list_ptr[0].size()
 * 
 */
        try {
          __pyx_t_26 = __pyx_v_compressed_full_tree_ind_child_tree.at(__pyx_v_level);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1827, __pyx_L1_error)
        }
        try {
          __pyx_t_27 = __pyx_t_26->at(__pyx_v_parent_local_tree_index);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1827, __pyx_L1_error)
        }
        __pyx_v_child_full_tree_ind_list_ptr = (&__pyx_t_27);

        /* "awe_ml/classifier_cython.pyx":1828
 *                     child_comb_feat_ind_list_ptr = & compressed_comb_feat_ind_child_tree.at(level).at(parent_local_tree_index)
 *                     child_full_tree_ind_list_ptr = & compressed_full_tree_ind_child_tree.at(level).at(parent_local_tree_index)
 *                     n_children = child_comb_feat_ind_list_ptr[0].size()             # <<<<<<<<<<<<<<
 * 
 *                     # find feature nums for all children
 */
        __pyx_v_n_children = (__pyx_v_child_comb_feat_ind_list_ptr[0]).size();

        /* "awe_ml/classifier_cython.pyx":1831
 * 
 *                     # find feature nums for all children
 *                     child_feature_list.clear()             # <<<<<<<<<<<<<<
 * 
 *                     for child_ctr in range(n_children ): #child is a full tree index
 */
        __pyx_v_child_feature_list.clear();

        /* "awe_ml/classifier_cython.pyx":1833
 *                     child_feature_list.clear()
 * 
 *                     for child_ctr in range(n_children ): #child is a full tree index             # <<<<<<<<<<<<<<
 *                         child_comb_feat = child_comb_feat_ind_list_ptr[0][child_ctr]
 *                         child_feature_list.push_back(child_comb_feat )
 */
        __pyx_t_28 = __pyx_v_n_children;
        __pyx_t_29 = __pyx_t_28;
        for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
          __pyx_v_child_ctr = __pyx_t_30;

          /* "awe_ml/classifier_cython.pyx":1834
 * 
 *                     for child_ctr in range(n_children ): #child is a full tree index
 *                         child_comb_feat = child_comb_feat_ind_list_ptr[0][child_ctr]             # <<<<<<<<<<<<<<
 *                         child_feature_list.push_back(child_comb_feat )
 * 
 */
          __pyx_v_child_comb_feat = ((__pyx_v_child_comb_feat_ind_list_ptr[0])[__pyx_v_child_ctr]);

          /* "awe_ml/classifier_cython.pyx":1835
 *                     for child_ctr in range(n_children ): #child is a full tree index
 *                         child_comb_feat = child_comb_feat_ind_list_ptr[0][child_ctr]
 *                         child_feature_list.push_back(child_comb_feat )             # <<<<<<<<<<<<<<
 * 
 *                     # iterate over each child
 */
          try {
            __pyx_v_child_feature_list.push_back(__pyx_v_child_comb_feat);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1835, __pyx_L1_error)
          }
        }

        /* "awe_ml/classifier_cython.pyx":1839
 *                     # iterate over each child
 *                     # print("n children=",n_children)
 *                     for child_ctr in range(n_children ): #child is a full tree index             # <<<<<<<<<<<<<<
 *                         # print("child_ctr=",child_ctr)
 *                         child_full_tree_index = child_full_tree_ind_list_ptr[0][child_ctr]
 */
        __pyx_t_28 = __pyx_v_n_children;
        __pyx_t_29 = __pyx_t_28;
        for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
          __pyx_v_child_ctr = __pyx_t_30;

          /* "awe_ml/classifier_cython.pyx":1841
 *                     for child_ctr in range(n_children ): #child is a full tree index
 *                         # print("child_ctr=",child_ctr)
 *                         child_full_tree_index = child_full_tree_ind_list_ptr[0][child_ctr]             # <<<<<<<<<<<<<<
 *                         # iterate all feature nums and sum correlation values
 *                         correlation_sum=0
 */
          __pyx_v_child_full_tree_index = ((__pyx_v_child_full_tree_ind_list_ptr[0])[__pyx_v_child_ctr]);

          /* "awe_ml/classifier_cython.pyx":1843
 *                         child_full_tree_index = child_full_tree_ind_list_ptr[0][child_ctr]
 *                         # iterate all feature nums and sum correlation values
 *                         correlation_sum=0             # <<<<<<<<<<<<<<
 *                         for feature_ctr in range(n_children):
 *                             if child_ctr==feature_ctr:
 */
          __pyx_v_correlation_sum = 0.0;

          /* "awe_ml/classifier_cython.pyx":1844
 *                         # iterate all feature nums and sum correlation values
 *                         correlation_sum=0
 *                         for feature_ctr in range(n_children):             # <<<<<<<<<<<<<<
 *                             if child_ctr==feature_ctr:
 *                                 correlation_sum+=1
 */
          __pyx_t_31 = __pyx_v_n_children;
          __pyx_t_32 = __pyx_t_31;
          for (__pyx_t_33 = 0; __pyx_t_33 < __pyx_t_32; __pyx_t_33+=1) {
            __pyx_v_feature_ctr = __pyx_t_33;

            /* "awe_ml/classifier_cython.pyx":1845
 *                         correlation_sum=0
 *                         for feature_ctr in range(n_children):
 *                             if child_ctr==feature_ctr:             # <<<<<<<<<<<<<<
 *                                 correlation_sum+=1
 *                             else:
 */
            __pyx_t_11 = ((__pyx_v_child_ctr == __pyx_v_feature_ctr) != 0);
            if (__pyx_t_11) {

              /* "awe_ml/classifier_cython.pyx":1846
 *                         for feature_ctr in range(n_children):
 *                             if child_ctr==feature_ctr:
 *                                 correlation_sum+=1             # <<<<<<<<<<<<<<
 *                             else:
 *                                 feature_num_pair.first=child_feature_list.at(child_ctr)
 */
              __pyx_v_correlation_sum = (__pyx_v_correlation_sum + 1.0);

              /* "awe_ml/classifier_cython.pyx":1845
 *                         correlation_sum=0
 *                         for feature_ctr in range(n_children):
 *                             if child_ctr==feature_ctr:             # <<<<<<<<<<<<<<
 *                                 correlation_sum+=1
 *                             else:
 */
              goto __pyx_L18;
            }

            /* "awe_ml/classifier_cython.pyx":1848
 *                                 correlation_sum+=1
 *                             else:
 *                                 feature_num_pair.first=child_feature_list.at(child_ctr)             # <<<<<<<<<<<<<<
 *                                 feature_num_pair.second=child_feature_list.at(feature_ctr)
 *                                 pair_sort(feature_num_pair)
 */
            /*else*/ {
              try {
                __pyx_t_34 = __pyx_v_child_feature_list.at(__pyx_v_child_ctr);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 1848, __pyx_L1_error)
              }
              __pyx_v_feature_num_pair.first = __pyx_t_34;

              /* "awe_ml/classifier_cython.pyx":1849
 *                             else:
 *                                 feature_num_pair.first=child_feature_list.at(child_ctr)
 *                                 feature_num_pair.second=child_feature_list.at(feature_ctr)             # <<<<<<<<<<<<<<
 *                                 pair_sort(feature_num_pair)
 * 
 */
              try {
                __pyx_t_35 = __pyx_v_child_feature_list.at(__pyx_v_feature_ctr);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 1849, __pyx_L1_error)
              }
              __pyx_v_feature_num_pair.second = __pyx_t_35;

              /* "awe_ml/classifier_cython.pyx":1850
 *                                 feature_num_pair.first=child_feature_list.at(child_ctr)
 *                                 feature_num_pair.second=child_feature_list.at(feature_ctr)
 *                                 pair_sort(feature_num_pair)             # <<<<<<<<<<<<<<
 * 
 *                                 # print("feature pair= ",feature_num_pair)
 */
              __pyx_f_6awe_ml_17classifier_cython_pair_sort(__pyx_v_feature_num_pair);

              /* "awe_ml/classifier_cython.pyx":1855
 * 
 *                                 #only add to correlation if it exists, if not, assume correlation of 0
 *                                 corr_iter = self.correlation_map.find(feature_num_pair)             # <<<<<<<<<<<<<<
 *                                 if corr_iter!=self.correlation_map.end():
 *                                     correlation_sum+=deref(corr_iter).second
 */
              __pyx_v_corr_iter = __pyx_v_self->correlation_map.find(__pyx_v_feature_num_pair);

              /* "awe_ml/classifier_cython.pyx":1856
 *                                 #only add to correlation if it exists, if not, assume correlation of 0
 *                                 corr_iter = self.correlation_map.find(feature_num_pair)
 *                                 if corr_iter!=self.correlation_map.end():             # <<<<<<<<<<<<<<
 *                                     correlation_sum+=deref(corr_iter).second
 *                                 else:
 */
              __pyx_t_11 = ((__pyx_v_corr_iter != __pyx_v_self->correlation_map.end()) != 0);
              if (__pyx_t_11) {

                /* "awe_ml/classifier_cython.pyx":1857
 *                                 corr_iter = self.correlation_map.find(feature_num_pair)
 *                                 if corr_iter!=self.correlation_map.end():
 *                                     correlation_sum+=deref(corr_iter).second             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     correlation_sum+=self.ave_corr
 */
                __pyx_v_correlation_sum = (__pyx_v_correlation_sum + (*__pyx_v_corr_iter).second);

                /* "awe_ml/classifier_cython.pyx":1856
 *                                 #only add to correlation if it exists, if not, assume correlation of 0
 *                                 corr_iter = self.correlation_map.find(feature_num_pair)
 *                                 if corr_iter!=self.correlation_map.end():             # <<<<<<<<<<<<<<
 *                                     correlation_sum+=deref(corr_iter).second
 *                                 else:
 */
                goto __pyx_L19;
              }

              /* "awe_ml/classifier_cython.pyx":1859
 *                                     correlation_sum+=deref(corr_iter).second
 *                                 else:
 *                                     correlation_sum+=self.ave_corr             # <<<<<<<<<<<<<<
 *                                 # correlation_sum+=self.ave_corr
 * 
 */
              /*else*/ {
                __pyx_v_correlation_sum = (__pyx_v_correlation_sum + __pyx_v_self->ave_corr);
              }
              __pyx_L19:;
            }
            __pyx_L18:;
          }

          /* "awe_ml/classifier_cython.pyx":1866
 * 
 *                         # compute independence value for child
 *                         independence = 1/correlation_sum             # <<<<<<<<<<<<<<
 *                         # print("independence=",independence)
 * 
 */
          __pyx_v_independence = (1.0 / __pyx_v_correlation_sum);

          /* "awe_ml/classifier_cython.pyx":1871
 *                         ##### store independence value in location corresponding to appropriate parent
 *                         #convert from parent_local_tree_index to parents full_tree_index
 *                         parent_full_tree_index = full_tree_indicies_list[level][parent_local_tree_index]             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_v_parent_full_tree_index = ((__pyx_v_full_tree_indicies_list[__pyx_v_level])[__pyx_v_parent_local_tree_index]);

          /* "awe_ml/classifier_cython.pyx":1876
 *                         # find location of parent full_tree_index in parent array and store independence at that location
 *                         # use child_full_tree_index to get list of parents from parent_array
 *                         child_full_tree_data = & self.full_tree_vector[level+1]             # <<<<<<<<<<<<<<
 *                         child_full_tree_data[0].set_node(child_full_tree_index)
 *                         for parent_index_ctr in range(level+1):
 */
          __pyx_v_child_full_tree_data = (&(__pyx_v_self->full_tree_vector[(__pyx_v_level + 1)]));

          /* "awe_ml/classifier_cython.pyx":1877
 *                         # use child_full_tree_index to get list of parents from parent_array
 *                         child_full_tree_data = & self.full_tree_vector[level+1]
 *                         child_full_tree_data[0].set_node(child_full_tree_index)             # <<<<<<<<<<<<<<
 *                         for parent_index_ctr in range(level+1):
 *                             if child_full_tree_data[0].parent_indicies[parent_index_ctr]==parent_full_tree_index:
 */
          (__pyx_v_child_full_tree_data[0]).set_node(__pyx_v_child_full_tree_index);

          /* "awe_ml/classifier_cython.pyx":1878
 *                         child_full_tree_data = & self.full_tree_vector[level+1]
 *                         child_full_tree_data[0].set_node(child_full_tree_index)
 *                         for parent_index_ctr in range(level+1):             # <<<<<<<<<<<<<<
 *                             if child_full_tree_data[0].parent_indicies[parent_index_ctr]==parent_full_tree_index:
 *                                 break
 */
          __pyx_t_36 = (__pyx_v_level + 1);
          __pyx_t_37 = __pyx_t_36;
          for (__pyx_t_31 = 0; __pyx_t_31 < __pyx_t_37; __pyx_t_31+=1) {
            __pyx_v_parent_index_ctr = __pyx_t_31;

            /* "awe_ml/classifier_cython.pyx":1879
 *                         child_full_tree_data[0].set_node(child_full_tree_index)
 *                         for parent_index_ctr in range(level+1):
 *                             if child_full_tree_data[0].parent_indicies[parent_index_ctr]==parent_full_tree_index:             # <<<<<<<<<<<<<<
 *                                 break
 *                         else:
 */
            try {
              __pyx_t_32 = (__pyx_v_child_full_tree_data[0]).parent_indicies[__pyx_v_parent_index_ctr];
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 1879, __pyx_L1_error)
            }
            __pyx_t_11 = ((__pyx_t_32 == __pyx_v_parent_full_tree_index) != 0);
            if (__pyx_t_11) {

              /* "awe_ml/classifier_cython.pyx":1880
 *                         for parent_index_ctr in range(level+1):
 *                             if child_full_tree_data[0].parent_indicies[parent_index_ctr]==parent_full_tree_index:
 *                                 break             # <<<<<<<<<<<<<<
 *                         else:
 *                             raise ValueError("parent not found something is broken")
 */
              goto __pyx_L21_break;

              /* "awe_ml/classifier_cython.pyx":1879
 *                         child_full_tree_data[0].set_node(child_full_tree_index)
 *                         for parent_index_ctr in range(level+1):
 *                             if child_full_tree_data[0].parent_indicies[parent_index_ctr]==parent_full_tree_index:             # <<<<<<<<<<<<<<
 *                                 break
 *                         else:
 */
            }
          }
          /*else*/ {

            /* "awe_ml/classifier_cython.pyx":1882
 *                                 break
 *                         else:
 *                             raise ValueError("parent not found something is broken")             # <<<<<<<<<<<<<<
 * 
 *                         # print("parent_index_ctr=",parent_index_ctr)
 */
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1882, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_Raise(__pyx_t_5, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __PYX_ERR(1, 1882, __pyx_L1_error)
          }
          __pyx_L21_break:;

          /* "awe_ml/classifier_cython.pyx":1886
 *                         # print("parent_index_ctr=",parent_index_ctr)
 *                         #find child local tree index
 *                         child_local_tree_index=full_tree_to_local_tree_lookup_list[level+1][child_full_tree_index]             # <<<<<<<<<<<<<<
 *                         independence_list[level+1][child_local_tree_index,parent_index_ctr] = independence
 * 
 */
          __pyx_v_child_local_tree_index = ((__pyx_v_full_tree_to_local_tree_lookup_list[(__pyx_v_level + 1)])[__pyx_v_child_full_tree_index]);

          /* "awe_ml/classifier_cython.pyx":1887
 *                         #find child local tree index
 *                         child_local_tree_index=full_tree_to_local_tree_lookup_list[level+1][child_full_tree_index]
 *                         independence_list[level+1][child_local_tree_index,parent_index_ctr] = independence             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_5 = PyFloat_FromDouble(__pyx_v_independence); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_36 = (__pyx_v_level + 1);
          __pyx_t_8 = __Pyx_PyInt_From_npy_int32(__pyx_v_child_local_tree_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_parent_index_ctr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1887, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
          __pyx_t_8 = 0;
          __pyx_t_2 = 0;
          if (unlikely(PyObject_SetItem(PyList_GET_ITEM(__pyx_v_independence_list, __pyx_t_36), __pyx_t_1, __pyx_t_5) < 0)) __PYX_ERR(1, 1887, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
    }

    /* "awe_ml/classifier_cython.pyx":1802
 *         # print(self.correlation_map)
 * 
 *         if self.independence_model_c!=b"none":             # <<<<<<<<<<<<<<
 *             #intialize independence list
 *             for level in range(tree_depth):
 */
  }

  /* "awe_ml/classifier_cython.pyx":1899
 * 
 *         #### initialize values
 *         cdef np_float noise_ratio=0             # <<<<<<<<<<<<<<
 *         cdef vector[np_float] child_scaling_weight, usefulness_vec, child_scaled_p, parent_scaled_p
 *         child_scaling_weight.assign(self.n_classes,0)
 */
  __pyx_v_noise_ratio = 0.0;

  /* "awe_ml/classifier_cython.pyx":1901
 *         cdef np_float noise_ratio=0
 *         cdef vector[np_float] child_scaling_weight, usefulness_vec, child_scaled_p, parent_scaled_p
 *         child_scaling_weight.assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 *         usefulness_vec.assign(self.n_classes,0)
 *         child_scaled_p.assign(self.n_classes,0)
 */
  __pyx_v_child_scaling_weight.assign(__pyx_v_self->n_classes, 0.0);

  /* "awe_ml/classifier_cython.pyx":1902
 *         cdef vector[np_float] child_scaling_weight, usefulness_vec, child_scaled_p, parent_scaled_p
 *         child_scaling_weight.assign(self.n_classes,0)
 *         usefulness_vec.assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 *         child_scaled_p.assign(self.n_classes,0)
 *         parent_scaled_p.assign(self.n_classes,0)
 */
  __pyx_v_usefulness_vec.assign(__pyx_v_self->n_classes, 0.0);

  /* "awe_ml/classifier_cython.pyx":1903
 *         child_scaling_weight.assign(self.n_classes,0)
 *         usefulness_vec.assign(self.n_classes,0)
 *         child_scaled_p.assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 *         parent_scaled_p.assign(self.n_classes,0)
 * 
 */
  __pyx_v_child_scaled_p.assign(__pyx_v_self->n_classes, 0.0);

  /* "awe_ml/classifier_cython.pyx":1904
 *         usefulness_vec.assign(self.n_classes,0)
 *         child_scaled_p.assign(self.n_classes,0)
 *         parent_scaled_p.assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 * 
 *         ## create vector to store p0 and copy over from full_tree_vector
 */
  __pyx_v_parent_scaled_p.assign(__pyx_v_self->n_classes, 0.0);

  /* "awe_ml/classifier_cython.pyx":1908
 *         ## create vector to store p0 and copy over from full_tree_vector
 *         cdef vector[np_float] top_p0
 *         top_p0.resize(self.n_classes)             # <<<<<<<<<<<<<<
 *         self.full_tree_vector[0].set_node(0)
 *         for class_ind in range(self.n_classes):
 */
  try {
    __pyx_v_top_p0.resize(__pyx_v_self->n_classes);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1908, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1909
 *         cdef vector[np_float] top_p0
 *         top_p0.resize(self.n_classes)
 *         self.full_tree_vector[0].set_node(0)             # <<<<<<<<<<<<<<
 *         for class_ind in range(self.n_classes):
 *             top_p0[class_ind]=self.full_tree_vector[0].p0[class_ind]
 */
  (__pyx_v_self->full_tree_vector[0]).set_node(0);

  /* "awe_ml/classifier_cython.pyx":1910
 *         top_p0.resize(self.n_classes)
 *         self.full_tree_vector[0].set_node(0)
 *         for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             top_p0[class_ind]=self.full_tree_vector[0].p0[class_ind]
 * 
 */
  __pyx_t_13 = __pyx_v_self->n_classes;
  __pyx_t_14 = __pyx_t_13;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_class_ind = __pyx_t_15;

    /* "awe_ml/classifier_cython.pyx":1911
 *         self.full_tree_vector[0].set_node(0)
 *         for class_ind in range(self.n_classes):
 *             top_p0[class_ind]=self.full_tree_vector[0].p0[class_ind]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_t_12 = (__pyx_v_self->full_tree_vector[0]).p0[__pyx_v_class_ind];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 1911, __pyx_L1_error)
    }
    (__pyx_v_top_p0[__pyx_v_class_ind]) = __pyx_t_12;
  }

  /* "awe_ml/classifier_cython.pyx":1916
 *         #initialize classification values:
 *         # cdef classification_vals_info_t child_inds, parent_inds
 *         classification_values_list.resize(tree_depth)             # <<<<<<<<<<<<<<
 *         for level in range(tree_depth): #zero defaults
 *             classification_values_list[level].initialize(full_tree_indicies_list[level].size(), self.n_classes)
 */
  try {
    __pyx_v_classification_values_list.resize(__pyx_v_tree_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1916, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":1917
 *         # cdef classification_vals_info_t child_inds, parent_inds
 *         classification_values_list.resize(tree_depth)
 *         for level in range(tree_depth): #zero defaults             # <<<<<<<<<<<<<<
 *             classification_values_list[level].initialize(full_tree_indicies_list[level].size(), self.n_classes)
 * 
 */
  __pyx_t_13 = __pyx_v_tree_depth;
  __pyx_t_14 = __pyx_t_13;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_level = __pyx_t_15;

    /* "awe_ml/classifier_cython.pyx":1918
 *         classification_values_list.resize(tree_depth)
 *         for level in range(tree_depth): #zero defaults
 *             classification_values_list[level].initialize(full_tree_indicies_list[level].size(), self.n_classes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_classification_values_list[__pyx_v_level]).initialize((__pyx_v_full_tree_indicies_list[__pyx_v_level]).size(), __pyx_v_self->n_classes);
  }

  /* "awe_ml/classifier_cython.pyx":1922
 * 
 *         # initialize local_weight_tree
 *         if save_intermediates:             # <<<<<<<<<<<<<<
 *             self.local_weight_tree.resize(tree_depth)
 *             for level in range(tree_depth):
 */
  __pyx_t_11 = (__pyx_v_save_intermediates != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":1923
 *         # initialize local_weight_tree
 *         if save_intermediates:
 *             self.local_weight_tree.resize(tree_depth)             # <<<<<<<<<<<<<<
 *             for level in range(tree_depth):
 *                 local_tree_size = full_tree_indicies_list[level].size()
 */
    try {
      __pyx_v_self->local_weight_tree.resize(__pyx_v_tree_depth);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 1923, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":1924
 *         if save_intermediates:
 *             self.local_weight_tree.resize(tree_depth)
 *             for level in range(tree_depth):             # <<<<<<<<<<<<<<
 *                 local_tree_size = full_tree_indicies_list[level].size()
 *                 self.local_weight_tree[level].resize(local_tree_size)
 */
    __pyx_t_13 = __pyx_v_tree_depth;
    __pyx_t_14 = __pyx_t_13;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
      __pyx_v_level = __pyx_t_15;

      /* "awe_ml/classifier_cython.pyx":1925
 *             self.local_weight_tree.resize(tree_depth)
 *             for level in range(tree_depth):
 *                 local_tree_size = full_tree_indicies_list[level].size()             # <<<<<<<<<<<<<<
 *                 self.local_weight_tree[level].resize(local_tree_size)
 *                 for local_tree_index in range(local_tree_size):
 */
      __pyx_v_local_tree_size = (__pyx_v_full_tree_indicies_list[__pyx_v_level]).size();

      /* "awe_ml/classifier_cython.pyx":1926
 *             for level in range(tree_depth):
 *                 local_tree_size = full_tree_indicies_list[level].size()
 *                 self.local_weight_tree[level].resize(local_tree_size)             # <<<<<<<<<<<<<<
 *                 for local_tree_index in range(local_tree_size):
 *                     self.local_weight_tree[level][local_tree_index].resize(level)
 */
      try {
        (__pyx_v_self->local_weight_tree[__pyx_v_level]).resize(__pyx_v_local_tree_size);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1926, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":1927
 *                 local_tree_size = full_tree_indicies_list[level].size()
 *                 self.local_weight_tree[level].resize(local_tree_size)
 *                 for local_tree_index in range(local_tree_size):             # <<<<<<<<<<<<<<
 *                     self.local_weight_tree[level][local_tree_index].resize(level)
 *                     for parent_ctr in range(level):
 */
      __pyx_t_23 = __pyx_v_local_tree_size;
      __pyx_t_28 = __pyx_t_23;
      for (__pyx_t_29 = 0; __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
        __pyx_v_local_tree_index = __pyx_t_29;

        /* "awe_ml/classifier_cython.pyx":1928
 *                 self.local_weight_tree[level].resize(local_tree_size)
 *                 for local_tree_index in range(local_tree_size):
 *                     self.local_weight_tree[level][local_tree_index].resize(level)             # <<<<<<<<<<<<<<
 *                     for parent_ctr in range(level):
 *                         self.local_weight_tree[level][local_tree_index][parent_ctr].assign(self.n_classes,0)
 */
        try {
          ((__pyx_v_self->local_weight_tree[__pyx_v_level])[__pyx_v_local_tree_index]).resize(__pyx_v_level);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1928, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":1929
 *                 for local_tree_index in range(local_tree_size):
 *                     self.local_weight_tree[level][local_tree_index].resize(level)
 *                     for parent_ctr in range(level):             # <<<<<<<<<<<<<<
 *                         self.local_weight_tree[level][local_tree_index][parent_ctr].assign(self.n_classes,0)
 * 
 */
        __pyx_t_30 = __pyx_v_level;
        __pyx_t_31 = __pyx_t_30;
        for (__pyx_t_32 = 0; __pyx_t_32 < __pyx_t_31; __pyx_t_32+=1) {
          __pyx_v_parent_ctr = __pyx_t_32;

          /* "awe_ml/classifier_cython.pyx":1930
 *                     self.local_weight_tree[level][local_tree_index].resize(level)
 *                     for parent_ctr in range(level):
 *                         self.local_weight_tree[level][local_tree_index][parent_ctr].assign(self.n_classes,0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          (((__pyx_v_self->local_weight_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_parent_ctr]).assign(__pyx_v_self->n_classes, 0.0);
        }
      }
    }

    /* "awe_ml/classifier_cython.pyx":1922
 * 
 *         # initialize local_weight_tree
 *         if save_intermediates:             # <<<<<<<<<<<<<<
 *             self.local_weight_tree.resize(tree_depth)
 *             for level in range(tree_depth):
 */
  }

  /* "awe_ml/classifier_cython.pyx":1935
 * 
 *         ####comment out for compilier error checking only
 *         classification_values =  & classification_values_list[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_classification_values = (&(__pyx_v_classification_values_list[0]));

  /* "awe_ml/classifier_cython.pyx":1939
 * 
 *         # iterate through each level of the tree bottom to top
 *         for level in range(tree_depth-1, -1,-1):             # <<<<<<<<<<<<<<
 * 
 *             child_full_tree_data = & self.full_tree_vector[level]
 */
  for (__pyx_t_13 = (__pyx_v_tree_depth - 1); __pyx_t_13 > -1; __pyx_t_13-=1) {
    __pyx_v_level = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":1941
 *         for level in range(tree_depth-1, -1,-1):
 * 
 *             child_full_tree_data = & self.full_tree_vector[level]             # <<<<<<<<<<<<<<
 * 
 *             # load full tree indicies and find parent indicies (copy into a new array)
 */
    __pyx_v_child_full_tree_data = (&(__pyx_v_self->full_tree_vector[__pyx_v_level]));

    /* "awe_ml/classifier_cython.pyx":1944
 * 
 *             # load full tree indicies and find parent indicies (copy into a new array)
 *             full_tree_indicies = full_tree_indicies_list[level]             # <<<<<<<<<<<<<<
 *             local_tree_size = full_tree_indicies.size()
 * 
 */
    __pyx_v_full_tree_indicies = (__pyx_v_full_tree_indicies_list[__pyx_v_level]);

    /* "awe_ml/classifier_cython.pyx":1945
 *             # load full tree indicies and find parent indicies (copy into a new array)
 *             full_tree_indicies = full_tree_indicies_list[level]
 *             local_tree_size = full_tree_indicies.size()             # <<<<<<<<<<<<<<
 * 
 *             # # set references to arrays for computed classification values
 */
    __pyx_v_local_tree_size = __pyx_v_full_tree_indicies.size();

    /* "awe_ml/classifier_cython.pyx":1948
 * 
 *             # # set references to arrays for computed classification values
 *             classification_values =  & classification_values_list[level]             # <<<<<<<<<<<<<<
 * 
 *             ########  iterate through each used node at the given level and compute estimated probability:
 */
    __pyx_v_classification_values = (&(__pyx_v_classification_values_list[__pyx_v_level]));

    /* "awe_ml/classifier_cython.pyx":1951
 * 
 *             ########  iterate through each used node at the given level and compute estimated probability:
 *             for local_tree_index in range(local_tree_size):             # <<<<<<<<<<<<<<
 *                 ##set the current node being used:
 *                 classification_values[0].set_node(local_tree_index)
 */
    __pyx_t_14 = __pyx_v_local_tree_size;
    __pyx_t_15 = __pyx_t_14;
    for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_15; __pyx_t_23+=1) {
      __pyx_v_local_tree_index = __pyx_t_23;

      /* "awe_ml/classifier_cython.pyx":1953
 *             for local_tree_index in range(local_tree_size):
 *                 ##set the current node being used:
 *                 classification_values[0].set_node(local_tree_index)             # <<<<<<<<<<<<<<
 *                 # compute_classification_vals_indicies(child_inds,local_tree_index, self.n_classes)
 *                 child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])
 */
      (__pyx_v_classification_values[0]).set_node(__pyx_v_local_tree_index);

      /* "awe_ml/classifier_cython.pyx":1955
 *                 classification_values[0].set_node(local_tree_index)
 *                 # compute_classification_vals_indicies(child_inds,local_tree_index, self.n_classes)
 *                 child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])             # <<<<<<<<<<<<<<
 *                 need_to_compute_noise_ratio = True
 * 
 */
      (__pyx_v_child_full_tree_data[0]).set_node((__pyx_v_full_tree_indicies[__pyx_v_local_tree_index]));

      /* "awe_ml/classifier_cython.pyx":1956
 *                 # compute_classification_vals_indicies(child_inds,local_tree_index, self.n_classes)
 *                 child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])
 *                 need_to_compute_noise_ratio = True             # <<<<<<<<<<<<<<
 * 
 *                 ###### iterate through each class and calculate estimated probability
 */
      __pyx_v_need_to_compute_noise_ratio = 1;

      /* "awe_ml/classifier_cython.pyx":1960
 *                 ###### iterate through each class and calculate estimated probability
 *                 # if total child weight is zero, use raw probability, else use combination of raw and estimated based on noise_ratio
 *                 for class_ind  in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                     weight = classification_values[0].weight_sum[class_ind]# [child_inds.weight_sum_start+class_ind]
 *                     if weight==0:
 */
      __pyx_t_28 = __pyx_v_self->n_classes;
      __pyx_t_29 = __pyx_t_28;
      for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
        __pyx_v_class_ind = __pyx_t_30;

        /* "awe_ml/classifier_cython.pyx":1961
 *                 # if total child weight is zero, use raw probability, else use combination of raw and estimated based on noise_ratio
 *                 for class_ind  in range(self.n_classes):
 *                     weight = classification_values[0].weight_sum[class_ind]# [child_inds.weight_sum_start+class_ind]             # <<<<<<<<<<<<<<
 *                     if weight==0:
 *                         #store probability
 */
        try {
          __pyx_t_12 = (__pyx_v_classification_values[0]).weight_sum[__pyx_v_class_ind];
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1961, __pyx_L1_error)
        }
        __pyx_v_weight = __pyx_t_12;

        /* "awe_ml/classifier_cython.pyx":1962
 *                 for class_ind  in range(self.n_classes):
 *                     weight = classification_values[0].weight_sum[class_ind]# [child_inds.weight_sum_start+class_ind]
 *                     if weight==0:             # <<<<<<<<<<<<<<
 *                         #store probability
 *                         classification_values[0].estimated_p[class_ind]= child_full_tree_data[0].p0[class_ind]
 */
        __pyx_t_11 = ((__pyx_v_weight == 0.0) != 0);
        if (__pyx_t_11) {

          /* "awe_ml/classifier_cython.pyx":1964
 *                     if weight==0:
 *                         #store probability
 *                         classification_values[0].estimated_p[class_ind]= child_full_tree_data[0].p0[class_ind]             # <<<<<<<<<<<<<<
 *                     else:
 *                         if need_to_compute_noise_ratio:
 */
          try {
            __pyx_t_12 = (__pyx_v_child_full_tree_data[0]).p0[__pyx_v_class_ind];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1964, __pyx_L1_error)
          }
          try {
            ((__pyx_v_classification_values[0]).estimated_p[__pyx_v_class_ind]) = __pyx_t_12;
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1964, __pyx_L1_error)
          }

          /* "awe_ml/classifier_cython.pyx":1962
 *                 for class_ind  in range(self.n_classes):
 *                     weight = classification_values[0].weight_sum[class_ind]# [child_inds.weight_sum_start+class_ind]
 *                     if weight==0:             # <<<<<<<<<<<<<<
 *                         #store probability
 *                         classification_values[0].estimated_p[class_ind]= child_full_tree_data[0].p0[class_ind]
 */
          goto __pyx_L40;
        }

        /* "awe_ml/classifier_cython.pyx":1966
 *                         classification_values[0].estimated_p[class_ind]= child_full_tree_data[0].p0[class_ind]
 *                     else:
 *                         if need_to_compute_noise_ratio:             # <<<<<<<<<<<<<<
 *                             noise_ratio = classification_values[0].max_child_noise[0] / child_full_tree_data[0].noise_weight[0]
 *                             need_to_compute_noise_ratio = False
 */
        /*else*/ {
          __pyx_t_11 = (__pyx_v_need_to_compute_noise_ratio != 0);
          if (__pyx_t_11) {

            /* "awe_ml/classifier_cython.pyx":1967
 *                     else:
 *                         if need_to_compute_noise_ratio:
 *                             noise_ratio = classification_values[0].max_child_noise[0] / child_full_tree_data[0].noise_weight[0]             # <<<<<<<<<<<<<<
 *                             need_to_compute_noise_ratio = False
 * 
 */
            try {
              __pyx_t_12 = (__pyx_v_classification_values[0]).max_child_noise[0];
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 1967, __pyx_L1_error)
            }
            try {
              __pyx_t_38 = (__pyx_v_child_full_tree_data[0]).noise_weight[0];
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 1967, __pyx_L1_error)
            }
            __pyx_v_noise_ratio = (((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_12) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_38));

            /* "awe_ml/classifier_cython.pyx":1968
 *                         if need_to_compute_noise_ratio:
 *                             noise_ratio = classification_values[0].max_child_noise[0] / child_full_tree_data[0].noise_weight[0]
 *                             need_to_compute_noise_ratio = False             # <<<<<<<<<<<<<<
 * 
 *                         classification_values[0].estimated_p[class_ind] = noise_ratio * classification_values[0].p_sum[class_ind] / \
 */
            __pyx_v_need_to_compute_noise_ratio = 0;

            /* "awe_ml/classifier_cython.pyx":1966
 *                         classification_values[0].estimated_p[class_ind]= child_full_tree_data[0].p0[class_ind]
 *                     else:
 *                         if need_to_compute_noise_ratio:             # <<<<<<<<<<<<<<
 *                             noise_ratio = classification_values[0].max_child_noise[0] / child_full_tree_data[0].noise_weight[0]
 *                             need_to_compute_noise_ratio = False
 */
          }

          /* "awe_ml/classifier_cython.pyx":1970
 *                             need_to_compute_noise_ratio = False
 * 
 *                         classification_values[0].estimated_p[class_ind] = noise_ratio * classification_values[0].p_sum[class_ind] / \             # <<<<<<<<<<<<<<
 *                             classification_values[0].weight_sum[class_ind]+(1 - noise_ratio) * child_full_tree_data[0].p0[class_ind]
 * 
 */
          try {
            __pyx_t_38 = (__pyx_v_classification_values[0]).p_sum[__pyx_v_class_ind];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1970, __pyx_L1_error)
          }

          /* "awe_ml/classifier_cython.pyx":1971
 * 
 *                         classification_values[0].estimated_p[class_ind] = noise_ratio * classification_values[0].p_sum[class_ind] / \
 *                             classification_values[0].weight_sum[class_ind]+(1 - noise_ratio) * child_full_tree_data[0].p0[class_ind]             # <<<<<<<<<<<<<<
 * 
 *             ####### process parent values  (iterate through tree by updating parents of each node -  allows for fixed memory allocations)
 */
          try {
            __pyx_t_12 = (__pyx_v_classification_values[0]).weight_sum[__pyx_v_class_ind];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1971, __pyx_L1_error)
          }

          /* "awe_ml/classifier_cython.pyx":1970
 *                             need_to_compute_noise_ratio = False
 * 
 *                         classification_values[0].estimated_p[class_ind] = noise_ratio * classification_values[0].p_sum[class_ind] / \             # <<<<<<<<<<<<<<
 *                             classification_values[0].weight_sum[class_ind]+(1 - noise_ratio) * child_full_tree_data[0].p0[class_ind]
 * 
 */
          try {
            __pyx_t_39 = (__pyx_v_child_full_tree_data[0]).p0[__pyx_v_class_ind];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1971, __pyx_L1_error)
          }

          /* "awe_ml/classifier_cython.pyx":1971
 * 
 *                         classification_values[0].estimated_p[class_ind] = noise_ratio * classification_values[0].p_sum[class_ind] / \
 *                             classification_values[0].weight_sum[class_ind]+(1 - noise_ratio) * child_full_tree_data[0].p0[class_ind]             # <<<<<<<<<<<<<<
 * 
 *             ####### process parent values  (iterate through tree by updating parents of each node -  allows for fixed memory allocations)
 */
          try {
            ((__pyx_v_classification_values[0]).estimated_p[__pyx_v_class_ind]) = (((__pyx_v_noise_ratio * __pyx_t_38) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_12)) + ((1.0 - __pyx_v_noise_ratio) * __pyx_t_39));
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1970, __pyx_L1_error)
          }
        }
        __pyx_L40:;
      }
    }

    /* "awe_ml/classifier_cython.pyx":1974
 * 
 *             ####### process parent values  (iterate through tree by updating parents of each node -  allows for fixed memory allocations)
 *             if level>0:             # <<<<<<<<<<<<<<
 *                 # set references to arrays for computed classification values for parent
 *                 parent_classification_values =  & classification_values_list[level-1]
 */
    __pyx_t_11 = ((__pyx_v_level > 0) != 0);
    if (__pyx_t_11) {

      /* "awe_ml/classifier_cython.pyx":1976
 *             if level>0:
 *                 # set references to arrays for computed classification values for parent
 *                 parent_classification_values =  & classification_values_list[level-1]             # <<<<<<<<<<<<<<
 *                 parent_full_tree_data = & self.full_tree_vector[level-1]
 *                 parent_full_tree_to_local_tree_lookup = full_tree_to_local_tree_lookup_list[level - 1]
 */
      __pyx_v_parent_classification_values = (&(__pyx_v_classification_values_list[(__pyx_v_level - 1)]));

      /* "awe_ml/classifier_cython.pyx":1977
 *                 # set references to arrays for computed classification values for parent
 *                 parent_classification_values =  & classification_values_list[level-1]
 *                 parent_full_tree_data = & self.full_tree_vector[level-1]             # <<<<<<<<<<<<<<
 *                 parent_full_tree_to_local_tree_lookup = full_tree_to_local_tree_lookup_list[level - 1]
 * 
 */
      __pyx_v_parent_full_tree_data = (&(__pyx_v_self->full_tree_vector[(__pyx_v_level - 1)]));

      /* "awe_ml/classifier_cython.pyx":1978
 *                 parent_classification_values =  & classification_values_list[level-1]
 *                 parent_full_tree_data = & self.full_tree_vector[level-1]
 *                 parent_full_tree_to_local_tree_lookup = full_tree_to_local_tree_lookup_list[level - 1]             # <<<<<<<<<<<<<<
 * 
 *                 ### iterate through each child node and update all of it's parents
 */
      __pyx_v_parent_full_tree_to_local_tree_lookup = (__pyx_v_full_tree_to_local_tree_lookup_list[(__pyx_v_level - 1)]);

      /* "awe_ml/classifier_cython.pyx":1981
 * 
 *                 ### iterate through each child node and update all of it's parents
 *                 for local_tree_index in range(local_tree_size):             # <<<<<<<<<<<<<<
 *                     classification_values[0].set_node(local_tree_index)
 *                     child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])
 */
      __pyx_t_14 = __pyx_v_local_tree_size;
      __pyx_t_15 = __pyx_t_14;
      for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_15; __pyx_t_23+=1) {
        __pyx_v_local_tree_index = __pyx_t_23;

        /* "awe_ml/classifier_cython.pyx":1982
 *                 ### iterate through each child node and update all of it's parents
 *                 for local_tree_index in range(local_tree_size):
 *                     classification_values[0].set_node(local_tree_index)             # <<<<<<<<<<<<<<
 *                     child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])
 * 
 */
        (__pyx_v_classification_values[0]).set_node(__pyx_v_local_tree_index);

        /* "awe_ml/classifier_cython.pyx":1983
 *                 for local_tree_index in range(local_tree_size):
 *                     classification_values[0].set_node(local_tree_index)
 *                     child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (__pyx_v_child_full_tree_data[0]).set_node((__pyx_v_full_tree_indicies[__pyx_v_local_tree_index]));

        /* "awe_ml/classifier_cython.pyx":1987
 * 
 *                     #compute parent independent values
 *                     child_noise = child_full_tree_data[0].noise_weight[0]             # <<<<<<<<<<<<<<
 * 
 *                     # compute scaling weight based on new estimated probability:
 */
        try {
          __pyx_t_39 = (__pyx_v_child_full_tree_data[0]).noise_weight[0];
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 1987, __pyx_L1_error)
        }
        __pyx_v_child_noise = __pyx_t_39;

        /* "awe_ml/classifier_cython.pyx":1990
 * 
 *                     # compute scaling weight based on new estimated probability:
 *                     total_count = 0             # <<<<<<<<<<<<<<
 *                     for class_ind in range(self.n_classes):
 *                         total_count+=child_full_tree_data[0].counts[class_ind]
 */
        __pyx_v_total_count = 0;

        /* "awe_ml/classifier_cython.pyx":1991
 *                     # compute scaling weight based on new estimated probability:
 *                     total_count = 0
 *                     for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                         total_count+=child_full_tree_data[0].counts[class_ind]
 * 
 */
        __pyx_t_28 = __pyx_v_self->n_classes;
        __pyx_t_29 = __pyx_t_28;
        for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
          __pyx_v_class_ind = __pyx_t_30;

          /* "awe_ml/classifier_cython.pyx":1992
 *                     total_count = 0
 *                     for class_ind in range(self.n_classes):
 *                         total_count+=child_full_tree_data[0].counts[class_ind]             # <<<<<<<<<<<<<<
 * 
 *                     # choose probability scaling model based on settings (loop should be unswitched by compiler)
 */
          try {
            __pyx_t_31 = (__pyx_v_child_full_tree_data[0]).counts[__pyx_v_class_ind];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1992, __pyx_L1_error)
          }
          __pyx_v_total_count = (__pyx_v_total_count + __pyx_t_31);
        }

        /* "awe_ml/classifier_cython.pyx":1995
 * 
 *                     # choose probability scaling model based on settings (loop should be unswitched by compiler)
 *                     if probability_scaling_method ==b"reciprocal":             # <<<<<<<<<<<<<<
 *                         compute_scaling_weights_reciprocal(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     elif probability_scaling_method == b"imbalanced_reciprocal":
 */
        __pyx_t_11 = ((__pyx_v_probability_scaling_method == ((char const *)"reciprocal")) != 0);
        if (__pyx_t_11) {

          /* "awe_ml/classifier_cython.pyx":1996
 *                     # choose probability scaling model based on settings (loop should be unswitched by compiler)
 *                     if probability_scaling_method ==b"reciprocal":
 *                         compute_scaling_weights_reciprocal(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)             # <<<<<<<<<<<<<<
 *                     elif probability_scaling_method == b"imbalanced_reciprocal":
 *                         compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count,top_p0, child_scaling_weight)
 */
          try {
            __pyx_t_40 = (__pyx_v_classification_values[0]).estimated_p.ptr(0);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1996, __pyx_L1_error)
          }
          __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal(__pyx_v_self->n_noise, __pyx_t_40, __pyx_v_total_count, __pyx_v_child_scaling_weight);

          /* "awe_ml/classifier_cython.pyx":1995
 * 
 *                     # choose probability scaling model based on settings (loop should be unswitched by compiler)
 *                     if probability_scaling_method ==b"reciprocal":             # <<<<<<<<<<<<<<
 *                         compute_scaling_weights_reciprocal(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     elif probability_scaling_method == b"imbalanced_reciprocal":
 */
          goto __pyx_L47;
        }

        /* "awe_ml/classifier_cython.pyx":1997
 *                     if probability_scaling_method ==b"reciprocal":
 *                         compute_scaling_weights_reciprocal(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     elif probability_scaling_method == b"imbalanced_reciprocal":             # <<<<<<<<<<<<<<
 *                         compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count,top_p0, child_scaling_weight)
 * 
 */
        __pyx_t_11 = ((__pyx_v_probability_scaling_method == ((char const *)"imbalanced_reciprocal")) != 0);
        if (__pyx_t_11) {

          /* "awe_ml/classifier_cython.pyx":1998
 *                         compute_scaling_weights_reciprocal(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     elif probability_scaling_method == b"imbalanced_reciprocal":
 *                         compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count,top_p0, child_scaling_weight)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          try {
            __pyx_t_40 = (__pyx_v_classification_values[0]).estimated_p.ptr(0);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 1998, __pyx_L1_error)
          }
          __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal_class_imbalance(__pyx_v_self->n_noise, __pyx_t_40, __pyx_v_total_count, __pyx_v_top_p0, __pyx_v_child_scaling_weight);

          /* "awe_ml/classifier_cython.pyx":1997
 *                     if probability_scaling_method ==b"reciprocal":
 *                         compute_scaling_weights_reciprocal(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     elif probability_scaling_method == b"imbalanced_reciprocal":             # <<<<<<<<<<<<<<
 *                         compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count,top_p0, child_scaling_weight)
 * 
 */
          goto __pyx_L47;
        }

        /* "awe_ml/classifier_cython.pyx":2001
 * 
 * 
 *                     elif probability_scaling_method ==b"logit":             # <<<<<<<<<<<<<<
 *                         compute_scaling_weights_logit(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     else:
 */
        __pyx_t_11 = ((__pyx_v_probability_scaling_method == ((char const *)"logit")) != 0);
        if (likely(__pyx_t_11)) {

          /* "awe_ml/classifier_cython.pyx":2002
 * 
 *                     elif probability_scaling_method ==b"logit":
 *                         compute_scaling_weights_logit(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)             # <<<<<<<<<<<<<<
 *                     else:
 *                         raise ValueError("Unknown Scaling Model "+str(self.probability_scaling_method))
 */
          try {
            __pyx_t_40 = (__pyx_v_classification_values[0]).estimated_p.ptr(0);
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 2002, __pyx_L1_error)
          }
          __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_logit(__pyx_v_self->n_noise, __pyx_t_40, __pyx_v_total_count, __pyx_v_child_scaling_weight);

          /* "awe_ml/classifier_cython.pyx":2001
 * 
 * 
 *                     elif probability_scaling_method ==b"logit":             # <<<<<<<<<<<<<<
 *                         compute_scaling_weights_logit(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     else:
 */
          goto __pyx_L47;
        }

        /* "awe_ml/classifier_cython.pyx":2004
 *                         compute_scaling_weights_logit(self.n_noise, classification_values[0].estimated_p.ptr(0), total_count, child_scaling_weight)
 *                     else:
 *                         raise ValueError("Unknown Scaling Model "+str(self.probability_scaling_method))             # <<<<<<<<<<<<<<
 * 
 *                     #####compute child scaling probabilities
 */
        /*else*/ {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_self->probability_scaling_method); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2004, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unknown_Scaling_Model, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2004, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2004, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_Raise(__pyx_t_5, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __PYX_ERR(1, 2004, __pyx_L1_error)
        }
        __pyx_L47:;

        /* "awe_ml/classifier_cython.pyx":2007
 * 
 *                     #####compute child scaling probabilities
 *                     if usefulness_model==b"scaled":# or usefulness_model==b"scaled_per_class":             # <<<<<<<<<<<<<<
 *                         for class_ind in range(self.n_classes):
 *                             child_scaled_p[class_ind]=child_scaling_weight[class_ind]*(classification_values[0].estimated_p[class_ind]-0.5)
 */
        __pyx_t_11 = ((__pyx_v_usefulness_model == ((char const *)"scaled")) != 0);
        if (__pyx_t_11) {

          /* "awe_ml/classifier_cython.pyx":2008
 *                     #####compute child scaling probabilities
 *                     if usefulness_model==b"scaled":# or usefulness_model==b"scaled_per_class":
 *                         for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                             child_scaled_p[class_ind]=child_scaling_weight[class_ind]*(classification_values[0].estimated_p[class_ind]-0.5)
 * 
 */
          __pyx_t_28 = __pyx_v_self->n_classes;
          __pyx_t_29 = __pyx_t_28;
          for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
            __pyx_v_class_ind = __pyx_t_30;

            /* "awe_ml/classifier_cython.pyx":2009
 *                     if usefulness_model==b"scaled":# or usefulness_model==b"scaled_per_class":
 *                         for class_ind in range(self.n_classes):
 *                             child_scaled_p[class_ind]=child_scaling_weight[class_ind]*(classification_values[0].estimated_p[class_ind]-0.5)             # <<<<<<<<<<<<<<
 * 
 *                     # iterate through all parents
 */
            try {
              __pyx_t_39 = (__pyx_v_classification_values[0]).estimated_p[__pyx_v_class_ind];
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 2009, __pyx_L1_error)
            }
            (__pyx_v_child_scaled_p[__pyx_v_class_ind]) = ((__pyx_v_child_scaling_weight[__pyx_v_class_ind]) * (__pyx_t_39 - 0.5));
          }

          /* "awe_ml/classifier_cython.pyx":2007
 * 
 *                     #####compute child scaling probabilities
 *                     if usefulness_model==b"scaled":# or usefulness_model==b"scaled_per_class":             # <<<<<<<<<<<<<<
 *                         for class_ind in range(self.n_classes):
 *                             child_scaled_p[class_ind]=child_scaling_weight[class_ind]*(classification_values[0].estimated_p[class_ind]-0.5)
 */
        }

        /* "awe_ml/classifier_cython.pyx":2012
 * 
 *                     # iterate through all parents
 *                     for parent_ctr in range(level):             # <<<<<<<<<<<<<<
 *                         # get parent index and check if it exists
 *                         parent_index_full_tree = child_full_tree_data[0].parent_indicies[parent_ctr]
 */
        __pyx_t_28 = __pyx_v_level;
        __pyx_t_29 = __pyx_t_28;
        for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
          __pyx_v_parent_ctr = __pyx_t_30;

          /* "awe_ml/classifier_cython.pyx":2014
 *                     for parent_ctr in range(level):
 *                         # get parent index and check if it exists
 *                         parent_index_full_tree = child_full_tree_data[0].parent_indicies[parent_ctr]             # <<<<<<<<<<<<<<
 *                         if parent_index_full_tree>=0:
 *                             parent_full_tree_data[0].set_node(parent_index_full_tree) #set node in parent data
 */
          try {
            __pyx_t_31 = (__pyx_v_child_full_tree_data[0]).parent_indicies[__pyx_v_parent_ctr];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 2014, __pyx_L1_error)
          }
          __pyx_v_parent_index_full_tree = __pyx_t_31;

          /* "awe_ml/classifier_cython.pyx":2015
 *                         # get parent index and check if it exists
 *                         parent_index_full_tree = child_full_tree_data[0].parent_indicies[parent_ctr]
 *                         if parent_index_full_tree>=0:             # <<<<<<<<<<<<<<
 *                             parent_full_tree_data[0].set_node(parent_index_full_tree) #set node in parent data
 * 
 */
          __pyx_t_11 = ((__pyx_v_parent_index_full_tree >= 0) != 0);
          if (__pyx_t_11) {

            /* "awe_ml/classifier_cython.pyx":2016
 *                         parent_index_full_tree = child_full_tree_data[0].parent_indicies[parent_ctr]
 *                         if parent_index_full_tree>=0:
 *                             parent_full_tree_data[0].set_node(parent_index_full_tree) #set node in parent data             # <<<<<<<<<<<<<<
 * 
 *                             # set references to arrays for computed classification values for parent
 */
            (__pyx_v_parent_full_tree_data[0]).set_node(__pyx_v_parent_index_full_tree);

            /* "awe_ml/classifier_cython.pyx":2019
 * 
 *                             # set references to arrays for computed classification values for parent
 *                             parent_index_local = parent_full_tree_to_local_tree_lookup[parent_index_full_tree]             # <<<<<<<<<<<<<<
 *                             parent_classification_values[0].set_node(parent_index_local)
 * 
 */
            __pyx_v_parent_index_local = (__pyx_v_parent_full_tree_to_local_tree_lookup[__pyx_v_parent_index_full_tree]);

            /* "awe_ml/classifier_cython.pyx":2020
 *                             # set references to arrays for computed classification values for parent
 *                             parent_index_local = parent_full_tree_to_local_tree_lookup[parent_index_full_tree]
 *                             parent_classification_values[0].set_node(parent_index_local)             # <<<<<<<<<<<<<<
 * 
 *                             #find max child noise
 */
            (__pyx_v_parent_classification_values[0]).set_node(__pyx_v_parent_index_local);

            /* "awe_ml/classifier_cython.pyx":2024
 *                             #find max child noise
 *                             parent_classification_values[0].max_child_noise[0]=max(
 *                                 parent_classification_values[0].max_child_noise[0],child_noise) # keep track of the max child noise             # <<<<<<<<<<<<<<
 * 
 *                             # find independence weight
 */
            __pyx_t_39 = __pyx_v_child_noise;
            try {
              __pyx_t_12 = (__pyx_v_parent_classification_values[0]).max_child_noise[0];
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 2024, __pyx_L1_error)
            }
            if (((__pyx_t_39 > __pyx_t_12) != 0)) {
              __pyx_t_38 = __pyx_t_39;
            } else {
              __pyx_t_38 = __pyx_t_12;
            }

            /* "awe_ml/classifier_cython.pyx":2023
 * 
 *                             #find max child noise
 *                             parent_classification_values[0].max_child_noise[0]=max(             # <<<<<<<<<<<<<<
 *                                 parent_classification_values[0].max_child_noise[0],child_noise) # keep track of the max child noise
 * 
 */
            try {
              ((__pyx_v_parent_classification_values[0]).max_child_noise[0]) = __pyx_t_38;
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 2023, __pyx_L1_error)
            }

            /* "awe_ml/classifier_cython.pyx":2027
 * 
 *                             # find independence weight
 *                             if self.independence_model_c == b"none":             # <<<<<<<<<<<<<<
 *                                 independence = 1
 *                             elif self.independence_model_c == b"standard":
 */
            __pyx_t_11 = ((__pyx_v_self->independence_model_c == ((char const *)"none")) != 0);
            if (__pyx_t_11) {

              /* "awe_ml/classifier_cython.pyx":2028
 *                             # find independence weight
 *                             if self.independence_model_c == b"none":
 *                                 independence = 1             # <<<<<<<<<<<<<<
 *                             elif self.independence_model_c == b"standard":
 *                                 independence = independence_list[level][local_tree_index,parent_ctr]
 */
              __pyx_v_independence = 1.0;

              /* "awe_ml/classifier_cython.pyx":2027
 * 
 *                             # find independence weight
 *                             if self.independence_model_c == b"none":             # <<<<<<<<<<<<<<
 *                                 independence = 1
 *                             elif self.independence_model_c == b"standard":
 */
              goto __pyx_L54;
            }

            /* "awe_ml/classifier_cython.pyx":2029
 *                             if self.independence_model_c == b"none":
 *                                 independence = 1
 *                             elif self.independence_model_c == b"standard":             # <<<<<<<<<<<<<<
 *                                 independence = independence_list[level][local_tree_index,parent_ctr]
 *                             else:
 */
            __pyx_t_11 = ((__pyx_v_self->independence_model_c == ((char const *)"standard")) != 0);
            if (likely(__pyx_t_11)) {

              /* "awe_ml/classifier_cython.pyx":2030
 *                                 independence = 1
 *                             elif self.independence_model_c == b"standard":
 *                                 independence = independence_list[level][local_tree_index,parent_ctr]             # <<<<<<<<<<<<<<
 *                             else:
 *                                 raise ValueError("unknown independence model"+str(self.independence_model))
 */
              __pyx_t_5 = __Pyx_PyInt_From_npy_int32(__pyx_v_local_tree_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2030, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_parent_ctr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2030, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2030, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
              __pyx_t_5 = 0;
              __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyObject_GetItem(PyList_GET_ITEM(__pyx_v_independence_list, __pyx_v_level), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2030, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_38 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_38 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 2030, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_independence = __pyx_t_38;

              /* "awe_ml/classifier_cython.pyx":2029
 *                             if self.independence_model_c == b"none":
 *                                 independence = 1
 *                             elif self.independence_model_c == b"standard":             # <<<<<<<<<<<<<<
 *                                 independence = independence_list[level][local_tree_index,parent_ctr]
 *                             else:
 */
              goto __pyx_L54;
            }

            /* "awe_ml/classifier_cython.pyx":2032
 *                                 independence = independence_list[level][local_tree_index,parent_ctr]
 *                             else:
 *                                 raise ValueError("unknown independence model"+str(self.independence_model))             # <<<<<<<<<<<<<<
 *                             #DEBUG:
 *                             if independence<=0 or independence>1:
 */
            /*else*/ {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_self->independence_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2032, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_unknown_independence_model, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2032, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2032, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_Raise(__pyx_t_1, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __PYX_ERR(1, 2032, __pyx_L1_error)
            }
            __pyx_L54:;

            /* "awe_ml/classifier_cython.pyx":2034
 *                                 raise ValueError("unknown independence model"+str(self.independence_model))
 *                             #DEBUG:
 *                             if independence<=0 or independence>1:             # <<<<<<<<<<<<<<
 *                                 raise ValueError ("something is wrong with yo independence, code broken")
 *                             # compute usefulness  (compiler should unswitch the if statements from the loop, but it needs to be tested)
 */
            __pyx_t_10 = ((__pyx_v_independence <= 0.0) != 0);
            if (!__pyx_t_10) {
            } else {
              __pyx_t_11 = __pyx_t_10;
              goto __pyx_L56_bool_binop_done;
            }
            __pyx_t_10 = ((__pyx_v_independence > 1.0) != 0);
            __pyx_t_11 = __pyx_t_10;
            __pyx_L56_bool_binop_done:;
            if (unlikely(__pyx_t_11)) {

              /* "awe_ml/classifier_cython.pyx":2035
 *                             #DEBUG:
 *                             if independence<=0 or independence>1:
 *                                 raise ValueError ("something is wrong with yo independence, code broken")             # <<<<<<<<<<<<<<
 *                             # compute usefulness  (compiler should unswitch the if statements from the loop, but it needs to be tested)
 *                                 #choose usefulness computation model based on settings:
 */
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2035, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_Raise(__pyx_t_1, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __PYX_ERR(1, 2035, __pyx_L1_error)

              /* "awe_ml/classifier_cython.pyx":2034
 *                                 raise ValueError("unknown independence model"+str(self.independence_model))
 *                             #DEBUG:
 *                             if independence<=0 or independence>1:             # <<<<<<<<<<<<<<
 *                                 raise ValueError ("something is wrong with yo independence, code broken")
 *                             # compute usefulness  (compiler should unswitch the if statements from the loop, but it needs to be tested)
 */
            }

            /* "awe_ml/classifier_cython.pyx":2039
 *                                 #choose usefulness computation model based on settings:
 *                                 #self.usefulness_vec is a preallocated output vec
 *                             if usefulness_model == b"none":             # <<<<<<<<<<<<<<
 *                                 calculate_usefulness_none(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 */
            __pyx_t_11 = ((__pyx_v_usefulness_model == ((char const *)"none")) != 0);
            if (__pyx_t_11) {

              /* "awe_ml/classifier_cython.pyx":2040
 *                                 #self.usefulness_vec is a preallocated output vec
 *                             if usefulness_model == b"none":
 *                                 calculate_usefulness_none(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)             # <<<<<<<<<<<<<<
 * 
 *                             elif usefulness_model ==b"simple":
 */
              try {
                __pyx_t_40 = (__pyx_v_classification_values[0]).estimated_p.ptr(0);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2040, __pyx_L1_error)
              }
              try {
                __pyx_t_41 = (__pyx_v_parent_full_tree_data[0]).p0.ptr(0);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2040, __pyx_L1_error)
              }
              __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_none(__pyx_t_40, __pyx_t_41, __pyx_v_usefulness_vec);

              /* "awe_ml/classifier_cython.pyx":2039
 *                                 #choose usefulness computation model based on settings:
 *                                 #self.usefulness_vec is a preallocated output vec
 *                             if usefulness_model == b"none":             # <<<<<<<<<<<<<<
 *                                 calculate_usefulness_none(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 */
              goto __pyx_L58;
            }

            /* "awe_ml/classifier_cython.pyx":2042
 *                                 calculate_usefulness_none(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 *                             elif usefulness_model ==b"simple":             # <<<<<<<<<<<<<<
 *                                 calculate_usefulness_simple(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 */
            __pyx_t_11 = ((__pyx_v_usefulness_model == ((char const *)"simple")) != 0);
            if (__pyx_t_11) {

              /* "awe_ml/classifier_cython.pyx":2043
 * 
 *                             elif usefulness_model ==b"simple":
 *                                 calculate_usefulness_simple(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)             # <<<<<<<<<<<<<<
 * 
 *                             elif usefulness_model==b"scaled": #scaled_per_class
 */
              try {
                __pyx_t_41 = (__pyx_v_classification_values[0]).estimated_p.ptr(0);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2043, __pyx_L1_error)
              }
              try {
                __pyx_t_40 = (__pyx_v_parent_full_tree_data[0]).p0.ptr(0);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2043, __pyx_L1_error)
              }
              __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_simple(__pyx_t_41, __pyx_t_40, __pyx_v_usefulness_vec);

              /* "awe_ml/classifier_cython.pyx":2042
 *                                 calculate_usefulness_none(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 *                             elif usefulness_model ==b"simple":             # <<<<<<<<<<<<<<
 *                                 calculate_usefulness_simple(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 */
              goto __pyx_L58;
            }

            /* "awe_ml/classifier_cython.pyx":2045
 *                                 calculate_usefulness_simple(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 *                             elif usefulness_model==b"scaled": #scaled_per_class             # <<<<<<<<<<<<<<
 *                                 if probability_scaling_method ==b"reciprocal":
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)
 */
            __pyx_t_11 = ((__pyx_v_usefulness_model == ((char const *)"scaled")) != 0);
            if (likely(__pyx_t_11)) {

              /* "awe_ml/classifier_cython.pyx":2046
 * 
 *                             elif usefulness_model==b"scaled": #scaled_per_class
 *                                 if probability_scaling_method ==b"reciprocal":             # <<<<<<<<<<<<<<
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)
 *                                 elif probability_scaling_method == b"imbalanced_reciprocal":
 */
              __pyx_t_11 = ((__pyx_v_probability_scaling_method == ((char const *)"reciprocal")) != 0);
              if (__pyx_t_11) {

                /* "awe_ml/classifier_cython.pyx":2047
 *                             elif usefulness_model==b"scaled": #scaled_per_class
 *                                 if probability_scaling_method ==b"reciprocal":
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)             # <<<<<<<<<<<<<<
 *                                 elif probability_scaling_method == b"imbalanced_reciprocal":
 *                                     compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count,top_p0, parent_scaled_p)
 */
                try {
                  __pyx_t_40 = (__pyx_v_parent_full_tree_data[0]).p0.ptr(0);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(1, 2047, __pyx_L1_error)
                }
                __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal(__pyx_v_self->n_noise, __pyx_t_40, __pyx_v_total_count, __pyx_v_parent_scaled_p);

                /* "awe_ml/classifier_cython.pyx":2046
 * 
 *                             elif usefulness_model==b"scaled": #scaled_per_class
 *                                 if probability_scaling_method ==b"reciprocal":             # <<<<<<<<<<<<<<
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)
 *                                 elif probability_scaling_method == b"imbalanced_reciprocal":
 */
                goto __pyx_L59;
              }

              /* "awe_ml/classifier_cython.pyx":2048
 *                                 if probability_scaling_method ==b"reciprocal":
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)
 *                                 elif probability_scaling_method == b"imbalanced_reciprocal":             # <<<<<<<<<<<<<<
 *                                     compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count,top_p0, parent_scaled_p)
 *                                     # level 0 of self.full_tree_vector always has only 1 node and so we can refer to top level p0 this way
 */
              __pyx_t_11 = ((__pyx_v_probability_scaling_method == ((char const *)"imbalanced_reciprocal")) != 0);
              if (__pyx_t_11) {

                /* "awe_ml/classifier_cython.pyx":2049
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)
 *                                 elif probability_scaling_method == b"imbalanced_reciprocal":
 *                                     compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count,top_p0, parent_scaled_p)             # <<<<<<<<<<<<<<
 *                                     # level 0 of self.full_tree_vector always has only 1 node and so we can refer to top level p0 this way
 * 
 */
                try {
                  __pyx_t_40 = (__pyx_v_parent_full_tree_data[0]).p0.ptr(0);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(1, 2049, __pyx_L1_error)
                }
                __pyx_f_6awe_ml_17classifier_cython_compute_scaling_weights_reciprocal_class_imbalance(__pyx_v_self->n_noise, __pyx_t_40, __pyx_v_total_count, __pyx_v_top_p0, __pyx_v_parent_scaled_p);

                /* "awe_ml/classifier_cython.pyx":2048
 *                                 if probability_scaling_method ==b"reciprocal":
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)
 *                                 elif probability_scaling_method == b"imbalanced_reciprocal":             # <<<<<<<<<<<<<<
 *                                     compute_scaling_weights_reciprocal_class_imbalance(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count,top_p0, parent_scaled_p)
 *                                     # level 0 of self.full_tree_vector always has only 1 node and so we can refer to top level p0 this way
 */
              }
              __pyx_L59:;

              /* "awe_ml/classifier_cython.pyx":2052
 *                                     # level 0 of self.full_tree_vector always has only 1 node and so we can refer to top level p0 this way
 * 
 *                                 for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                                     parent_scaled_p[class_ind]*=(parent_full_tree_data[0].p0[class_ind]-0.5)
 *                                 calculate_usefulness_scaled_per_class(&child_scaled_p[0], & parent_scaled_p[0], usefulness_vec)
 */
              __pyx_t_31 = __pyx_v_self->n_classes;
              __pyx_t_32 = __pyx_t_31;
              for (__pyx_t_33 = 0; __pyx_t_33 < __pyx_t_32; __pyx_t_33+=1) {
                __pyx_v_class_ind = __pyx_t_33;

                /* "awe_ml/classifier_cython.pyx":2053
 * 
 *                                 for class_ind in range(self.n_classes):
 *                                     parent_scaled_p[class_ind]*=(parent_full_tree_data[0].p0[class_ind]-0.5)             # <<<<<<<<<<<<<<
 *                                 calculate_usefulness_scaled_per_class(&child_scaled_p[0], & parent_scaled_p[0], usefulness_vec)
 *                             else:
 */
                __pyx_t_42 = __pyx_v_class_ind;
                try {
                  __pyx_t_38 = (__pyx_v_parent_full_tree_data[0]).p0[__pyx_v_class_ind];
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(1, 2053, __pyx_L1_error)
                }
                (__pyx_v_parent_scaled_p[__pyx_t_42]) = ((__pyx_v_parent_scaled_p[__pyx_t_42]) * (__pyx_t_38 - 0.5));
              }

              /* "awe_ml/classifier_cython.pyx":2054
 *                                 for class_ind in range(self.n_classes):
 *                                     parent_scaled_p[class_ind]*=(parent_full_tree_data[0].p0[class_ind]-0.5)
 *                                 calculate_usefulness_scaled_per_class(&child_scaled_p[0], & parent_scaled_p[0], usefulness_vec)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 raise ValueError("Unknown Usefulness Model "+str(self.usefulness_model))
 */
              __pyx_f_6awe_ml_17classifier_cython_calculate_usefulness_scaled_per_class((&(__pyx_v_child_scaled_p[0])), (&(__pyx_v_parent_scaled_p[0])), __pyx_v_usefulness_vec);

              /* "awe_ml/classifier_cython.pyx":2045
 *                                 calculate_usefulness_simple(classification_values[0].estimated_p.ptr(0), parent_full_tree_data[0].p0.ptr(0), usefulness_vec)
 * 
 *                             elif usefulness_model==b"scaled": #scaled_per_class             # <<<<<<<<<<<<<<
 *                                 if probability_scaling_method ==b"reciprocal":
 *                                     compute_scaling_weights_reciprocal(self.n_noise, parent_full_tree_data[0].p0.ptr(0), total_count, parent_scaled_p)
 */
              goto __pyx_L58;
            }

            /* "awe_ml/classifier_cython.pyx":2056
 *                                 calculate_usefulness_scaled_per_class(&child_scaled_p[0], & parent_scaled_p[0], usefulness_vec)
 *                             else:
 *                                 raise ValueError("Unknown Usefulness Model "+str(self.usefulness_model))             # <<<<<<<<<<<<<<
 * 
 *                             for class_ind in range(self.n_classes):
 */
            /*else*/ {
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_self->usefulness_model); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2056, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unknown_Usefulness_Model, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2056, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2056, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_Raise(__pyx_t_1, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __PYX_ERR(1, 2056, __pyx_L1_error)
            }
            __pyx_L58:;

            /* "awe_ml/classifier_cython.pyx":2058
 *                                 raise ValueError("Unknown Usefulness Model "+str(self.usefulness_model))
 * 
 *                             for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 * 
 *                                 ###TODO:  prestore scaling weight???
 */
            __pyx_t_31 = __pyx_v_self->n_classes;
            __pyx_t_32 = __pyx_t_31;
            for (__pyx_t_33 = 0; __pyx_t_33 < __pyx_t_32; __pyx_t_33+=1) {
              __pyx_v_class_ind = __pyx_t_33;

              /* "awe_ml/classifier_cython.pyx":2061
 * 
 *                                 ###TODO:  prestore scaling weight???
 *                                 weight2 = child_scaling_weight[class_ind] *usefulness_vec[class_ind]*\             # <<<<<<<<<<<<<<
 *                                           min((total_count**noise_exponent2_validated) / self.noise_scale , 1 )*independence
 * 
 */
              __pyx_t_21 = 1;

              /* "awe_ml/classifier_cython.pyx":2062
 *                                 ###TODO:  prestore scaling weight???
 *                                 weight2 = child_scaling_weight[class_ind] *usefulness_vec[class_ind]*\
 *                                           min((total_count**noise_exponent2_validated) / self.noise_scale , 1 )*independence             # <<<<<<<<<<<<<<
 * 
 *                                 parent_classification_values[0].weight_sum[class_ind]+=weight2
 */
              __pyx_t_38 = (pow(((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_total_count), __pyx_v_noise_exponent2_validated) / __pyx_v_self->noise_scale);
              if (((__pyx_t_21 < __pyx_t_38) != 0)) {
                __pyx_t_39 = __pyx_t_21;
              } else {
                __pyx_t_39 = __pyx_t_38;
              }

              /* "awe_ml/classifier_cython.pyx":2061
 * 
 *                                 ###TODO:  prestore scaling weight???
 *                                 weight2 = child_scaling_weight[class_ind] *usefulness_vec[class_ind]*\             # <<<<<<<<<<<<<<
 *                                           min((total_count**noise_exponent2_validated) / self.noise_scale , 1 )*independence
 * 
 */
              __pyx_v_weight2 = ((((__pyx_v_child_scaling_weight[__pyx_v_class_ind]) * (__pyx_v_usefulness_vec[__pyx_v_class_ind])) * __pyx_t_39) * __pyx_v_independence);

              /* "awe_ml/classifier_cython.pyx":2064
 *                                           min((total_count**noise_exponent2_validated) / self.noise_scale , 1 )*independence
 * 
 *                                 parent_classification_values[0].weight_sum[class_ind]+=weight2             # <<<<<<<<<<<<<<
 *                                 parent_classification_values[0].p_sum[class_ind]+=weight2*\
 *                                                 classification_values[0].estimated_p[class_ind]
 */
              __pyx_t_21 = 0;
              __pyx_t_42 = __pyx_v_class_ind;
              try {
                __pyx_t_39 = (__pyx_v_parent_classification_values[__pyx_t_21]).weight_sum[__pyx_t_42];
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2064, __pyx_L1_error)
              }
              try {
                ((__pyx_v_parent_classification_values[__pyx_t_21]).weight_sum[__pyx_t_42]) = (__pyx_t_39 + __pyx_v_weight2);
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2064, __pyx_L1_error)
              }

              /* "awe_ml/classifier_cython.pyx":2065
 * 
 *                                 parent_classification_values[0].weight_sum[class_ind]+=weight2
 *                                 parent_classification_values[0].p_sum[class_ind]+=weight2*\             # <<<<<<<<<<<<<<
 *                                                 classification_values[0].estimated_p[class_ind]
 * 
 */
              __pyx_t_21 = 0;
              __pyx_t_42 = __pyx_v_class_ind;
              try {
                __pyx_t_39 = (__pyx_v_parent_classification_values[__pyx_t_21]).p_sum[__pyx_t_42];
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2065, __pyx_L1_error)
              }

              /* "awe_ml/classifier_cython.pyx":2066
 *                                 parent_classification_values[0].weight_sum[class_ind]+=weight2
 *                                 parent_classification_values[0].p_sum[class_ind]+=weight2*\
 *                                                 classification_values[0].estimated_p[class_ind]             # <<<<<<<<<<<<<<
 * 
 *                                 if save_intermediates:
 */
              try {
                __pyx_t_38 = (__pyx_v_classification_values[0]).estimated_p[__pyx_v_class_ind];
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2066, __pyx_L1_error)
              }

              /* "awe_ml/classifier_cython.pyx":2065
 * 
 *                                 parent_classification_values[0].weight_sum[class_ind]+=weight2
 *                                 parent_classification_values[0].p_sum[class_ind]+=weight2*\             # <<<<<<<<<<<<<<
 *                                                 classification_values[0].estimated_p[class_ind]
 * 
 */
              try {
                ((__pyx_v_parent_classification_values[__pyx_t_21]).p_sum[__pyx_t_42]) = (__pyx_t_39 + (__pyx_v_weight2 * __pyx_t_38));
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(1, 2065, __pyx_L1_error)
              }

              /* "awe_ml/classifier_cython.pyx":2068
 *                                                 classification_values[0].estimated_p[class_ind]
 * 
 *                                 if save_intermediates:             # <<<<<<<<<<<<<<
 *                                    self.local_weight_tree[level][local_tree_index][parent_ctr][class_ind]=weight2
 * 
 */
              __pyx_t_11 = (__pyx_v_save_intermediates != 0);
              if (__pyx_t_11) {

                /* "awe_ml/classifier_cython.pyx":2069
 * 
 *                                 if save_intermediates:
 *                                    self.local_weight_tree[level][local_tree_index][parent_ctr][class_ind]=weight2             # <<<<<<<<<<<<<<
 * 
 * 
 */
                ((((__pyx_v_self->local_weight_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_parent_ctr])[__pyx_v_class_ind]) = __pyx_v_weight2;

                /* "awe_ml/classifier_cython.pyx":2068
 *                                                 classification_values[0].estimated_p[class_ind]
 * 
 *                                 if save_intermediates:             # <<<<<<<<<<<<<<
 *                                    self.local_weight_tree[level][local_tree_index][parent_ctr][class_ind]=weight2
 * 
 */
              }
            }

            /* "awe_ml/classifier_cython.pyx":2015
 *                         # get parent index and check if it exists
 *                         parent_index_full_tree = child_full_tree_data[0].parent_indicies[parent_ctr]
 *                         if parent_index_full_tree>=0:             # <<<<<<<<<<<<<<
 *                             parent_full_tree_data[0].set_node(parent_index_full_tree) #set node in parent data
 * 
 */
          }
        }
      }

      /* "awe_ml/classifier_cython.pyx":1974
 * 
 *             ####### process parent values  (iterate through tree by updating parents of each node -  allows for fixed memory allocations)
 *             if level>0:             # <<<<<<<<<<<<<<
 *                 # set references to arrays for computed classification values for parent
 *                 parent_classification_values =  & classification_values_list[level-1]
 */
    }
  }

  /* "awe_ml/classifier_cython.pyx":2072
 * 
 * 
 *         if save_intermediates==True: #TODO: change to avoid copies             # <<<<<<<<<<<<<<
 *             self.classification_values_list=classification_values_list # saves a copy
 * 
 */
  __pyx_t_11 = ((__pyx_v_save_intermediates == 1) != 0);
  if (__pyx_t_11) {

    /* "awe_ml/classifier_cython.pyx":2073
 * 
 *         if save_intermediates==True: #TODO: change to avoid copies
 *             self.classification_values_list=classification_values_list # saves a copy             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->classification_values_list = __pyx_v_classification_values_list;

    /* "awe_ml/classifier_cython.pyx":2077
 * 
 * 
 *             self.full_tree_indicies_list = full_tree_indicies_list             # <<<<<<<<<<<<<<
 *             self.full_tree_to_local_tree_lookup_list=full_tree_to_local_tree_lookup_list
 * 
 */
    __pyx_v_self->full_tree_indicies_list = __pyx_v_full_tree_indicies_list;

    /* "awe_ml/classifier_cython.pyx":2078
 * 
 *             self.full_tree_indicies_list = full_tree_indicies_list
 *             self.full_tree_to_local_tree_lookup_list=full_tree_to_local_tree_lookup_list             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_self->full_tree_to_local_tree_lookup_list = __pyx_v_full_tree_to_local_tree_lookup_list;

    /* "awe_ml/classifier_cython.pyx":2072
 * 
 * 
 *         if save_intermediates==True: #TODO: change to avoid copies             # <<<<<<<<<<<<<<
 *             self.classification_values_list=classification_values_list # saves a copy
 * 
 */
  }

  /* "awe_ml/classifier_cython.pyx":2144
 *         #     raise ValueError("We Done")
 * 
 *         cdef np.ndarray return_values = np.zeros(self.n_classes, dtype=NP_FLOAT)             # <<<<<<<<<<<<<<
 *         for class_ind in range(self.n_classes):
 *             return_values[class_ind]=classification_values[0].estimated_p[class_ind]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_FLOAT); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 2144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 2144, __pyx_L1_error)
  __pyx_v_return_values = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "awe_ml/classifier_cython.pyx":2145
 * 
 *         cdef np.ndarray return_values = np.zeros(self.n_classes, dtype=NP_FLOAT)
 *         for class_ind in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             return_values[class_ind]=classification_values[0].estimated_p[class_ind]
 *         return return_values
 */
  __pyx_t_13 = __pyx_v_self->n_classes;
  __pyx_t_14 = __pyx_t_13;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_class_ind = __pyx_t_15;

    /* "awe_ml/classifier_cython.pyx":2146
 *         cdef np.ndarray return_values = np.zeros(self.n_classes, dtype=NP_FLOAT)
 *         for class_ind in range(self.n_classes):
 *             return_values[class_ind]=classification_values[0].estimated_p[class_ind]             # <<<<<<<<<<<<<<
 *         return return_values
 * 
 */
    try {
      __pyx_t_38 = (__pyx_v_classification_values[0]).estimated_p[__pyx_v_class_ind];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2146, __pyx_L1_error)
    }
    __pyx_t_8 = PyFloat_FromDouble(__pyx_t_38); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 2146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_return_values), __pyx_v_class_ind, __pyx_t_8, __pyx_t_6awe_ml_17classifier_cython_np_long, 1, __Pyx_PyInt_From_npy_int32, 0, 0, 0) < 0)) __PYX_ERR(1, 2146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":2147
 *         for class_ind in range(self.n_classes):
 *             return_values[class_ind]=classification_values[0].estimated_p[class_ind]
 *         return return_values             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_return_values));
  __pyx_r = ((PyArrayObject *)__pyx_v_return_values);
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":1737
 * 
 * 
 *     cpdef np.ndarray[np_float, ndim=1] find_probability(self, np_long[:] example, bint save_intermediates = False):             # <<<<<<<<<<<<<<
 *         """
 *         run classifier and find probability given a single example
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.find_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_independence_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_independence_array);
  __Pyx_XDECREF(__pyx_v_independence_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_return_values);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19find_probability(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_18find_probability[] = "\n        run classifier and find probability given a single example        \n\n        :param example: \n        :param save_intermediates: if True save classification_values_list to self for use in explainability\n        :return: np array of probabilities for each class\n        ";
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19find_probability(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_example = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_save_intermediates;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_probability (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_example,&__pyx_n_s_save_intermediates,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_example)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_save_intermediates);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_probability") < 0)) __PYX_ERR(1, 1737, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_example = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_example.memview)) __PYX_ERR(1, 1737, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_save_intermediates = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_save_intermediates == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1737, __pyx_L3_error)
    } else {
      __pyx_v_save_intermediates = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_probability", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1737, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.find_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18find_probability(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), __pyx_v_example, __pyx_v_save_intermediates);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18find_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, __Pyx_memviewslice __pyx_v_example, int __pyx_v_save_intermediates) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability __pyx_t_2;
  __Pyx_RefNannySetupContext("find_probability", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.save_intermediates = __pyx_v_save_intermediates;
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_6awe_ml_17classifier_cython_AWE_ML_Cython->find_probability(__pyx_v_self, __pyx_v_example, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.find_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_example, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":2152
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cpdef analyze_single_probability(self,example, str filename_prefix="./results"):#None):#             # <<<<<<<<<<<<<<
 *         """
 *         Analyzes a prediction and breaks down the components that go into the prediction
 */

static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_21analyze_single_probability(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_example, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability *__pyx_optional_args) {
  PyObject *__pyx_v_filename_prefix = ((PyObject*)__pyx_kp_u_results);
  __Pyx_memviewslice __pyx_v_example_2d = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_example_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_full_tree_indicies;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_p_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_class_num;
  bool __pyx_v_result;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_predicted_probability;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_child_label_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_parent_label_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_level_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_num_features;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_tree_depth;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_local_tree_size;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_local_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_row_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_comb_feat_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_child_feature_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_parent_tree_weight;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_parent_weight_sum;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_child_weight;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_child_tree_weight;
  int __pyx_v_nonzero_self_weight;
  FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_child_full_tree_data;
  FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_parent_full_tree_data;
  FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long>  *__pyx_v_full_tree_data;
  std::vector<std::vector<std::vector<std::vector<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_float> > > > >  __pyx_v_weights_tree;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_level;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_feature_ctr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_index_full_tree;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_noise_ratio;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_parent_full_tree_to_local_tree_lookup;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_index_local;
  long __pyx_v_parent_feature_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_counts_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_weight_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_n_features_in_level;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_weight_by_feature_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_weight_sum;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_local_weight;
  long __pyx_v_n_explainable_values_cols;
  __Pyx_memviewslice __pyx_v_explainable_values = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parent_level;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_label_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_v_label_end_ptr;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_parental_size;
  __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_v_p0_ptr;
  __Pyx_memviewslice __pyx_v_parental_label = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_full_tree_index;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_label_size;
  int __pyx_v_equal_prob;
  long __pyx_v_n_unique_combos;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_max_prob;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_predicted_class;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_v_prob_ent;
  PyObject *__pyx_v_inds = NULL;
  PyObject *__pyx_v_rev_inds = NULL;
  PyObject *__pyx_v_header = 0;
  std::string __pyx_v_data_string_cpp;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_col_ind;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_row;
  PyObject *__pyx_v_f = NULL;
  PyObject *__pyx_v_combos_df = NULL;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_weight;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_probability;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_label0;
  PyArrayObject *__pyx_v_top_level_values = 0;
  PyObject *__pyx_v_top_of_tree_df = NULL;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_feature_weights;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_weighted_probability;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_node_weight;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_v_node_probability;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_v_explainable_level;
  PyArrayObject *__pyx_v_explain_by_feature = 0;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_float> ::iterator __pyx_v_feature_weights_it;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_float> ::iterator __pyx_v_weighted_probability_it;
  PyObject *__pyx_v_features_df = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_explain_by_feature;
  __Pyx_Buffer __pyx_pybuffer_explain_by_feature;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_top_level_values;
  __Pyx_Buffer __pyx_pybuffer_top_level_values;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability __pyx_t_9;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_t_10;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_11;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_12;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_15;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_16;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_17;
  long __pyx_t_18;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_19;
  long __pyx_t_20;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_21;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_22;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_23;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_24;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_25;
  __pyx_t_6awe_ml_17classifier_cython_np_long *__pyx_t_26;
  long __pyx_t_27;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_28;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_29;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_30;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_31;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_32;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_33;
  __Pyx_memviewslice __pyx_t_34 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_6awe_ml_17classifier_cython_np_float *__pyx_t_35;
  Py_ssize_t __pyx_t_36;
  Py_ssize_t __pyx_t_37;
  __Pyx_memviewslice __pyx_t_38 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_39;
  Py_ssize_t __pyx_t_40;
  Py_ssize_t __pyx_t_41;
  Py_ssize_t __pyx_t_42;
  Py_ssize_t __pyx_t_43;
  Py_ssize_t __pyx_t_44;
  Py_ssize_t __pyx_t_45;
  Py_ssize_t __pyx_t_46;
  Py_ssize_t __pyx_t_47;
  Py_ssize_t __pyx_t_48;
  Py_ssize_t __pyx_t_49;
  Py_ssize_t __pyx_t_50;
  Py_ssize_t __pyx_t_51;
  Py_ssize_t __pyx_t_52;
  Py_ssize_t __pyx_t_53;
  Py_ssize_t __pyx_t_54;
  Py_ssize_t __pyx_t_55;
  Py_ssize_t __pyx_t_56;
  Py_ssize_t __pyx_t_57;
  Py_ssize_t __pyx_t_58;
  Py_ssize_t __pyx_t_59;
  Py_ssize_t __pyx_t_60;
  Py_ssize_t __pyx_t_61;
  Py_ssize_t __pyx_t_62;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_63;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_64;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ::size_type __pyx_t_65;
  std::string __pyx_t_66;
  Py_ssize_t __pyx_t_67;
  PyObject *(*__pyx_t_68)(PyObject *);
  int __pyx_t_69;
  Py_ssize_t __pyx_t_70;
  Py_ssize_t __pyx_t_71;
  Py_ssize_t __pyx_t_72;
  Py_ssize_t __pyx_t_73;
  Py_ssize_t __pyx_t_74;
  Py_ssize_t __pyx_t_75;
  PyObject *__pyx_t_76 = NULL;
  PyObject *__pyx_t_77 = NULL;
  PyObject *__pyx_t_78 = NULL;
  PyObject *__pyx_t_79 = NULL;
  PyObject *__pyx_t_80 = NULL;
  PyObject *__pyx_t_81 = NULL;
  PyObject *__pyx_t_82 = NULL;
  PyArrayObject *__pyx_t_83 = NULL;
  Py_ssize_t __pyx_t_84;
  Py_ssize_t __pyx_t_85;
  Py_ssize_t __pyx_t_86;
  Py_ssize_t __pyx_t_87;
  Py_ssize_t __pyx_t_88;
  Py_ssize_t __pyx_t_89;
  Py_ssize_t __pyx_t_90;
  Py_ssize_t __pyx_t_91;
  Py_ssize_t __pyx_t_92;
  Py_ssize_t __pyx_t_93;
  Py_ssize_t __pyx_t_94;
  Py_ssize_t __pyx_t_95;
  Py_ssize_t __pyx_t_96;
  Py_ssize_t __pyx_t_97;
  Py_ssize_t __pyx_t_98;
  Py_ssize_t __pyx_t_99;
  Py_ssize_t __pyx_t_100;
  Py_ssize_t __pyx_t_101;
  Py_ssize_t __pyx_t_102;
  Py_ssize_t __pyx_t_103;
  Py_ssize_t __pyx_t_104;
  Py_ssize_t __pyx_t_105;
  Py_ssize_t __pyx_t_106;
  Py_ssize_t __pyx_t_107;
  PyArrayObject *__pyx_t_108 = NULL;
  Py_ssize_t __pyx_t_109;
  Py_ssize_t __pyx_t_110;
  Py_ssize_t __pyx_t_111;
  Py_ssize_t __pyx_t_112;
  Py_ssize_t __pyx_t_113;
  Py_ssize_t __pyx_t_114;
  Py_ssize_t __pyx_t_115;
  Py_ssize_t __pyx_t_116;
  Py_ssize_t __pyx_t_117;
  Py_ssize_t __pyx_t_118;
  Py_ssize_t __pyx_t_119;
  Py_ssize_t __pyx_t_120;
  Py_ssize_t __pyx_t_121;
  Py_ssize_t __pyx_t_122;
  Py_ssize_t __pyx_t_123;
  Py_ssize_t __pyx_t_124;
  __Pyx_RefNannySetupContext("analyze_single_probability", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_filename_prefix = __pyx_optional_args->filename_prefix;
    }
  }
  __pyx_pybuffer_top_level_values.pybuffer.buf = NULL;
  __pyx_pybuffer_top_level_values.refcount = 0;
  __pyx_pybuffernd_top_level_values.data = NULL;
  __pyx_pybuffernd_top_level_values.rcbuffer = &__pyx_pybuffer_top_level_values;
  __pyx_pybuffer_explain_by_feature.pybuffer.buf = NULL;
  __pyx_pybuffer_explain_by_feature.refcount = 0;
  __pyx_pybuffernd_explain_by_feature.data = NULL;
  __pyx_pybuffernd_explain_by_feature.rcbuffer = &__pyx_pybuffer_explain_by_feature;
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_analyze_single_probability); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_21analyze_single_probability)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_example, __pyx_v_filename_prefix};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2152, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_example, __pyx_v_filename_prefix};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2152, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_v_example);
        __Pyx_GIVEREF(__pyx_v_example);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_example);
        __Pyx_INCREF(__pyx_v_filename_prefix);
        __Pyx_GIVEREF(__pyx_v_filename_prefix);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_filename_prefix);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":2166
 *         cdef np_long[:] example_view
 * 
 *         example_2d = self.validate_X(example) #validate X assumes multiple examples and so we need to convert back down to a single example             # <<<<<<<<<<<<<<
 *         example_view = example_2d[0,:]
 * 
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->validate_X(__pyx_v_self, __pyx_v_example); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(1, 2166, __pyx_L1_error)
  __pyx_v_example_2d = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "awe_ml/classifier_cython.pyx":2167
 * 
 *         example_2d = self.validate_X(example) #validate X assumes multiple examples and so we need to convert back down to a single example
 *         example_view = example_2d[0,:]             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[np_long] full_tree_indicies
 */
  __pyx_t_8.data = __pyx_v_example_2d.data;
  __pyx_t_8.memview = __pyx_v_example_2d.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_8, 0);
  {
    Py_ssize_t __pyx_tmp_idx = 0;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_example_2d.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_example_2d.strides[0];
    if (0 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (0 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(1, 2167, __pyx_L1_error)
    }
        __pyx_t_8.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_8.shape[0] = __pyx_v_example_2d.shape[1];
__pyx_t_8.strides[0] = __pyx_v_example_2d.strides[1];
    __pyx_t_8.suboffsets[0] = -1;

__pyx_v_example_view = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "awe_ml/classifier_cython.pyx":2177
 *         cdef np_long * child_label_ptr
 *         cdef np_long * parent_label_ptr
 *         cdef np_long feature_ind, level_ind, num_features = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_num_features = 0;

  /* "awe_ml/classifier_cython.pyx":2182
 * 
 * 
 *         predicted_probability=self.find_probability(example_view,save_intermediates=True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_9.__pyx_n = 1;
  __pyx_t_9.save_intermediates = 1;
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->find_probability(__pyx_v_self, __pyx_v_example_view, 0, &__pyx_t_9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_predicted_probability = __pyx_t_10;

  /* "awe_ml/classifier_cython.pyx":2198
 * 
 * 
 *         tree_depth = self.full_tree_vector.size()             # <<<<<<<<<<<<<<
 * 
 *         #store weights in a nested vector (inefficient)
 */
  __pyx_v_tree_depth = __pyx_v_self->full_tree_vector.size();

  /* "awe_ml/classifier_cython.pyx":2204
 *         #    level, node, feature ctr#, class, pair (child weights, self weights)
 * 
 *         weights_tree.resize(tree_depth)             # <<<<<<<<<<<<<<
 *         cdef np_long level, feature_ctr, parent_index_full_tree
 *         cdef np_float noise_ratio
 */
  try {
    __pyx_v_weights_tree.resize(__pyx_v_tree_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 2204, __pyx_L1_error)
  }

  /* "awe_ml/classifier_cython.pyx":2213
 * 
 *         #iterate through each level
 *         for level in range(tree_depth):             # <<<<<<<<<<<<<<
 *             full_tree_indicies = self.full_tree_indicies_list[level]
 *             local_tree_size = full_tree_indicies.size()
 */
  __pyx_t_11 = __pyx_v_tree_depth;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_level = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2214
 *         #iterate through each level
 *         for level in range(tree_depth):
 *             full_tree_indicies = self.full_tree_indicies_list[level]             # <<<<<<<<<<<<<<
 *             local_tree_size = full_tree_indicies.size()
 *             child_full_tree_data = & self.full_tree_vector[level]
 */
    __pyx_v_full_tree_indicies = (__pyx_v_self->full_tree_indicies_list[__pyx_v_level]);

    /* "awe_ml/classifier_cython.pyx":2215
 *         for level in range(tree_depth):
 *             full_tree_indicies = self.full_tree_indicies_list[level]
 *             local_tree_size = full_tree_indicies.size()             # <<<<<<<<<<<<<<
 *             child_full_tree_data = & self.full_tree_vector[level]
 * 
 */
    __pyx_v_local_tree_size = __pyx_v_full_tree_indicies.size();

    /* "awe_ml/classifier_cython.pyx":2216
 *             full_tree_indicies = self.full_tree_indicies_list[level]
 *             local_tree_size = full_tree_indicies.size()
 *             child_full_tree_data = & self.full_tree_vector[level]             # <<<<<<<<<<<<<<
 * 
 *             #
 */
    __pyx_v_child_full_tree_data = (&(__pyx_v_self->full_tree_vector[__pyx_v_level]));

    /* "awe_ml/classifier_cython.pyx":2223
 *             # label_array=self.node_label_list[level]
 * 
 *             if level!=0: parent_full_tree_to_local_tree_lookup = self.full_tree_to_local_tree_lookup_list[level - 1]             # <<<<<<<<<<<<<<
 * 
 *             weights_tree[level].resize(local_tree_size)
 */
    __pyx_t_14 = ((__pyx_v_level != 0) != 0);
    if (__pyx_t_14) {
      __pyx_v_parent_full_tree_to_local_tree_lookup = (__pyx_v_self->full_tree_to_local_tree_lookup_list[(__pyx_v_level - 1)]);
    }

    /* "awe_ml/classifier_cython.pyx":2225
 *             if level!=0: parent_full_tree_to_local_tree_lookup = self.full_tree_to_local_tree_lookup_list[level - 1]
 * 
 *             weights_tree[level].resize(local_tree_size)             # <<<<<<<<<<<<<<
 * 
 *             # iterate through each node at level
 */
    try {
      (__pyx_v_weights_tree[__pyx_v_level]).resize(__pyx_v_local_tree_size);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2225, __pyx_L1_error)
    }

    /* "awe_ml/classifier_cython.pyx":2228
 * 
 *             # iterate through each node at level
 *             for local_tree_index in range(local_tree_size):             # <<<<<<<<<<<<<<
 * 
 *                 #resize weights tree to have correct number of features
 */
    __pyx_t_15 = __pyx_v_local_tree_size;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_local_tree_index = __pyx_t_17;

      /* "awe_ml/classifier_cython.pyx":2231
 * 
 *                 #resize weights tree to have correct number of features
 *                 weights_tree[level][local_tree_index].resize(max(level,1))             # <<<<<<<<<<<<<<
 * 
 *                 #resize weights tree to have correct number of classes per feature
 */
      __pyx_t_18 = 1;
      __pyx_t_19 = __pyx_v_level;
      if (((__pyx_t_18 > __pyx_t_19) != 0)) {
        __pyx_t_20 = __pyx_t_18;
      } else {
        __pyx_t_20 = __pyx_t_19;
      }
      try {
        ((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index]).resize(__pyx_t_20);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 2231, __pyx_L1_error)
      }

      /* "awe_ml/classifier_cython.pyx":2234
 * 
 *                 #resize weights tree to have correct number of classes per feature
 *                 for feature_ctr in range(max(level,1)):             # <<<<<<<<<<<<<<
 *                     weights_tree[level][local_tree_index][feature_ctr].resize(self.n_classes)
 *                     # initialize all values:
 */
      __pyx_t_20 = 1;
      __pyx_t_19 = __pyx_v_level;
      if (((__pyx_t_20 > __pyx_t_19) != 0)) {
        __pyx_t_18 = __pyx_t_20;
      } else {
        __pyx_t_18 = __pyx_t_19;
      }
      __pyx_t_20 = __pyx_t_18;
      __pyx_t_18 = __pyx_t_20;
      for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
        __pyx_v_feature_ctr = __pyx_t_19;

        /* "awe_ml/classifier_cython.pyx":2235
 *                 #resize weights tree to have correct number of classes per feature
 *                 for feature_ctr in range(max(level,1)):
 *                     weights_tree[level][local_tree_index][feature_ctr].resize(self.n_classes)             # <<<<<<<<<<<<<<
 *                     # initialize all values:
 *                     for class_num in range(self.n_classes):
 */
        try {
          (((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_feature_ctr]).resize(__pyx_v_self->n_classes);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 2235, __pyx_L1_error)
        }

        /* "awe_ml/classifier_cython.pyx":2237
 *                     weights_tree[level][local_tree_index][feature_ctr].resize(self.n_classes)
 *                     # initialize all values:
 *                     for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                         weights_tree[level][local_tree_index][feature_ctr][class_num].first =0
 *                         weights_tree[level][local_tree_index][feature_ctr][class_num].second =0
 */
        __pyx_t_21 = __pyx_v_self->n_classes;
        __pyx_t_22 = __pyx_t_21;
        for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
          __pyx_v_class_num = __pyx_t_23;

          /* "awe_ml/classifier_cython.pyx":2238
 *                     # initialize all values:
 *                     for class_num in range(self.n_classes):
 *                         weights_tree[level][local_tree_index][feature_ctr][class_num].first =0             # <<<<<<<<<<<<<<
 *                         weights_tree[level][local_tree_index][feature_ctr][class_num].second =0
 * 
 */
          ((((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_feature_ctr])[__pyx_v_class_num]).first = 0.0;

          /* "awe_ml/classifier_cython.pyx":2239
 *                     for class_num in range(self.n_classes):
 *                         weights_tree[level][local_tree_index][feature_ctr][class_num].first =0
 *                         weights_tree[level][local_tree_index][feature_ctr][class_num].second =0             # <<<<<<<<<<<<<<
 * 
 * 
 */
          ((((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_feature_ctr])[__pyx_v_class_num]).second = 0.0;
        }
      }

      /* "awe_ml/classifier_cython.pyx":2243
 * 
 *                 ##create indicies for each value:
 *                 self.classification_values_list[level].set_node(local_tree_index)             # <<<<<<<<<<<<<<
 *                 child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])
 * 
 */
      (__pyx_v_self->classification_values_list[__pyx_v_level]).set_node(__pyx_v_local_tree_index);

      /* "awe_ml/classifier_cython.pyx":2244
 *                 ##create indicies for each value:
 *                 self.classification_values_list[level].set_node(local_tree_index)
 *                 child_full_tree_data[0].set_node(full_tree_indicies[local_tree_index])             # <<<<<<<<<<<<<<
 * 
 *                 # child_full_tree_index =
 */
      (__pyx_v_child_full_tree_data[0]).set_node((__pyx_v_full_tree_indicies[__pyx_v_local_tree_index]));

      /* "awe_ml/classifier_cython.pyx":2252
 * 
 *                 #compute noise ratio, i.e what fraction of weight is attributed to self vs children
 *                 noise_ratio = self.classification_values_list[level].max_child_noise[0] / child_full_tree_data[0].noise_weight[0]             # <<<<<<<<<<<<<<
 * 
 *                 if level ==0:
 */
      try {
        __pyx_t_24 = (__pyx_v_self->classification_values_list[__pyx_v_level]).max_child_noise[0];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 2252, __pyx_L1_error)
      }
      try {
        __pyx_t_25 = (__pyx_v_child_full_tree_data[0]).noise_weight[0];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 2252, __pyx_L1_error)
      }
      __pyx_v_noise_ratio = (((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_24) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_25));

      /* "awe_ml/classifier_cython.pyx":2254
 *                 noise_ratio = self.classification_values_list[level].max_child_noise[0] / child_full_tree_data[0].noise_weight[0]
 * 
 *                 if level ==0:             # <<<<<<<<<<<<<<
 *                     for class_num in range(self.n_classes):
 *                         weights_tree[level][0][0][class_num].first =noise_ratio
 */
      __pyx_t_14 = ((__pyx_v_level == 0) != 0);
      if (__pyx_t_14) {

        /* "awe_ml/classifier_cython.pyx":2255
 * 
 *                 if level ==0:
 *                     for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                         weights_tree[level][0][0][class_num].first =noise_ratio
 *                         weights_tree[level][0][0][class_num].second =(1-noise_ratio)
 */
        __pyx_t_19 = __pyx_v_self->n_classes;
        __pyx_t_21 = __pyx_t_19;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
          __pyx_v_class_num = __pyx_t_22;

          /* "awe_ml/classifier_cython.pyx":2256
 *                 if level ==0:
 *                     for class_num in range(self.n_classes):
 *                         weights_tree[level][0][0][class_num].first =noise_ratio             # <<<<<<<<<<<<<<
 *                         weights_tree[level][0][0][class_num].second =(1-noise_ratio)
 *                 else:
 */
          ((((__pyx_v_weights_tree[__pyx_v_level])[0])[0])[__pyx_v_class_num]).first = __pyx_v_noise_ratio;

          /* "awe_ml/classifier_cython.pyx":2257
 *                     for class_num in range(self.n_classes):
 *                         weights_tree[level][0][0][class_num].first =noise_ratio
 *                         weights_tree[level][0][0][class_num].second =(1-noise_ratio)             # <<<<<<<<<<<<<<
 *                 else:
 *                     child_label_ptr = child_full_tree_data[0].label.ptr() #find child label
 */
          ((((__pyx_v_weights_tree[__pyx_v_level])[0])[0])[__pyx_v_class_num]).second = (1.0 - __pyx_v_noise_ratio);
        }

        /* "awe_ml/classifier_cython.pyx":2254
 *                 noise_ratio = self.classification_values_list[level].max_child_noise[0] / child_full_tree_data[0].noise_weight[0]
 * 
 *                 if level ==0:             # <<<<<<<<<<<<<<
 *                     for class_num in range(self.n_classes):
 *                         weights_tree[level][0][0][class_num].first =noise_ratio
 */
        goto __pyx_L12;
      }

      /* "awe_ml/classifier_cython.pyx":2259
 *                         weights_tree[level][0][0][class_num].second =(1-noise_ratio)
 *                 else:
 *                     child_label_ptr = child_full_tree_data[0].label.ptr() #find child label             # <<<<<<<<<<<<<<
 *                     parent_full_tree_data = & self.full_tree_vector[level-1]
 *                     # parent_label_array = self.node_label_list[level-1]
 */
      /*else*/ {
        try {
          __pyx_t_26 = (__pyx_v_child_full_tree_data[0]).label.ptr();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 2259, __pyx_L1_error)
        }
        __pyx_v_child_label_ptr = __pyx_t_26;

        /* "awe_ml/classifier_cython.pyx":2260
 *                 else:
 *                     child_label_ptr = child_full_tree_data[0].label.ptr() #find child label
 *                     parent_full_tree_data = & self.full_tree_vector[level-1]             # <<<<<<<<<<<<<<
 *                     # parent_label_array = self.node_label_list[level-1]
 * 
 */
        __pyx_v_parent_full_tree_data = (&(__pyx_v_self->full_tree_vector[(__pyx_v_level - 1)]));

        /* "awe_ml/classifier_cython.pyx":2264
 * 
 *                     # iterate through all parents to get the weight from each parent that is passed down to the children
 *                     nonzero_self_weight = False             # <<<<<<<<<<<<<<
 *                     for parent_ctr in range(level):
 * 
 */
        __pyx_v_nonzero_self_weight = 0;

        /* "awe_ml/classifier_cython.pyx":2265
 *                     # iterate through all parents to get the weight from each parent that is passed down to the children
 *                     nonzero_self_weight = False
 *                     for parent_ctr in range(level):             # <<<<<<<<<<<<<<
 * 
 *                         # get parent index and check if it exists
 */
        __pyx_t_19 = __pyx_v_level;
        __pyx_t_21 = __pyx_t_19;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
          __pyx_v_parent_ctr = __pyx_t_22;

          /* "awe_ml/classifier_cython.pyx":2268
 * 
 *                         # get parent index and check if it exists
 *                         parent_index_full_tree = child_full_tree_data[0].parent_indicies[parent_ctr]             # <<<<<<<<<<<<<<
 *                         parent_full_tree_data.set_node(parent_index_full_tree)
 * 
 */
          try {
            __pyx_t_23 = (__pyx_v_child_full_tree_data[0]).parent_indicies[__pyx_v_parent_ctr];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 2268, __pyx_L1_error)
          }
          __pyx_v_parent_index_full_tree = __pyx_t_23;

          /* "awe_ml/classifier_cython.pyx":2269
 *                         # get parent index and check if it exists
 *                         parent_index_full_tree = child_full_tree_data[0].parent_indicies[parent_ctr]
 *                         parent_full_tree_data.set_node(parent_index_full_tree)             # <<<<<<<<<<<<<<
 * 
 *                         if parent_index_full_tree>=0:
 */
          __pyx_v_parent_full_tree_data->set_node(__pyx_v_parent_index_full_tree);

          /* "awe_ml/classifier_cython.pyx":2271
 *                         parent_full_tree_data.set_node(parent_index_full_tree)
 * 
 *                         if parent_index_full_tree>=0:             # <<<<<<<<<<<<<<
 * 
 *                             parent_index_local = parent_full_tree_to_local_tree_lookup[parent_index_full_tree]
 */
          __pyx_t_14 = ((__pyx_v_parent_index_full_tree >= 0) != 0);
          if (__pyx_t_14) {

            /* "awe_ml/classifier_cython.pyx":2273
 *                         if parent_index_full_tree>=0:
 * 
 *                             parent_index_local = parent_full_tree_to_local_tree_lookup[parent_index_full_tree]             # <<<<<<<<<<<<<<
 *                             self.classification_values_list[level-1].set_node(parent_index_local) #set parent node
 *                             # compute_classification_vals_indicies(parent_inds,parent_index_local, self.n_classes)
 */
            __pyx_v_parent_index_local = (__pyx_v_parent_full_tree_to_local_tree_lookup[__pyx_v_parent_index_full_tree]);

            /* "awe_ml/classifier_cython.pyx":2274
 * 
 *                             parent_index_local = parent_full_tree_to_local_tree_lookup[parent_index_full_tree]
 *                             self.classification_values_list[level-1].set_node(parent_index_local) #set parent node             # <<<<<<<<<<<<<<
 *                             # compute_classification_vals_indicies(parent_inds,parent_index_local, self.n_classes)
 * 
 */
            (__pyx_v_self->classification_values_list[(__pyx_v_level - 1)]).set_node(__pyx_v_parent_index_local);

            /* "awe_ml/classifier_cython.pyx":2279
 * 
 *                             #get parent label
 *                             parent_label_ptr = parent_full_tree_data.label.ptr() #find parent label             # <<<<<<<<<<<<<<
 *                             child_feature_ctr =0
 * 
 */
            try {
              __pyx_t_26 = __pyx_v_parent_full_tree_data->label.ptr();
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(1, 2279, __pyx_L1_error)
            }
            __pyx_v_parent_label_ptr = __pyx_t_26;

            /* "awe_ml/classifier_cython.pyx":2280
 *                             #get parent label
 *                             parent_label_ptr = parent_full_tree_data.label.ptr() #find parent label
 *                             child_feature_ctr =0             # <<<<<<<<<<<<<<
 * 
 *                             # iterate through each feature in the parent label so that the weight from each parent can be divided to the feature / top of tree location
 */
            __pyx_v_child_feature_ctr = 0;

            /* "awe_ml/classifier_cython.pyx":2283
 * 
 *                             # iterate through each feature in the parent label so that the weight from each parent can be divided to the feature / top of tree location
 *                             for parent_feature_ind in range(max(level-1,1)):             # <<<<<<<<<<<<<<
 *                                 #find child_feature_ctr that indicates the location of the parent feature (for level=1, child_feature_ctr=0)
 *                                 if level>1:
 */
            __pyx_t_20 = 1;
            __pyx_t_18 = (__pyx_v_level - 1);
            if (((__pyx_t_20 > __pyx_t_18) != 0)) {
              __pyx_t_27 = __pyx_t_20;
            } else {
              __pyx_t_27 = __pyx_t_18;
            }
            __pyx_t_20 = __pyx_t_27;
            __pyx_t_27 = __pyx_t_20;
            for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_27; __pyx_t_18+=1) {
              __pyx_v_parent_feature_ind = __pyx_t_18;

              /* "awe_ml/classifier_cython.pyx":2285
 *                             for parent_feature_ind in range(max(level-1,1)):
 *                                 #find child_feature_ctr that indicates the location of the parent feature (for level=1, child_feature_ctr=0)
 *                                 if level>1:             # <<<<<<<<<<<<<<
 *                                     comb_feat_ind=parent_label_ptr[parent_feature_ind]
 * 
 */
              __pyx_t_14 = ((__pyx_v_level > 1) != 0);
              if (__pyx_t_14) {

                /* "awe_ml/classifier_cython.pyx":2286
 *                                 #find child_feature_ctr that indicates the location of the parent feature (for level=1, child_feature_ctr=0)
 *                                 if level>1:
 *                                     comb_feat_ind=parent_label_ptr[parent_feature_ind]             # <<<<<<<<<<<<<<
 * 
 *                                     #find match in child label, aka feature #.  Labels are ordered and so feature ind does not need to be reset
 */
                __pyx_v_comb_feat_ind = (__pyx_v_parent_label_ptr[__pyx_v_parent_feature_ind]);

                /* "awe_ml/classifier_cython.pyx":2289
 * 
 *                                     #find match in child label, aka feature #.  Labels are ordered and so feature ind does not need to be reset
 *                                     while child_label_ptr[child_feature_ctr]!=comb_feat_ind:             # <<<<<<<<<<<<<<
 *                                         child_feature_ctr+=1
 * 
 */
                while (1) {
                  __pyx_t_14 = (((__pyx_v_child_label_ptr[__pyx_v_child_feature_ctr]) != __pyx_v_comb_feat_ind) != 0);
                  if (!__pyx_t_14) break;

                  /* "awe_ml/classifier_cython.pyx":2290
 *                                     #find match in child label, aka feature #.  Labels are ordered and so feature ind does not need to be reset
 *                                     while child_label_ptr[child_feature_ctr]!=comb_feat_ind:
 *                                         child_feature_ctr+=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
                  __pyx_v_child_feature_ctr = (__pyx_v_child_feature_ctr + 1);
                }

                /* "awe_ml/classifier_cython.pyx":2285
 *                             for parent_feature_ind in range(max(level-1,1)):
 *                                 #find child_feature_ctr that indicates the location of the parent feature (for level=1, child_feature_ctr=0)
 *                                 if level>1:             # <<<<<<<<<<<<<<
 *                                     comb_feat_ind=parent_label_ptr[parent_feature_ind]
 * 
 */
              }

              /* "awe_ml/classifier_cython.pyx":2294
 * 
 *                                 #iterate through classes (calculate each class independently)
 *                                 for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                                     #for each parent find the parent  weight sum and the individual child weight and the noise ratio
 *                                     parent_weight_sum = self.classification_values_list[level-1].weight_sum[class_num]
 */
              __pyx_t_23 = __pyx_v_self->n_classes;
              __pyx_t_28 = __pyx_t_23;
              for (__pyx_t_29 = 0; __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
                __pyx_v_class_num = __pyx_t_29;

                /* "awe_ml/classifier_cython.pyx":2296
 *                                 for class_num in range(self.n_classes):
 *                                     #for each parent find the parent  weight sum and the individual child weight and the noise ratio
 *                                     parent_weight_sum = self.classification_values_list[level-1].weight_sum[class_num]             # <<<<<<<<<<<<<<
 *                                     child_weight= self.local_weight_tree[level][local_tree_index][parent_ctr][class_num]
 * 
 */
                try {
                  __pyx_t_25 = (__pyx_v_self->classification_values_list[(__pyx_v_level - 1)]).weight_sum[__pyx_v_class_num];
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(1, 2296, __pyx_L1_error)
                }
                __pyx_v_parent_weight_sum = __pyx_t_25;

                /* "awe_ml/classifier_cython.pyx":2297
 *                                     #for each parent find the parent  weight sum and the individual child weight and the noise ratio
 *                                     parent_weight_sum = self.classification_values_list[level-1].weight_sum[class_num]
 *                                     child_weight= self.local_weight_tree[level][local_tree_index][parent_ctr][class_num]             # <<<<<<<<<<<<<<
 * 
 * 
 */
                __pyx_v_child_weight = ((((__pyx_v_self->local_weight_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_parent_ctr])[__pyx_v_class_num]);

                /* "awe_ml/classifier_cython.pyx":2300
 * 
 * 
 *                                     parent_tree_weight = weights_tree[level-1][parent_index_local][parent_feature_ind][class_num].first             # <<<<<<<<<<<<<<
 * 
 *                                     # weight per class & feature num+= parent weight per (class & feature num) * child weight / parent weight sum
 */
                __pyx_t_25 = ((((__pyx_v_weights_tree[(__pyx_v_level - 1)])[__pyx_v_parent_index_local])[__pyx_v_parent_feature_ind])[__pyx_v_class_num]).first;
                __pyx_v_parent_tree_weight = __pyx_t_25;

                /* "awe_ml/classifier_cython.pyx":2304
 *                                     # weight per class & feature num+= parent weight per (class & feature num) * child weight / parent weight sum
 *                                     #compute how much each parent tree weight scaled by
 *                                     if child_weight==0:             # <<<<<<<<<<<<<<
 *                                         child_tree_weight=0
 *                                     else:
 */
                __pyx_t_14 = ((__pyx_v_child_weight == 0.0) != 0);
                if (__pyx_t_14) {

                  /* "awe_ml/classifier_cython.pyx":2305
 *                                     #compute how much each parent tree weight scaled by
 *                                     if child_weight==0:
 *                                         child_tree_weight=0             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         child_tree_weight = parent_tree_weight*child_weight/parent_weight_sum
 */
                  __pyx_v_child_tree_weight = 0.0;

                  /* "awe_ml/classifier_cython.pyx":2304
 *                                     # weight per class & feature num+= parent weight per (class & feature num) * child weight / parent weight sum
 *                                     #compute how much each parent tree weight scaled by
 *                                     if child_weight==0:             # <<<<<<<<<<<<<<
 *                                         child_tree_weight=0
 *                                     else:
 */
                  goto __pyx_L25;
                }

                /* "awe_ml/classifier_cython.pyx":2307
 *                                         child_tree_weight=0
 *                                     else:
 *                                         child_tree_weight = parent_tree_weight*child_weight/parent_weight_sum             # <<<<<<<<<<<<<<
 * 
 *                                     #store child and self weights based on noise ratio
 */
                /*else*/ {
                  __pyx_v_child_tree_weight = ((__pyx_v_parent_tree_weight * __pyx_v_child_weight) / __pyx_v_parent_weight_sum);
                }
                __pyx_L25:;

                /* "awe_ml/classifier_cython.pyx":2311
 *                                     #store child and self weights based on noise ratio
 *                                     # only assign weight to child if the child weight sum for the particular class is nonzero
 *                                     if self.classification_values_list[level].weight_sum[class_num]!=0:             # <<<<<<<<<<<<<<
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].first += child_tree_weight*noise_ratio
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].second += child_tree_weight*(1-noise_ratio)
 */
                try {
                  __pyx_t_25 = (__pyx_v_self->classification_values_list[__pyx_v_level]).weight_sum[__pyx_v_class_num];
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(1, 2311, __pyx_L1_error)
                }
                __pyx_t_14 = ((__pyx_t_25 != 0.0) != 0);
                if (__pyx_t_14) {

                  /* "awe_ml/classifier_cython.pyx":2312
 *                                     # only assign weight to child if the child weight sum for the particular class is nonzero
 *                                     if self.classification_values_list[level].weight_sum[class_num]!=0:
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].first += child_tree_weight*noise_ratio             # <<<<<<<<<<<<<<
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].second += child_tree_weight*(1-noise_ratio)
 *                                     else:
 */
                  __pyx_t_30 = __pyx_v_level;
                  __pyx_t_31 = __pyx_v_local_tree_index;
                  __pyx_t_32 = __pyx_v_child_feature_ctr;
                  __pyx_t_33 = __pyx_v_class_num;
                  ((((__pyx_v_weights_tree[__pyx_t_30])[__pyx_t_31])[__pyx_t_32])[__pyx_t_33]).first = (((((__pyx_v_weights_tree[__pyx_t_30])[__pyx_t_31])[__pyx_t_32])[__pyx_t_33]).first + (__pyx_v_child_tree_weight * __pyx_v_noise_ratio));

                  /* "awe_ml/classifier_cython.pyx":2313
 *                                     if self.classification_values_list[level].weight_sum[class_num]!=0:
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].first += child_tree_weight*noise_ratio
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].second += child_tree_weight*(1-noise_ratio)             # <<<<<<<<<<<<<<
 *                                     else:
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].second += child_tree_weight
 */
                  __pyx_t_30 = __pyx_v_level;
                  __pyx_t_31 = __pyx_v_local_tree_index;
                  __pyx_t_32 = __pyx_v_child_feature_ctr;
                  __pyx_t_33 = __pyx_v_class_num;
                  ((((__pyx_v_weights_tree[__pyx_t_30])[__pyx_t_31])[__pyx_t_32])[__pyx_t_33]).second = (((((__pyx_v_weights_tree[__pyx_t_30])[__pyx_t_31])[__pyx_t_32])[__pyx_t_33]).second + (__pyx_v_child_tree_weight * (1.0 - __pyx_v_noise_ratio)));

                  /* "awe_ml/classifier_cython.pyx":2311
 *                                     #store child and self weights based on noise ratio
 *                                     # only assign weight to child if the child weight sum for the particular class is nonzero
 *                                     if self.classification_values_list[level].weight_sum[class_num]!=0:             # <<<<<<<<<<<<<<
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].first += child_tree_weight*noise_ratio
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].second += child_tree_weight*(1-noise_ratio)
 */
                  goto __pyx_L26;
                }

                /* "awe_ml/classifier_cython.pyx":2315
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].second += child_tree_weight*(1-noise_ratio)
 *                                     else:
 *                                         weights_tree[level][local_tree_index][child_feature_ctr][class_num].second += child_tree_weight             # <<<<<<<<<<<<<<
 * 
 *                                     # pws2 = self.classification_values_list[level][child_inds.weight_sum_start+class_num]
 */
                /*else*/ {
                  __pyx_t_30 = __pyx_v_level;
                  __pyx_t_31 = __pyx_v_local_tree_index;
                  __pyx_t_32 = __pyx_v_child_feature_ctr;
                  __pyx_t_33 = __pyx_v_class_num;
                  ((((__pyx_v_weights_tree[__pyx_t_30])[__pyx_t_31])[__pyx_t_32])[__pyx_t_33]).second = (((((__pyx_v_weights_tree[__pyx_t_30])[__pyx_t_31])[__pyx_t_32])[__pyx_t_33]).second + __pyx_v_child_tree_weight);
                }
                __pyx_L26:;

                /* "awe_ml/classifier_cython.pyx":2337
 * 
 * 
 *                                     if weights_tree[level][local_tree_index][child_feature_ctr][class_num].second!=0:             # <<<<<<<<<<<<<<
 *                                         nonzero_self_weight=True
 *                     if nonzero_self_weight:
 */
                __pyx_t_14 = ((((((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_child_feature_ctr])[__pyx_v_class_num]).second != 0.0) != 0);
                if (__pyx_t_14) {

                  /* "awe_ml/classifier_cython.pyx":2338
 * 
 *                                     if weights_tree[level][local_tree_index][child_feature_ctr][class_num].second!=0:
 *                                         nonzero_self_weight=True             # <<<<<<<<<<<<<<
 *                     if nonzero_self_weight:
 *                         num_features+=1
 */
                  __pyx_v_nonzero_self_weight = 1;

                  /* "awe_ml/classifier_cython.pyx":2337
 * 
 * 
 *                                     if weights_tree[level][local_tree_index][child_feature_ctr][class_num].second!=0:             # <<<<<<<<<<<<<<
 *                                         nonzero_self_weight=True
 *                     if nonzero_self_weight:
 */
                }
              }
            }

            /* "awe_ml/classifier_cython.pyx":2271
 *                         parent_full_tree_data.set_node(parent_index_full_tree)
 * 
 *                         if parent_index_full_tree>=0:             # <<<<<<<<<<<<<<
 * 
 *                             parent_index_local = parent_full_tree_to_local_tree_lookup[parent_index_full_tree]
 */
          }
        }

        /* "awe_ml/classifier_cython.pyx":2339
 *                                     if weights_tree[level][local_tree_index][child_feature_ctr][class_num].second!=0:
 *                                         nonzero_self_weight=True
 *                     if nonzero_self_weight:             # <<<<<<<<<<<<<<
 *                         num_features+=1
 * 
 */
        __pyx_t_14 = (__pyx_v_nonzero_self_weight != 0);
        if (__pyx_t_14) {

          /* "awe_ml/classifier_cython.pyx":2340
 *                                         nonzero_self_weight=True
 *                     if nonzero_self_weight:
 *                         num_features+=1             # <<<<<<<<<<<<<<
 * 
 *             # print(weights_tree)
 */
          __pyx_v_num_features = (__pyx_v_num_features + 1);

          /* "awe_ml/classifier_cython.pyx":2339
 *                                     if weights_tree[level][local_tree_index][child_feature_ctr][class_num].second!=0:
 *                                         nonzero_self_weight=True
 *                     if nonzero_self_weight:             # <<<<<<<<<<<<<<
 *                         num_features+=1
 * 
 */
        }
      }
      __pyx_L12:;
    }
  }

  /* "awe_ml/classifier_cython.pyx":2350
 *         cdef np_long n_explainable_cols
 *         #count number of rows in numpy array /  store indicies
 *         level_ind =0             # <<<<<<<<<<<<<<
 *         feature_ind =level_ind+1
 *         counts_ind = feature_ind+ tree_depth-1
 */
  __pyx_v_level_ind = 0;

  /* "awe_ml/classifier_cython.pyx":2351
 *         #count number of rows in numpy array /  store indicies
 *         level_ind =0
 *         feature_ind =level_ind+1             # <<<<<<<<<<<<<<
 *         counts_ind = feature_ind+ tree_depth-1
 *         p_ind = counts_ind+self.n_classes
 */
  __pyx_v_feature_ind = (__pyx_v_level_ind + 1);

  /* "awe_ml/classifier_cython.pyx":2352
 *         level_ind =0
 *         feature_ind =level_ind+1
 *         counts_ind = feature_ind+ tree_depth-1             # <<<<<<<<<<<<<<
 *         p_ind = counts_ind+self.n_classes
 *         weight_ind = p_ind+self.n_classes
 */
  __pyx_v_counts_ind = ((__pyx_v_feature_ind + __pyx_v_tree_depth) - 1);

  /* "awe_ml/classifier_cython.pyx":2353
 *         feature_ind =level_ind+1
 *         counts_ind = feature_ind+ tree_depth-1
 *         p_ind = counts_ind+self.n_classes             # <<<<<<<<<<<<<<
 *         weight_ind = p_ind+self.n_classes
 *         weight_by_feature_ind = weight_ind+self.n_classes
 */
  __pyx_v_p_ind = (__pyx_v_counts_ind + __pyx_v_self->n_classes);

  /* "awe_ml/classifier_cython.pyx":2354
 *         counts_ind = feature_ind+ tree_depth-1
 *         p_ind = counts_ind+self.n_classes
 *         weight_ind = p_ind+self.n_classes             # <<<<<<<<<<<<<<
 *         weight_by_feature_ind = weight_ind+self.n_classes
 *         n_explainable_values_cols = weight_ind + self.n_classes*(tree_depth+1)
 */
  __pyx_v_weight_ind = (__pyx_v_p_ind + __pyx_v_self->n_classes);

  /* "awe_ml/classifier_cython.pyx":2355
 *         p_ind = counts_ind+self.n_classes
 *         weight_ind = p_ind+self.n_classes
 *         weight_by_feature_ind = weight_ind+self.n_classes             # <<<<<<<<<<<<<<
 *         n_explainable_values_cols = weight_ind + self.n_classes*(tree_depth+1)
 * 
 */
  __pyx_v_weight_by_feature_ind = (__pyx_v_weight_ind + __pyx_v_self->n_classes);

  /* "awe_ml/classifier_cython.pyx":2356
 *         weight_ind = p_ind+self.n_classes
 *         weight_by_feature_ind = weight_ind+self.n_classes
 *         n_explainable_values_cols = weight_ind + self.n_classes*(tree_depth+1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_n_explainable_values_cols = (__pyx_v_weight_ind + (__pyx_v_self->n_classes * (__pyx_v_tree_depth + 1)));

  /* "awe_ml/classifier_cython.pyx":2361
 *         #convert weights tree to a numpy array with relevant data
 *         cdef np_float [:,:] explainable_values
 *         explainable_values = np.zeros((num_features,n_explainable_values_cols),dtype = NP_FLOAT)             # <<<<<<<<<<<<<<
 *         cdef np_long parent_level, feature_end_ind
 *         cdef np_long * label_ptr
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_num_features); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_n_explainable_values_cols); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_FLOAT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_34 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_34.memview)) __PYX_ERR(1, 2361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_explainable_values = __pyx_t_34;
  __pyx_t_34.memview = NULL;
  __pyx_t_34.data = NULL;

  /* "awe_ml/classifier_cython.pyx":2370
 *         # cdef np_long[:,:] upper_label_array, counts_array
 *         # cdef np_float[:,:] upper_p0_array
 *         cdef np_long full_tree_index=0, label_size             # <<<<<<<<<<<<<<
 *         row_index=-1
 * 
 */
  __pyx_v_full_tree_index = 0;

  /* "awe_ml/classifier_cython.pyx":2371
 *         # cdef np_float[:,:] upper_p0_array
 *         cdef np_long full_tree_index=0, label_size
 *         row_index=-1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_row_index = -1;

  /* "awe_ml/classifier_cython.pyx":2374
 * 
 * 
 *         for level in range(tree_depth):             # <<<<<<<<<<<<<<
 *             n_features_in_level = weights_tree[level].size()
 *             full_tree_indicies = self.full_tree_indicies_list[level]
 */
  __pyx_t_11 = __pyx_v_tree_depth;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_level = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2375
 * 
 *         for level in range(tree_depth):
 *             n_features_in_level = weights_tree[level].size()             # <<<<<<<<<<<<<<
 *             full_tree_indicies = self.full_tree_indicies_list[level]
 *             # label = self.node_label_list[level][full_tree_index,:]
 */
    __pyx_v_n_features_in_level = (__pyx_v_weights_tree[__pyx_v_level]).size();

    /* "awe_ml/classifier_cython.pyx":2376
 *         for level in range(tree_depth):
 *             n_features_in_level = weights_tree[level].size()
 *             full_tree_indicies = self.full_tree_indicies_list[level]             # <<<<<<<<<<<<<<
 *             # label = self.node_label_list[level][full_tree_index,:]
 * 
 */
    __pyx_v_full_tree_indicies = (__pyx_v_self->full_tree_indicies_list[__pyx_v_level]);

    /* "awe_ml/classifier_cython.pyx":2379
 *             # label = self.node_label_list[level][full_tree_index,:]
 * 
 *             full_tree_data = & self.full_tree_vector[level]             # <<<<<<<<<<<<<<
 *             # upper_label_array = self.node_label_list[level]
 *             # upper_p0_array =self.p0_list[level]
 */
    __pyx_v_full_tree_data = (&(__pyx_v_self->full_tree_vector[__pyx_v_level]));

    /* "awe_ml/classifier_cython.pyx":2385
 * 
 * 
 *             for local_tree_index in range(n_features_in_level ):             # <<<<<<<<<<<<<<
 *                 #check if the node has nonzero self weights:
 *                 nonzero_self_weight = False
 */
    __pyx_t_15 = __pyx_v_n_features_in_level;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_local_tree_index = __pyx_t_17;

      /* "awe_ml/classifier_cython.pyx":2387
 *             for local_tree_index in range(n_features_in_level ):
 *                 #check if the node has nonzero self weights:
 *                 nonzero_self_weight = False             # <<<<<<<<<<<<<<
 *                 for feature_ctr in range(level):
 *                     for class_num in range(self.n_classes):
 */
      __pyx_v_nonzero_self_weight = 0;

      /* "awe_ml/classifier_cython.pyx":2388
 *                 #check if the node has nonzero self weights:
 *                 nonzero_self_weight = False
 *                 for feature_ctr in range(level):             # <<<<<<<<<<<<<<
 *                     for class_num in range(self.n_classes):
 *                         if weights_tree[level][local_tree_index][feature_ctr][class_num].second!=0:
 */
      __pyx_t_19 = __pyx_v_level;
      __pyx_t_21 = __pyx_t_19;
      for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
        __pyx_v_feature_ctr = __pyx_t_22;

        /* "awe_ml/classifier_cython.pyx":2389
 *                 nonzero_self_weight = False
 *                 for feature_ctr in range(level):
 *                     for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                         if weights_tree[level][local_tree_index][feature_ctr][class_num].second!=0:
 *                             nonzero_self_weight=True
 */
        __pyx_t_23 = __pyx_v_self->n_classes;
        __pyx_t_28 = __pyx_t_23;
        for (__pyx_t_29 = 0; __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
          __pyx_v_class_num = __pyx_t_29;

          /* "awe_ml/classifier_cython.pyx":2390
 *                 for feature_ctr in range(level):
 *                     for class_num in range(self.n_classes):
 *                         if weights_tree[level][local_tree_index][feature_ctr][class_num].second!=0:             # <<<<<<<<<<<<<<
 *                             nonzero_self_weight=True
 * 
 */
          __pyx_t_14 = ((((((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_feature_ctr])[__pyx_v_class_num]).second != 0.0) != 0);
          if (__pyx_t_14) {

            /* "awe_ml/classifier_cython.pyx":2391
 *                     for class_num in range(self.n_classes):
 *                         if weights_tree[level][local_tree_index][feature_ctr][class_num].second!=0:
 *                             nonzero_self_weight=True             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __pyx_v_nonzero_self_weight = 1;

            /* "awe_ml/classifier_cython.pyx":2390
 *                 for feature_ctr in range(level):
 *                     for class_num in range(self.n_classes):
 *                         if weights_tree[level][local_tree_index][feature_ctr][class_num].second!=0:             # <<<<<<<<<<<<<<
 *                             nonzero_self_weight=True
 * 
 */
          }
        }
      }

      /* "awe_ml/classifier_cython.pyx":2395
 * 
 *                 # if nonzero self weights then store node:
 *                 if nonzero_self_weight:             # <<<<<<<<<<<<<<
 *                     full_tree_index = full_tree_indicies[local_tree_index]
 *                     full_tree_data.set_node(full_tree_index)
 */
      __pyx_t_14 = (__pyx_v_nonzero_self_weight != 0);
      if (__pyx_t_14) {

        /* "awe_ml/classifier_cython.pyx":2396
 *                 # if nonzero self weights then store node:
 *                 if nonzero_self_weight:
 *                     full_tree_index = full_tree_indicies[local_tree_index]             # <<<<<<<<<<<<<<
 *                     full_tree_data.set_node(full_tree_index)
 * 
 */
        __pyx_v_full_tree_index = (__pyx_v_full_tree_indicies[__pyx_v_local_tree_index]);

        /* "awe_ml/classifier_cython.pyx":2397
 *                 if nonzero_self_weight:
 *                     full_tree_index = full_tree_indicies[local_tree_index]
 *                     full_tree_data.set_node(full_tree_index)             # <<<<<<<<<<<<<<
 * 
 *                     #create pointers for fast access
 */
        __pyx_v_full_tree_data->set_node(__pyx_v_full_tree_index);

        /* "awe_ml/classifier_cython.pyx":2400
 * 
 *                     #create pointers for fast access
 *                     label_ptr =  full_tree_data.label.ptr()             # <<<<<<<<<<<<<<
 *                     label_size = level
 *                     label_end_ptr = full_tree_data.label.ptr(label_size)
 */
        try {
          __pyx_t_26 = __pyx_v_full_tree_data->label.ptr();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 2400, __pyx_L1_error)
        }
        __pyx_v_label_ptr = __pyx_t_26;

        /* "awe_ml/classifier_cython.pyx":2401
 *                     #create pointers for fast access
 *                     label_ptr =  full_tree_data.label.ptr()
 *                     label_size = level             # <<<<<<<<<<<<<<
 *                     label_end_ptr = full_tree_data.label.ptr(label_size)
 *                     p0_ptr = full_tree_data.p0.ptr()
 */
        __pyx_v_label_size = __pyx_v_level;

        /* "awe_ml/classifier_cython.pyx":2402
 *                     label_ptr =  full_tree_data.label.ptr()
 *                     label_size = level
 *                     label_end_ptr = full_tree_data.label.ptr(label_size)             # <<<<<<<<<<<<<<
 *                     p0_ptr = full_tree_data.p0.ptr()
 * 
 */
        try {
          __pyx_t_26 = __pyx_v_full_tree_data->label.ptr(__pyx_v_label_size);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 2402, __pyx_L1_error)
        }
        __pyx_v_label_end_ptr = __pyx_t_26;

        /* "awe_ml/classifier_cython.pyx":2403
 *                     label_size = level
 *                     label_end_ptr = full_tree_data.label.ptr(label_size)
 *                     p0_ptr = full_tree_data.p0.ptr()             # <<<<<<<<<<<<<<
 * 
 *                     #### check if label is contains any already stored nodes
 */
        try {
          __pyx_t_35 = __pyx_v_full_tree_data->p0.ptr();
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 2403, __pyx_L1_error)
        }
        __pyx_v_p0_ptr = __pyx_t_35;

        /* "awe_ml/classifier_cython.pyx":2407
 *                     #### check if label is contains any already stored nodes
 *                     ###TODO: use numpy functions for now, change to C++ later
 *                     for parent_ind in range(row_index+1):             # <<<<<<<<<<<<<<
 * 
 *                         parent_level= <np_long> explainable_values[parent_ind,level_ind]
 */
        __pyx_t_20 = (__pyx_v_row_index + 1);
        __pyx_t_27 = __pyx_t_20;
        for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_27; __pyx_t_19+=1) {
          __pyx_v_parent_ind = __pyx_t_19;

          /* "awe_ml/classifier_cython.pyx":2409
 *                     for parent_ind in range(row_index+1):
 * 
 *                         parent_level= <np_long> explainable_values[parent_ind,level_ind]             # <<<<<<<<<<<<<<
 *                         if parent_level<level:
 *                             parental_label = explainable_values[parent_ind,feature_ind:(feature_ind+parent_level)]
 */
          __pyx_t_36 = __pyx_v_parent_ind;
          __pyx_t_37 = __pyx_v_level_ind;
          __pyx_v_parent_level = ((__pyx_t_6awe_ml_17classifier_cython_np_long)(*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_36 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_37 * __pyx_v_explainable_values.strides[1]) ))));

          /* "awe_ml/classifier_cython.pyx":2410
 * 
 *                         parent_level= <np_long> explainable_values[parent_ind,level_ind]
 *                         if parent_level<level:             # <<<<<<<<<<<<<<
 *                             parental_label = explainable_values[parent_ind,feature_ind:(feature_ind+parent_level)]
 *                             parental_size = parental_label.shape[0]
 */
          __pyx_t_14 = ((__pyx_v_parent_level < __pyx_v_level) != 0);
          if (__pyx_t_14) {

            /* "awe_ml/classifier_cython.pyx":2411
 *                         parent_level= <np_long> explainable_values[parent_ind,level_ind]
 *                         if parent_level<level:
 *                             parental_label = explainable_values[parent_ind,feature_ind:(feature_ind+parent_level)]             # <<<<<<<<<<<<<<
 *                             parental_size = parental_label.shape[0]
 * 
 */
            __pyx_t_38.data = __pyx_v_explainable_values.data;
            __pyx_t_38.memview = __pyx_v_explainable_values.memview;
            __PYX_INC_MEMVIEW(&__pyx_t_38, 0);
            {
    Py_ssize_t __pyx_tmp_idx = __pyx_v_parent_ind;
    Py_ssize_t __pyx_tmp_shape = __pyx_v_explainable_values.shape[0];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_explainable_values.strides[0];
    if (0 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (0 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 0)");
        __PYX_ERR(1, 2411, __pyx_L1_error)
    }
        __pyx_t_38.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_5 = -1;
            if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_38,
    __pyx_v_explainable_values.shape[1], __pyx_v_explainable_values.strides[1], __pyx_v_explainable_values.suboffsets[1],
    1,
    0,
    &__pyx_t_5,
    __pyx_v_feature_ind,
    (__pyx_v_feature_ind + __pyx_v_parent_level),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(1, 2411, __pyx_L1_error)
}

__PYX_XDEC_MEMVIEW(&__pyx_v_parental_label, 1);
            __pyx_v_parental_label = __pyx_t_38;
            __pyx_t_38.memview = NULL;
            __pyx_t_38.data = NULL;

            /* "awe_ml/classifier_cython.pyx":2412
 *                         if parent_level<level:
 *                             parental_label = explainable_values[parent_ind,feature_ind:(feature_ind+parent_level)]
 *                             parental_size = parental_label.shape[0]             # <<<<<<<<<<<<<<
 * 
 *                             #check if parent label is fully contained within label, i.e. is parent label a parent of label?
 */
            __pyx_v_parental_size = (__pyx_v_parental_label.shape[0]);

            /* "awe_ml/classifier_cython.pyx":2416
 *                             #check if parent label is fully contained within label, i.e. is parent label a parent of label?
 *                             #Can pass memory view to C++ function by pointer.
 *                             result = includes(label_ptr,label_end_ptr, &parental_label[0], &parental_label[parental_size])             # <<<<<<<<<<<<<<
 * 
 *                             if result == True: #if parent_label is a parent
 */
            __pyx_t_39 = 0;
            __pyx_t_40 = __pyx_v_parental_size;
            __pyx_v_result = std::includes<__pyx_t_6awe_ml_17classifier_cython_np_long *,__pyx_t_6awe_ml_17classifier_cython_np_float *>(__pyx_v_label_ptr, __pyx_v_label_end_ptr, (&(*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=0 */ (__pyx_v_parental_label.data + __pyx_t_39 * __pyx_v_parental_label.strides[0]) )))), (&(*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=0 */ (__pyx_v_parental_label.data + __pyx_t_40 * __pyx_v_parental_label.strides[0]) )))));

            /* "awe_ml/classifier_cython.pyx":2418
 *                             result = includes(label_ptr,label_end_ptr, &parental_label[0], &parental_label[parental_size])
 * 
 *                             if result == True: #if parent_label is a parent             # <<<<<<<<<<<<<<
 *                                 ## check if probabilities are equal for all classes
 *                                 equal_prob=True
 */
            __pyx_t_14 = ((__pyx_v_result == 1) != 0);
            if (__pyx_t_14) {

              /* "awe_ml/classifier_cython.pyx":2420
 *                             if result == True: #if parent_label is a parent
 *                                 ## check if probabilities are equal for all classes
 *                                 equal_prob=True             # <<<<<<<<<<<<<<
 *                                 for class_num in range(self.n_classes):
 *                                     if explainable_values[parent_ind,p_ind+class_num]!= p0_ptr[class_num]:
 */
              __pyx_v_equal_prob = 1;

              /* "awe_ml/classifier_cython.pyx":2421
 *                                 ## check if probabilities are equal for all classes
 *                                 equal_prob=True
 *                                 for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                                     if explainable_values[parent_ind,p_ind+class_num]!= p0_ptr[class_num]:
 *                                         equal_prob=False
 */
              __pyx_t_21 = __pyx_v_self->n_classes;
              __pyx_t_22 = __pyx_t_21;
              for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
                __pyx_v_class_num = __pyx_t_23;

                /* "awe_ml/classifier_cython.pyx":2422
 *                                 equal_prob=True
 *                                 for class_num in range(self.n_classes):
 *                                     if explainable_values[parent_ind,p_ind+class_num]!= p0_ptr[class_num]:             # <<<<<<<<<<<<<<
 *                                         equal_prob=False
 *                                 if equal_prob: # parent is the same prob as child, update parent and not child
 */
                __pyx_t_41 = __pyx_v_parent_ind;
                __pyx_t_42 = (__pyx_v_p_ind + __pyx_v_class_num);
                __pyx_t_14 = (((*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_41 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_42 * __pyx_v_explainable_values.strides[1]) ))) != (__pyx_v_p0_ptr[__pyx_v_class_num])) != 0);
                if (__pyx_t_14) {

                  /* "awe_ml/classifier_cython.pyx":2423
 *                                 for class_num in range(self.n_classes):
 *                                     if explainable_values[parent_ind,p_ind+class_num]!= p0_ptr[class_num]:
 *                                         equal_prob=False             # <<<<<<<<<<<<<<
 *                                 if equal_prob: # parent is the same prob as child, update parent and not child
 *                                     #add weights to parent, store all weight in Fx
 */
                  __pyx_v_equal_prob = 0;

                  /* "awe_ml/classifier_cython.pyx":2422
 *                                 equal_prob=True
 *                                 for class_num in range(self.n_classes):
 *                                     if explainable_values[parent_ind,p_ind+class_num]!= p0_ptr[class_num]:             # <<<<<<<<<<<<<<
 *                                         equal_prob=False
 *                                 if equal_prob: # parent is the same prob as child, update parent and not child
 */
                }
              }

              /* "awe_ml/classifier_cython.pyx":2424
 *                                     if explainable_values[parent_ind,p_ind+class_num]!= p0_ptr[class_num]:
 *                                         equal_prob=False
 *                                 if equal_prob: # parent is the same prob as child, update parent and not child             # <<<<<<<<<<<<<<
 *                                     #add weights to parent, store all weight in Fx
 *                                     #TODO:  Check if weight should be divided elsewhere
 */
              __pyx_t_14 = (__pyx_v_equal_prob != 0);
              if (__pyx_t_14) {

                /* "awe_ml/classifier_cython.pyx":2427
 *                                     #add weights to parent, store all weight in Fx
 *                                     #TODO:  Check if weight should be divided elsewhere
 *                                     for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                                         weight_sum =0
 *                                         for feature_ctr in range(level):
 */
                __pyx_t_21 = __pyx_v_self->n_classes;
                __pyx_t_22 = __pyx_t_21;
                for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
                  __pyx_v_class_num = __pyx_t_23;

                  /* "awe_ml/classifier_cython.pyx":2428
 *                                     #TODO:  Check if weight should be divided elsewhere
 *                                     for class_num in range(self.n_classes):
 *                                         weight_sum =0             # <<<<<<<<<<<<<<
 *                                         for feature_ctr in range(level):
 *                                             local_weight =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 */
                  __pyx_v_weight_sum = 0.0;

                  /* "awe_ml/classifier_cython.pyx":2429
 *                                     for class_num in range(self.n_classes):
 *                                         weight_sum =0
 *                                         for feature_ctr in range(level):             # <<<<<<<<<<<<<<
 *                                             local_weight =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 *                                             explainable_values[parent_ind,weight_by_feature_ind+(class_num+1)*(tree_depth)-1] += local_weight
 */
                  __pyx_t_28 = __pyx_v_level;
                  __pyx_t_29 = __pyx_t_28;
                  for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
                    __pyx_v_feature_ctr = __pyx_t_30;

                    /* "awe_ml/classifier_cython.pyx":2430
 *                                         weight_sum =0
 *                                         for feature_ctr in range(level):
 *                                             local_weight =  weights_tree[level][local_tree_index][feature_ctr][class_num].second             # <<<<<<<<<<<<<<
 *                                             explainable_values[parent_ind,weight_by_feature_ind+(class_num+1)*(tree_depth)-1] += local_weight
 *                                             weight_sum+=local_weight
 */
                    __pyx_t_25 = ((((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_feature_ctr])[__pyx_v_class_num]).second;
                    __pyx_v_local_weight = __pyx_t_25;

                    /* "awe_ml/classifier_cython.pyx":2431
 *                                         for feature_ctr in range(level):
 *                                             local_weight =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 *                                             explainable_values[parent_ind,weight_by_feature_ind+(class_num+1)*(tree_depth)-1] += local_weight             # <<<<<<<<<<<<<<
 *                                             weight_sum+=local_weight
 *                                         explainable_values[parent_ind,weight_ind+class_num]+=weight_sum
 */
                    __pyx_t_43 = __pyx_v_parent_ind;
                    __pyx_t_44 = ((__pyx_v_weight_by_feature_ind + ((__pyx_v_class_num + 1) * __pyx_v_tree_depth)) - 1);
                    *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_43 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_44 * __pyx_v_explainable_values.strides[1]) )) += __pyx_v_local_weight;

                    /* "awe_ml/classifier_cython.pyx":2432
 *                                             local_weight =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 *                                             explainable_values[parent_ind,weight_by_feature_ind+(class_num+1)*(tree_depth)-1] += local_weight
 *                                             weight_sum+=local_weight             # <<<<<<<<<<<<<<
 *                                         explainable_values[parent_ind,weight_ind+class_num]+=weight_sum
 *                                     nonzero_self_weight = False
 */
                    __pyx_v_weight_sum = (__pyx_v_weight_sum + __pyx_v_local_weight);
                  }

                  /* "awe_ml/classifier_cython.pyx":2433
 *                                             explainable_values[parent_ind,weight_by_feature_ind+(class_num+1)*(tree_depth)-1] += local_weight
 *                                             weight_sum+=local_weight
 *                                         explainable_values[parent_ind,weight_ind+class_num]+=weight_sum             # <<<<<<<<<<<<<<
 *                                     nonzero_self_weight = False
 *                                     break
 */
                  __pyx_t_45 = __pyx_v_parent_ind;
                  __pyx_t_46 = (__pyx_v_weight_ind + __pyx_v_class_num);
                  *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_45 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_46 * __pyx_v_explainable_values.strides[1]) )) += __pyx_v_weight_sum;
                }

                /* "awe_ml/classifier_cython.pyx":2434
 *                                             weight_sum+=local_weight
 *                                         explainable_values[parent_ind,weight_ind+class_num]+=weight_sum
 *                                     nonzero_self_weight = False             # <<<<<<<<<<<<<<
 *                                     break
 * 
 */
                __pyx_v_nonzero_self_weight = 0;

                /* "awe_ml/classifier_cython.pyx":2435
 *                                         explainable_values[parent_ind,weight_ind+class_num]+=weight_sum
 *                                     nonzero_self_weight = False
 *                                     break             # <<<<<<<<<<<<<<
 * 
 *                 if nonzero_self_weight:
 */
                goto __pyx_L40_break;

                /* "awe_ml/classifier_cython.pyx":2424
 *                                     if explainable_values[parent_ind,p_ind+class_num]!= p0_ptr[class_num]:
 *                                         equal_prob=False
 *                                 if equal_prob: # parent is the same prob as child, update parent and not child             # <<<<<<<<<<<<<<
 *                                     #add weights to parent, store all weight in Fx
 *                                     #TODO:  Check if weight should be divided elsewhere
 */
              }

              /* "awe_ml/classifier_cython.pyx":2418
 *                             result = includes(label_ptr,label_end_ptr, &parental_label[0], &parental_label[parental_size])
 * 
 *                             if result == True: #if parent_label is a parent             # <<<<<<<<<<<<<<
 *                                 ## check if probabilities are equal for all classes
 *                                 equal_prob=True
 */
            }

            /* "awe_ml/classifier_cython.pyx":2410
 * 
 *                         parent_level= <np_long> explainable_values[parent_ind,level_ind]
 *                         if parent_level<level:             # <<<<<<<<<<<<<<
 *                             parental_label = explainable_values[parent_ind,feature_ind:(feature_ind+parent_level)]
 *                             parental_size = parental_label.shape[0]
 */
          }
        }
        __pyx_L40_break:;

        /* "awe_ml/classifier_cython.pyx":2395
 * 
 *                 # if nonzero self weights then store node:
 *                 if nonzero_self_weight:             # <<<<<<<<<<<<<<
 *                     full_tree_index = full_tree_indicies[local_tree_index]
 *                     full_tree_data.set_node(full_tree_index)
 */
      }

      /* "awe_ml/classifier_cython.pyx":2437
 *                                     break
 * 
 *                 if nonzero_self_weight:             # <<<<<<<<<<<<<<
 *                     row_index+=1
 *                     explainable_values[row_index,level_ind]=level
 */
      __pyx_t_14 = (__pyx_v_nonzero_self_weight != 0);
      if (__pyx_t_14) {

        /* "awe_ml/classifier_cython.pyx":2438
 * 
 *                 if nonzero_self_weight:
 *                     row_index+=1             # <<<<<<<<<<<<<<
 *                     explainable_values[row_index,level_ind]=level
 *                     # store features in label
 */
        __pyx_v_row_index = (__pyx_v_row_index + 1);

        /* "awe_ml/classifier_cython.pyx":2439
 *                 if nonzero_self_weight:
 *                     row_index+=1
 *                     explainable_values[row_index,level_ind]=level             # <<<<<<<<<<<<<<
 *                     # store features in label
 *                     for feature_ctr in range(tree_depth-1):
 */
        __pyx_t_47 = __pyx_v_row_index;
        __pyx_t_48 = __pyx_v_level_ind;
        *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_47 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_48 * __pyx_v_explainable_values.strides[1]) )) = __pyx_v_level;

        /* "awe_ml/classifier_cython.pyx":2441
 *                     explainable_values[row_index,level_ind]=level
 *                     # store features in label
 *                     for feature_ctr in range(tree_depth-1):             # <<<<<<<<<<<<<<
 *                         if feature_ctr<label_size:
 *                             explainable_values[row_index,feature_ind+feature_ctr]=label_ptr[feature_ctr]
 */
        __pyx_t_20 = (__pyx_v_tree_depth - 1);
        __pyx_t_27 = __pyx_t_20;
        for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_27; __pyx_t_19+=1) {
          __pyx_v_feature_ctr = __pyx_t_19;

          /* "awe_ml/classifier_cython.pyx":2442
 *                     # store features in label
 *                     for feature_ctr in range(tree_depth-1):
 *                         if feature_ctr<label_size:             # <<<<<<<<<<<<<<
 *                             explainable_values[row_index,feature_ind+feature_ctr]=label_ptr[feature_ctr]
 *                         else:
 */
          __pyx_t_14 = ((__pyx_v_feature_ctr < __pyx_v_label_size) != 0);
          if (__pyx_t_14) {

            /* "awe_ml/classifier_cython.pyx":2443
 *                     for feature_ctr in range(tree_depth-1):
 *                         if feature_ctr<label_size:
 *                             explainable_values[row_index,feature_ind+feature_ctr]=label_ptr[feature_ctr]             # <<<<<<<<<<<<<<
 *                         else:
 *                             explainable_values[row_index,feature_ind+feature_ctr]=-1
 */
            __pyx_t_49 = __pyx_v_row_index;
            __pyx_t_50 = (__pyx_v_feature_ind + __pyx_v_feature_ctr);
            *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_49 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_50 * __pyx_v_explainable_values.strides[1]) )) = (__pyx_v_label_ptr[__pyx_v_feature_ctr]);

            /* "awe_ml/classifier_cython.pyx":2442
 *                     # store features in label
 *                     for feature_ctr in range(tree_depth-1):
 *                         if feature_ctr<label_size:             # <<<<<<<<<<<<<<
 *                             explainable_values[row_index,feature_ind+feature_ctr]=label_ptr[feature_ctr]
 *                         else:
 */
            goto __pyx_L54;
          }

          /* "awe_ml/classifier_cython.pyx":2445
 *                             explainable_values[row_index,feature_ind+feature_ctr]=label_ptr[feature_ctr]
 *                         else:
 *                             explainable_values[row_index,feature_ind+feature_ctr]=-1             # <<<<<<<<<<<<<<
 * 
 *                     # store counts and probabilites
 */
          /*else*/ {
            __pyx_t_51 = __pyx_v_row_index;
            __pyx_t_52 = (__pyx_v_feature_ind + __pyx_v_feature_ctr);
            *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_51 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_52 * __pyx_v_explainable_values.strides[1]) )) = -1.0;
          }
          __pyx_L54:;
        }

        /* "awe_ml/classifier_cython.pyx":2448
 * 
 *                     # store counts and probabilites
 *                     for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                         explainable_values[row_index,counts_ind+class_num]=full_tree_data.counts[class_num]
 *                         # use p0 for self values
 */
        __pyx_t_19 = __pyx_v_self->n_classes;
        __pyx_t_21 = __pyx_t_19;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
          __pyx_v_class_num = __pyx_t_22;

          /* "awe_ml/classifier_cython.pyx":2449
 *                     # store counts and probabilites
 *                     for class_num in range(self.n_classes):
 *                         explainable_values[row_index,counts_ind+class_num]=full_tree_data.counts[class_num]             # <<<<<<<<<<<<<<
 *                         # use p0 for self values
 *                         explainable_values[row_index,p_ind+class_num]=full_tree_data.p0[class_num]
 */
          try {
            __pyx_t_23 = __pyx_v_full_tree_data->counts[__pyx_v_class_num];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 2449, __pyx_L1_error)
          }
          __pyx_t_53 = __pyx_v_row_index;
          __pyx_t_54 = (__pyx_v_counts_ind + __pyx_v_class_num);
          *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_53 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_54 * __pyx_v_explainable_values.strides[1]) )) = __pyx_t_23;

          /* "awe_ml/classifier_cython.pyx":2451
 *                         explainable_values[row_index,counts_ind+class_num]=full_tree_data.counts[class_num]
 *                         # use p0 for self values
 *                         explainable_values[row_index,p_ind+class_num]=full_tree_data.p0[class_num]             # <<<<<<<<<<<<<<
 * 
 *                     # store weights by feature
 */
          try {
            __pyx_t_25 = __pyx_v_full_tree_data->p0[__pyx_v_class_num];
          } catch(...) {
            __Pyx_CppExn2PyErr();
            __PYX_ERR(1, 2451, __pyx_L1_error)
          }
          __pyx_t_55 = __pyx_v_row_index;
          __pyx_t_56 = (__pyx_v_p_ind + __pyx_v_class_num);
          *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_55 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_56 * __pyx_v_explainable_values.strides[1]) )) = __pyx_t_25;
        }

        /* "awe_ml/classifier_cython.pyx":2454
 * 
 *                     # store weights by feature
 *                     for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *                         weight_sum =0
 *                         for feature_ctr in range(level):
 */
        __pyx_t_19 = __pyx_v_self->n_classes;
        __pyx_t_21 = __pyx_t_19;
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
          __pyx_v_class_num = __pyx_t_22;

          /* "awe_ml/classifier_cython.pyx":2455
 *                     # store weights by feature
 *                     for class_num in range(self.n_classes):
 *                         weight_sum =0             # <<<<<<<<<<<<<<
 *                         for feature_ctr in range(level):
 *                             explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr] =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 */
          __pyx_v_weight_sum = 0.0;

          /* "awe_ml/classifier_cython.pyx":2456
 *                     for class_num in range(self.n_classes):
 *                         weight_sum =0
 *                         for feature_ctr in range(level):             # <<<<<<<<<<<<<<
 *                             explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr] =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 *                             weight_sum+=explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr]
 */
          __pyx_t_23 = __pyx_v_level;
          __pyx_t_28 = __pyx_t_23;
          for (__pyx_t_29 = 0; __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
            __pyx_v_feature_ctr = __pyx_t_29;

            /* "awe_ml/classifier_cython.pyx":2457
 *                         weight_sum =0
 *                         for feature_ctr in range(level):
 *                             explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr] =  weights_tree[level][local_tree_index][feature_ctr][class_num].second             # <<<<<<<<<<<<<<
 *                             weight_sum+=explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr]
 *                         explainable_values[row_index,weight_ind+class_num]=weight_sum
 */
            __pyx_t_25 = ((((__pyx_v_weights_tree[__pyx_v_level])[__pyx_v_local_tree_index])[__pyx_v_feature_ctr])[__pyx_v_class_num]).second;
            __pyx_t_57 = __pyx_v_row_index;
            __pyx_t_58 = ((__pyx_v_weight_by_feature_ind + (__pyx_v_class_num * __pyx_v_tree_depth)) + __pyx_v_feature_ctr);
            *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_57 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_58 * __pyx_v_explainable_values.strides[1]) )) = __pyx_t_25;

            /* "awe_ml/classifier_cython.pyx":2458
 *                         for feature_ctr in range(level):
 *                             explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr] =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 *                             weight_sum+=explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr]             # <<<<<<<<<<<<<<
 *                         explainable_values[row_index,weight_ind+class_num]=weight_sum
 * 
 */
            __pyx_t_59 = __pyx_v_row_index;
            __pyx_t_60 = ((__pyx_v_weight_by_feature_ind + (__pyx_v_class_num * __pyx_v_tree_depth)) + __pyx_v_feature_ctr);
            __pyx_v_weight_sum = (__pyx_v_weight_sum + (*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_59 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_60 * __pyx_v_explainable_values.strides[1]) ))));
          }

          /* "awe_ml/classifier_cython.pyx":2459
 *                             explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr] =  weights_tree[level][local_tree_index][feature_ctr][class_num].second
 *                             weight_sum+=explainable_values[row_index,weight_by_feature_ind+class_num*(tree_depth)+feature_ctr]
 *                         explainable_values[row_index,weight_ind+class_num]=weight_sum             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_61 = __pyx_v_row_index;
          __pyx_t_62 = (__pyx_v_weight_ind + __pyx_v_class_num);
          *((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_61 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_62 * __pyx_v_explainable_values.strides[1]) )) = __pyx_v_weight_sum;
        }

        /* "awe_ml/classifier_cython.pyx":2437
 *                                     break
 * 
 *                 if nonzero_self_weight:             # <<<<<<<<<<<<<<
 *                     row_index+=1
 *                     explainable_values[row_index,level_ind]=level
 */
      }
    }
  }

  /* "awe_ml/classifier_cython.pyx":2464
 *         #########################
 * 
 *         n_unique_combos = row_index+1             # <<<<<<<<<<<<<<
 *         explainable_values=explainable_values[:n_unique_combos,:]
 * 
 */
  __pyx_v_n_unique_combos = (__pyx_v_row_index + 1);

  /* "awe_ml/classifier_cython.pyx":2465
 * 
 *         n_unique_combos = row_index+1
 *         explainable_values=explainable_values[:n_unique_combos,:]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_34.data = __pyx_v_explainable_values.data;
  __pyx_t_34.memview = __pyx_v_explainable_values.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_34, 0);
  __pyx_t_5 = -1;
  if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_34,
    __pyx_v_explainable_values.shape[0], __pyx_v_explainable_values.strides[0], __pyx_v_explainable_values.suboffsets[0],
    0,
    0,
    &__pyx_t_5,
    0,
    __pyx_v_n_unique_combos,
    0,
    0,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(1, 2465, __pyx_L1_error)
}

__pyx_t_34.shape[1] = __pyx_v_explainable_values.shape[1];
__pyx_t_34.strides[1] = __pyx_v_explainable_values.strides[1];
    __pyx_t_34.suboffsets[1] = -1;

__PYX_XDEC_MEMVIEW(&__pyx_v_explainable_values, 1);
  __pyx_v_explainable_values = __pyx_t_34;
  __pyx_t_34.memview = NULL;
  __pyx_t_34.data = NULL;

  /* "awe_ml/classifier_cython.pyx":2491
 * 
 *         #### find the class that has the highest predicted probability
 *         cdef np_float max_prob=0             # <<<<<<<<<<<<<<
 *         cdef np_long predicted_class=0
 *         for prob_ent in range(predicted_probability.size()):
 */
  __pyx_v_max_prob = 0.0;

  /* "awe_ml/classifier_cython.pyx":2492
 *         #### find the class that has the highest predicted probability
 *         cdef np_float max_prob=0
 *         cdef np_long predicted_class=0             # <<<<<<<<<<<<<<
 *         for prob_ent in range(predicted_probability.size()):
 *             if max_prob < predicted_probability[prob_ent]:
 */
  __pyx_v_predicted_class = 0;

  /* "awe_ml/classifier_cython.pyx":2493
 *         cdef np_float max_prob=0
 *         cdef np_long predicted_class=0
 *         for prob_ent in range(predicted_probability.size()):             # <<<<<<<<<<<<<<
 *             if max_prob < predicted_probability[prob_ent]:
 *                 max_prob = predicted_probability[prob_ent]
 */
  __pyx_t_63 = __pyx_v_predicted_probability.size();
  __pyx_t_64 = __pyx_t_63;
  for (__pyx_t_65 = 0; __pyx_t_65 < __pyx_t_64; __pyx_t_65+=1) {
    __pyx_v_prob_ent = __pyx_t_65;

    /* "awe_ml/classifier_cython.pyx":2494
 *         cdef np_long predicted_class=0
 *         for prob_ent in range(predicted_probability.size()):
 *             if max_prob < predicted_probability[prob_ent]:             # <<<<<<<<<<<<<<
 *                 max_prob = predicted_probability[prob_ent]
 *                 predicted_class = prob_ent
 */
    __pyx_t_14 = ((__pyx_v_max_prob < (__pyx_v_predicted_probability[__pyx_v_prob_ent])) != 0);
    if (__pyx_t_14) {

      /* "awe_ml/classifier_cython.pyx":2495
 *         for prob_ent in range(predicted_probability.size()):
 *             if max_prob < predicted_probability[prob_ent]:
 *                 max_prob = predicted_probability[prob_ent]             # <<<<<<<<<<<<<<
 *                 predicted_class = prob_ent
 * 
 */
      __pyx_v_max_prob = (__pyx_v_predicted_probability[__pyx_v_prob_ent]);

      /* "awe_ml/classifier_cython.pyx":2496
 *             if max_prob < predicted_probability[prob_ent]:
 *                 max_prob = predicted_probability[prob_ent]
 *                 predicted_class = prob_ent             # <<<<<<<<<<<<<<
 * 
 *         inds = np.argsort(explainable_values[:,weight_ind+predicted_class])
 */
      __pyx_v_predicted_class = __pyx_v_prob_ent;

      /* "awe_ml/classifier_cython.pyx":2494
 *         cdef np_long predicted_class=0
 *         for prob_ent in range(predicted_probability.size()):
 *             if max_prob < predicted_probability[prob_ent]:             # <<<<<<<<<<<<<<
 *                 max_prob = predicted_probability[prob_ent]
 *                 predicted_class = prob_ent
 */
    }
  }

  /* "awe_ml/classifier_cython.pyx":2498
 *                 predicted_class = prob_ent
 * 
 *         inds = np.argsort(explainable_values[:,weight_ind+predicted_class])             # <<<<<<<<<<<<<<
 *         rev_inds = inds[::-1]
 * 
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_argsort); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_38.data = __pyx_v_explainable_values.data;
  __pyx_t_38.memview = __pyx_v_explainable_values.memview;
  __PYX_INC_MEMVIEW(&__pyx_t_38, 0);
  __pyx_t_38.shape[0] = __pyx_v_explainable_values.shape[0];
__pyx_t_38.strides[0] = __pyx_v_explainable_values.strides[0];
    __pyx_t_38.suboffsets[0] = -1;

{
    Py_ssize_t __pyx_tmp_idx = (__pyx_v_weight_ind + __pyx_v_predicted_class);
    Py_ssize_t __pyx_tmp_shape = __pyx_v_explainable_values.shape[1];
    Py_ssize_t __pyx_tmp_stride = __pyx_v_explainable_values.strides[1];
    if (0 && (__pyx_tmp_idx < 0))
        __pyx_tmp_idx += __pyx_tmp_shape;
    if (0 && (__pyx_tmp_idx < 0 || __pyx_tmp_idx >= __pyx_tmp_shape)) {
        PyErr_SetString(PyExc_IndexError, "Index out of bounds (axis 1)");
        __PYX_ERR(1, 2498, __pyx_L1_error)
    }
        __pyx_t_38.data += __pyx_tmp_idx * __pyx_tmp_stride;
}

__pyx_t_6 = __pyx_memoryview_fromslice(__pyx_t_38, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_float, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_float, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_38, 1);
  __pyx_t_38.memview = NULL;
  __pyx_t_38.data = NULL;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2498, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2498, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2498, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_inds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":2499
 * 
 *         inds = np.argsort(explainable_values[:,weight_ind+predicted_class])
 *         rev_inds = inds[::-1]             # <<<<<<<<<<<<<<
 * 
 *         ############## save all feature combos
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_inds, __pyx_slice__13); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rev_inds = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":2505
 *         #write value
 *         cdef str header
 *         header = "level, "             # <<<<<<<<<<<<<<
 *         for feature_ctr in range(tree_depth-1):
 *             header+='F'+str(feature_ctr)+', '
 */
  __Pyx_INCREF(__pyx_kp_u_level);
  __pyx_v_header = __pyx_kp_u_level;

  /* "awe_ml/classifier_cython.pyx":2506
 *         cdef str header
 *         header = "level, "
 *         for feature_ctr in range(tree_depth-1):             # <<<<<<<<<<<<<<
 *             header+='F'+str(feature_ctr)+', '
 *         for class_num in range(self.n_classes):
 */
  __pyx_t_20 = (__pyx_v_tree_depth - 1);
  __pyx_t_27 = __pyx_t_20;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_27; __pyx_t_11+=1) {
    __pyx_v_feature_ctr = __pyx_t_11;

    /* "awe_ml/classifier_cython.pyx":2507
 *         header = "level, "
 *         for feature_ctr in range(tree_depth-1):
 *             header+='F'+str(feature_ctr)+', '             # <<<<<<<<<<<<<<
 *         for class_num in range(self.n_classes):
 *             header+='#'+str(class_num)+', '
 */
    __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_ctr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_n_u_F, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u__14); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_header, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_header, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":2508
 *         for feature_ctr in range(tree_depth-1):
 *             header+='F'+str(feature_ctr)+', '
 *         for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             header+='#'+str(class_num)+', '
 *         for class_num in range(self.n_classes):
 */
  __pyx_t_11 = __pyx_v_self->n_classes;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_class_num = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2509
 *             header+='F'+str(feature_ctr)+', '
 *         for class_num in range(self.n_classes):
 *             header+='#'+str(class_num)+', '             # <<<<<<<<<<<<<<
 *         for class_num in range(self.n_classes):
 *             header+='P'+str(class_num)+', '
 */
    __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_class_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u__15, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u__14); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_header, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_header, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":2510
 *         for class_num in range(self.n_classes):
 *             header+='#'+str(class_num)+', '
 *         for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             header+='P'+str(class_num)+', '
 *         for class_num in range(self.n_classes):
 */
  __pyx_t_11 = __pyx_v_self->n_classes;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_class_num = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2511
 *             header+='#'+str(class_num)+', '
 *         for class_num in range(self.n_classes):
 *             header+='P'+str(class_num)+', '             # <<<<<<<<<<<<<<
 *         for class_num in range(self.n_classes):
 *             header+='W(C'+str(class_num)+'), '
 */
    __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_class_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_n_u_P, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u__14); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_header, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_header, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":2512
 *         for class_num in range(self.n_classes):
 *             header+='P'+str(class_num)+', '
 *         for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             header+='W(C'+str(class_num)+'), '
 *         for class_num in range(self.n_classes):
 */
  __pyx_t_11 = __pyx_v_self->n_classes;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_class_num = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2513
 *             header+='P'+str(class_num)+', '
 *         for class_num in range(self.n_classes):
 *             header+='W(C'+str(class_num)+'), '             # <<<<<<<<<<<<<<
 *         for class_num in range(self.n_classes):
 *             for feature_ctr in range(tree_depth-1):
 */
    __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_class_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_W_C, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u__16); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_header, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_header, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":2514
 *         for class_num in range(self.n_classes):
 *             header+='W(C'+str(class_num)+'), '
 *         for class_num in range(self.n_classes):             # <<<<<<<<<<<<<<
 *             for feature_ctr in range(tree_depth-1):
 *                 header+='W(C'+str(class_num)+'_F'+str(feature_ctr)+'), '
 */
  __pyx_t_11 = __pyx_v_self->n_classes;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_class_num = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2515
 *             header+='W(C'+str(class_num)+'), '
 *         for class_num in range(self.n_classes):
 *             for feature_ctr in range(tree_depth-1):             # <<<<<<<<<<<<<<
 *                 header+='W(C'+str(class_num)+'_F'+str(feature_ctr)+'), '
 *             header+='W(C'+str(class_num)+'_FX), '
 */
    __pyx_t_20 = (__pyx_v_tree_depth - 1);
    __pyx_t_27 = __pyx_t_20;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_27; __pyx_t_15+=1) {
      __pyx_v_feature_ctr = __pyx_t_15;

      /* "awe_ml/classifier_cython.pyx":2516
 *         for class_num in range(self.n_classes):
 *             for feature_ctr in range(tree_depth-1):
 *                 header+='W(C'+str(class_num)+'_F'+str(feature_ctr)+'), '             # <<<<<<<<<<<<<<
 *             header+='W(C'+str(class_num)+'_FX), '
 *         header+='\n'
 */
      __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_class_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_W_C, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_n_u_F_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_feature_ctr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u__16); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_header, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_header, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;
    }

    /* "awe_ml/classifier_cython.pyx":2517
 *             for feature_ctr in range(tree_depth-1):
 *                 header+='W(C'+str(class_num)+'_F'+str(feature_ctr)+'), '
 *             header+='W(C'+str(class_num)+'_FX), '             # <<<<<<<<<<<<<<
 *         header+='\n'
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_class_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_W_C, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_FX); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_header, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_header, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
  }

  /* "awe_ml/classifier_cython.pyx":2518
 *                 header+='W(C'+str(class_num)+'_F'+str(feature_ctr)+'), '
 *             header+='W(C'+str(class_num)+'_FX), '
 *         header+='\n'             # <<<<<<<<<<<<<<
 * 
 *         ## python strings reallocate every time string is appended, use c++ string to avoid this
 */
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_v_header, __pyx_kp_u__17); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_header, ((PyObject*)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":2523
 *         cdef string data_string_cpp
 *         #create string to store all data and then write to file:
 *         data_string_cpp  = header.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef np_long col_ind
 *         cdef np_long row
 */
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_header); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_66 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_data_string_cpp = __pyx_t_66;

  /* "awe_ml/classifier_cython.pyx":2526
 *         cdef np_long col_ind
 *         cdef np_long row
 *         for row in rev_inds:             # <<<<<<<<<<<<<<
 * 
 *             for col_ind in range(n_explainable_values_cols):
 */
  if (likely(PyList_CheckExact(__pyx_v_rev_inds)) || PyTuple_CheckExact(__pyx_v_rev_inds)) {
    __pyx_t_1 = __pyx_v_rev_inds; __Pyx_INCREF(__pyx_t_1); __pyx_t_67 = 0;
    __pyx_t_68 = NULL;
  } else {
    __pyx_t_67 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rev_inds); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_68 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_68)) __PYX_ERR(1, 2526, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_68)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_67 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_67); __Pyx_INCREF(__pyx_t_4); __pyx_t_67++; if (unlikely(0 < 0)) __PYX_ERR(1, 2526, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_67); __pyx_t_67++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2526, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_67 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_67); __Pyx_INCREF(__pyx_t_4); __pyx_t_67++; if (unlikely(0 < 0)) __PYX_ERR(1, 2526, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_67); __pyx_t_67++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2526, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_68(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 2526, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_11 = __Pyx_PyInt_As_npy_int32(__pyx_t_4); if (unlikely((__pyx_t_11 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 2526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_row = __pyx_t_11;

    /* "awe_ml/classifier_cython.pyx":2528
 *         for row in rev_inds:
 * 
 *             for col_ind in range(n_explainable_values_cols):             # <<<<<<<<<<<<<<
 *                 if col_ind>=feature_ind and col_ind<counts_ind:
 *                     if explainable_values[row,col_ind]>=0:
 */
    __pyx_t_20 = __pyx_v_n_explainable_values_cols;
    __pyx_t_27 = __pyx_t_20;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_27; __pyx_t_11+=1) {
      __pyx_v_col_ind = __pyx_t_11;

      /* "awe_ml/classifier_cython.pyx":2529
 * 
 *             for col_ind in range(n_explainable_values_cols):
 *                 if col_ind>=feature_ind and col_ind<counts_ind:             # <<<<<<<<<<<<<<
 *                     if explainable_values[row,col_ind]>=0:
 *                         data_string_cpp+=self.get_name(<np_long> explainable_values[row,col_ind])
 */
      __pyx_t_69 = ((__pyx_v_col_ind >= __pyx_v_feature_ind) != 0);
      if (__pyx_t_69) {
      } else {
        __pyx_t_14 = __pyx_t_69;
        goto __pyx_L81_bool_binop_done;
      }
      __pyx_t_69 = ((__pyx_v_col_ind < __pyx_v_counts_ind) != 0);
      __pyx_t_14 = __pyx_t_69;
      __pyx_L81_bool_binop_done:;
      if (__pyx_t_14) {

        /* "awe_ml/classifier_cython.pyx":2530
 *             for col_ind in range(n_explainable_values_cols):
 *                 if col_ind>=feature_ind and col_ind<counts_ind:
 *                     if explainable_values[row,col_ind]>=0:             # <<<<<<<<<<<<<<
 *                         data_string_cpp+=self.get_name(<np_long> explainable_values[row,col_ind])
 *                         data_string_cpp+=<char*>", "
 */
        __pyx_t_70 = __pyx_v_row;
        __pyx_t_71 = __pyx_v_col_ind;
        __pyx_t_14 = (((*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_70 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_71 * __pyx_v_explainable_values.strides[1]) ))) >= 0.0) != 0);
        if (__pyx_t_14) {

          /* "awe_ml/classifier_cython.pyx":2531
 *                 if col_ind>=feature_ind and col_ind<counts_ind:
 *                     if explainable_values[row,col_ind]>=0:
 *                         data_string_cpp+=self.get_name(<np_long> explainable_values[row,col_ind])             # <<<<<<<<<<<<<<
 *                         data_string_cpp+=<char*>", "
 *                     else:
 */
          __pyx_t_72 = __pyx_v_row;
          __pyx_t_73 = __pyx_v_col_ind;
          __pyx_v_data_string_cpp += ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->get_name(__pyx_v_self, ((__pyx_t_6awe_ml_17classifier_cython_np_long)(*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_72 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_73 * __pyx_v_explainable_values.strides[1]) )))));

          /* "awe_ml/classifier_cython.pyx":2532
 *                     if explainable_values[row,col_ind]>=0:
 *                         data_string_cpp+=self.get_name(<np_long> explainable_values[row,col_ind])
 *                         data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *                     else:
 *                         data_string_cpp+=<char*>", "
 */
          __pyx_v_data_string_cpp += ((char *)((char *)", "));

          /* "awe_ml/classifier_cython.pyx":2530
 *             for col_ind in range(n_explainable_values_cols):
 *                 if col_ind>=feature_ind and col_ind<counts_ind:
 *                     if explainable_values[row,col_ind]>=0:             # <<<<<<<<<<<<<<
 *                         data_string_cpp+=self.get_name(<np_long> explainable_values[row,col_ind])
 *                         data_string_cpp+=<char*>", "
 */
          goto __pyx_L83;
        }

        /* "awe_ml/classifier_cython.pyx":2534
 *                         data_string_cpp+=<char*>", "
 *                     else:
 *                         data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *                 else:
 *                     data_string_cpp+=to_string(explainable_values[row,col_ind])
 */
        /*else*/ {
          __pyx_v_data_string_cpp += ((char *)((char *)", "));
        }
        __pyx_L83:;

        /* "awe_ml/classifier_cython.pyx":2529
 * 
 *             for col_ind in range(n_explainable_values_cols):
 *                 if col_ind>=feature_ind and col_ind<counts_ind:             # <<<<<<<<<<<<<<
 *                     if explainable_values[row,col_ind]>=0:
 *                         data_string_cpp+=self.get_name(<np_long> explainable_values[row,col_ind])
 */
        goto __pyx_L80;
      }

      /* "awe_ml/classifier_cython.pyx":2536
 *                         data_string_cpp+=<char*>", "
 *                 else:
 *                     data_string_cpp+=to_string(explainable_values[row,col_ind])             # <<<<<<<<<<<<<<
 *                     data_string_cpp+=<char*>", "
 *             data_string_cpp+=<char*>'\n'
 */
      /*else*/ {
        __pyx_t_74 = __pyx_v_row;
        __pyx_t_75 = __pyx_v_col_ind;
        __pyx_v_data_string_cpp += std::to_string((*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_74 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_75 * __pyx_v_explainable_values.strides[1]) ))));

        /* "awe_ml/classifier_cython.pyx":2537
 *                 else:
 *                     data_string_cpp+=to_string(explainable_values[row,col_ind])
 *                     data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>'\n'
 * 
 */
        __pyx_v_data_string_cpp += ((char *)((char *)", "));
      }
      __pyx_L80:;
    }

    /* "awe_ml/classifier_cython.pyx":2538
 *                     data_string_cpp+=to_string(explainable_values[row,col_ind])
 *                     data_string_cpp+=<char*>", "
 *             data_string_cpp+=<char*>'\n'             # <<<<<<<<<<<<<<
 * 
 *         if filename_prefix is not None:
 */
    __pyx_v_data_string_cpp += ((char *)((char *)"\n"));

    /* "awe_ml/classifier_cython.pyx":2526
 *         cdef np_long col_ind
 *         cdef np_long row
 *         for row in rev_inds:             # <<<<<<<<<<<<<<
 * 
 *             for col_ind in range(n_explainable_values_cols):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":2540
 *             data_string_cpp+=<char*>'\n'
 * 
 *         if filename_prefix is not None:             # <<<<<<<<<<<<<<
 *             with open(filename_prefix+"_combos.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))
 */
  __pyx_t_14 = (__pyx_v_filename_prefix != ((PyObject*)Py_None));
  __pyx_t_69 = (__pyx_t_14 != 0);
  if (__pyx_t_69) {

    /* "awe_ml/classifier_cython.pyx":2541
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_combos.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
    /*with:*/ {
      __pyx_t_1 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_filename_prefix, __pyx_kp_u_combos_csv); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
      __Pyx_INCREF(__pyx_n_u_w);
      __Pyx_GIVEREF(__pyx_n_u_w);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_n_u_w);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_76 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_exit); if (unlikely(!__pyx_t_76)) __PYX_ERR(1, 2541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_76);
      __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_n_s_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2541, __pyx_L85_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_6) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2541, __pyx_L85_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2541, __pyx_L85_error)
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_77, &__pyx_t_78, &__pyx_t_79);
          __Pyx_XGOTREF(__pyx_t_77);
          __Pyx_XGOTREF(__pyx_t_78);
          __Pyx_XGOTREF(__pyx_t_79);
          /*try:*/ {
            __pyx_v_f = __pyx_t_3;
            __pyx_t_3 = 0;

            /* "awe_ml/classifier_cython.pyx":2542
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_combos.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 *         ##### save to a pandas object
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2542, __pyx_L89_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_data_string_cpp, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2542, __pyx_L89_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_6 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
              __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
              if (likely(__pyx_t_6)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                __Pyx_INCREF(__pyx_t_6);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_1, function);
              }
            }
            if (!__pyx_t_6) {
              __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2542, __pyx_L89_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_GOTREF(__pyx_t_3);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_1)) {
                PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
                __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2542, __pyx_L89_error)
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
                __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2542, __pyx_L89_error)
                __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              } else
              #endif
              {
                __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2542, __pyx_L89_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
                __Pyx_GIVEREF(__pyx_t_4);
                PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_4);
                __pyx_t_4 = 0;
                __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2542, __pyx_L89_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "awe_ml/classifier_cython.pyx":2541
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_combos.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
          }
          __Pyx_XDECREF(__pyx_t_77); __pyx_t_77 = 0;
          __Pyx_XDECREF(__pyx_t_78); __pyx_t_78 = 0;
          __Pyx_XDECREF(__pyx_t_79); __pyx_t_79 = 0;
          goto __pyx_L94_try_end;
          __pyx_L89_error:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_34, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_38, 1);
          /*except:*/ {
            __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.analyze_single_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) __PYX_ERR(1, 2541, __pyx_L91_except_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = PyTuple_Pack(3, __pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2541, __pyx_L91_except_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_80 = __Pyx_PyObject_Call(__pyx_t_76, __pyx_t_4, NULL);
            __Pyx_DECREF(__pyx_t_76); __pyx_t_76 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_80)) __PYX_ERR(1, 2541, __pyx_L91_except_error)
            __Pyx_GOTREF(__pyx_t_80);
            __pyx_t_69 = __Pyx_PyObject_IsTrue(__pyx_t_80);
            __Pyx_DECREF(__pyx_t_80); __pyx_t_80 = 0;
            if (__pyx_t_69 < 0) __PYX_ERR(1, 2541, __pyx_L91_except_error)
            __pyx_t_14 = ((!(__pyx_t_69 != 0)) != 0);
            if (__pyx_t_14) {
              __Pyx_GIVEREF(__pyx_t_3);
              __Pyx_GIVEREF(__pyx_t_1);
              __Pyx_XGIVEREF(__pyx_t_2);
              __Pyx_ErrRestoreWithState(__pyx_t_3, __pyx_t_1, __pyx_t_2);
              __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_2 = 0; 
              __PYX_ERR(1, 2541, __pyx_L91_except_error)
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            goto __pyx_L90_exception_handled;
          }
          __pyx_L91_except_error:;
          __Pyx_XGIVEREF(__pyx_t_77);
          __Pyx_XGIVEREF(__pyx_t_78);
          __Pyx_XGIVEREF(__pyx_t_79);
          __Pyx_ExceptionReset(__pyx_t_77, __pyx_t_78, __pyx_t_79);
          goto __pyx_L1_error;
          __pyx_L90_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_77);
          __Pyx_XGIVEREF(__pyx_t_78);
          __Pyx_XGIVEREF(__pyx_t_79);
          __Pyx_ExceptionReset(__pyx_t_77, __pyx_t_78, __pyx_t_79);
          __pyx_L94_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_76) {
            __pyx_t_79 = __Pyx_PyObject_Call(__pyx_t_76, __pyx_tuple__18, NULL);
            __Pyx_DECREF(__pyx_t_76); __pyx_t_76 = 0;
            if (unlikely(!__pyx_t_79)) __PYX_ERR(1, 2541, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_79);
            __Pyx_DECREF(__pyx_t_79); __pyx_t_79 = 0;
          }
          goto __pyx_L88;
        }
        __pyx_L88:;
      }
      goto __pyx_L98;
      __pyx_L85_error:;
      __Pyx_DECREF(__pyx_t_76); __pyx_t_76 = 0;
      goto __pyx_L1_error;
      __pyx_L98:;
    }

    /* "awe_ml/classifier_cython.pyx":2540
 *             data_string_cpp+=<char*>'\n'
 * 
 *         if filename_prefix is not None:             # <<<<<<<<<<<<<<
 *             with open(filename_prefix+"_combos.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))
 */
  }

  /* "awe_ml/classifier_cython.pyx":2545
 * 
 *         ##### save to a pandas object
 *         combos_df = pd.read_csv(BytesIO(data_string_cpp))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_BytesIO); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_data_string_cpp); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_81 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_81 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_81)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_81);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_81) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2545, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_81, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_81); __pyx_t_81 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_81, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_81); __pyx_t_81 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_82 = PyTuple_New(1+1); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_82);
      __Pyx_GIVEREF(__pyx_t_81); PyTuple_SET_ITEM(__pyx_t_82, 0, __pyx_t_81); __pyx_t_81 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_82, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_82, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2545, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_82 = PyTuple_New(1+1); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_82);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_82, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_82, 0+1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_82, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2545, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_combos_df = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":2550
 *         ########################### print top level features:
 *         cdef np_float weight, probability
 *         n_features_in_level = weights_tree[1].size()             # <<<<<<<<<<<<<<
 * 
 *         cdef np_float label0
 */
  __pyx_v_n_features_in_level = (__pyx_v_weights_tree[1]).size();

  /* "awe_ml/classifier_cython.pyx":2553
 * 
 *         cdef np_float label0
 *         cdef np.ndarray[np_float, ndim=2] top_level_values = np.zeros((n_features_in_level,4),dtype = NP_FLOAT)             # <<<<<<<<<<<<<<
 *         #cdef np_float[:,:] top_level_values = np_top_level_values
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_n_features_in_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_82 = PyTuple_New(2); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_82, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_82, 1, __pyx_int_4);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_82);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_82);
  __pyx_t_82 = 0;
  __pyx_t_82 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_FLOAT); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_82, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_82); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 2553, __pyx_L1_error)
  __pyx_t_83 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_top_level_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_83, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_top_level_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 2553, __pyx_L1_error)
    } else {__pyx_pybuffernd_top_level_values.diminfo[0].strides = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_top_level_values.diminfo[0].shape = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_top_level_values.diminfo[1].strides = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_top_level_values.diminfo[1].shape = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_83 = 0;
  __pyx_v_top_level_values = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":2556
 *         #cdef np_float[:,:] top_level_values = np_top_level_values
 * 
 *         for local_tree_index in range(n_features_in_level):             # <<<<<<<<<<<<<<
 * 
 *             #find index into classification values
 */
  __pyx_t_11 = __pyx_v_n_features_in_level;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_local_tree_index = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2559
 * 
 *             #find index into classification values
 *             self.classification_values_list[1].set_node(local_tree_index)             # <<<<<<<<<<<<<<
 *             # compute_classification_vals_indicies(child_inds,local_tree_index, self.n_classes)
 * 
 */
    (__pyx_v_self->classification_values_list[1]).set_node(__pyx_v_local_tree_index);

    /* "awe_ml/classifier_cython.pyx":2563
 * 
 *             #load weight and probability
 *             weight = weights_tree[1][local_tree_index][0][predicted_class].first+weights_tree[1][local_tree_index][0][predicted_class].second             # <<<<<<<<<<<<<<
 *             probability = self.classification_values_list[1].estimated_p[predicted_class]
 *             #find label
 */
    __pyx_v_weight = (((((__pyx_v_weights_tree[1])[__pyx_v_local_tree_index])[0])[__pyx_v_predicted_class]).first + ((((__pyx_v_weights_tree[1])[__pyx_v_local_tree_index])[0])[__pyx_v_predicted_class]).second);

    /* "awe_ml/classifier_cython.pyx":2564
 *             #load weight and probability
 *             weight = weights_tree[1][local_tree_index][0][predicted_class].first+weights_tree[1][local_tree_index][0][predicted_class].second
 *             probability = self.classification_values_list[1].estimated_p[predicted_class]             # <<<<<<<<<<<<<<
 *             #find label
 *             full_tree_index = self.full_tree_indicies_list[1][local_tree_index]
 */
    try {
      __pyx_t_25 = (__pyx_v_self->classification_values_list[1]).estimated_p[__pyx_v_predicted_class];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2564, __pyx_L1_error)
    }
    __pyx_v_probability = __pyx_t_25;

    /* "awe_ml/classifier_cython.pyx":2566
 *             probability = self.classification_values_list[1].estimated_p[predicted_class]
 *             #find label
 *             full_tree_index = self.full_tree_indicies_list[1][local_tree_index]             # <<<<<<<<<<<<<<
 *             self.full_tree_vector[1].set_node(full_tree_index)
 *             label0 = self.full_tree_vector[1].label[0]
 */
    __pyx_v_full_tree_index = ((__pyx_v_self->full_tree_indicies_list[1])[__pyx_v_local_tree_index]);

    /* "awe_ml/classifier_cython.pyx":2567
 *             #find label
 *             full_tree_index = self.full_tree_indicies_list[1][local_tree_index]
 *             self.full_tree_vector[1].set_node(full_tree_index)             # <<<<<<<<<<<<<<
 *             label0 = self.full_tree_vector[1].label[0]
 * 
 */
    (__pyx_v_self->full_tree_vector[1]).set_node(__pyx_v_full_tree_index);

    /* "awe_ml/classifier_cython.pyx":2568
 *             full_tree_index = self.full_tree_indicies_list[1][local_tree_index]
 *             self.full_tree_vector[1].set_node(full_tree_index)
 *             label0 = self.full_tree_vector[1].label[0]             # <<<<<<<<<<<<<<
 * 
 *             top_level_values[local_tree_index,0]=label0
 */
    try {
      __pyx_t_15 = (__pyx_v_self->full_tree_vector[1]).label[0];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2568, __pyx_L1_error)
    }
    __pyx_v_label0 = __pyx_t_15;

    /* "awe_ml/classifier_cython.pyx":2570
 *             label0 = self.full_tree_vector[1].label[0]
 * 
 *             top_level_values[local_tree_index,0]=label0             # <<<<<<<<<<<<<<
 *             top_level_values[local_tree_index,1]=probability
 *             top_level_values[local_tree_index,2]= self.full_tree_vector[1].p0[predicted_class]
 */
    __pyx_t_84 = __pyx_v_local_tree_index;
    __pyx_t_85 = 0;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_84, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_85, __pyx_pybuffernd_top_level_values.diminfo[1].strides) = __pyx_v_label0;

    /* "awe_ml/classifier_cython.pyx":2571
 * 
 *             top_level_values[local_tree_index,0]=label0
 *             top_level_values[local_tree_index,1]=probability             # <<<<<<<<<<<<<<
 *             top_level_values[local_tree_index,2]= self.full_tree_vector[1].p0[predicted_class]
 *             top_level_values[local_tree_index,3]=weight
 */
    __pyx_t_86 = __pyx_v_local_tree_index;
    __pyx_t_87 = 1;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_86, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_87, __pyx_pybuffernd_top_level_values.diminfo[1].strides) = __pyx_v_probability;

    /* "awe_ml/classifier_cython.pyx":2572
 *             top_level_values[local_tree_index,0]=label0
 *             top_level_values[local_tree_index,1]=probability
 *             top_level_values[local_tree_index,2]= self.full_tree_vector[1].p0[predicted_class]             # <<<<<<<<<<<<<<
 *             top_level_values[local_tree_index,3]=weight
 * 
 */
    try {
      __pyx_t_25 = (__pyx_v_self->full_tree_vector[1]).p0[__pyx_v_predicted_class];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2572, __pyx_L1_error)
    }
    __pyx_t_88 = __pyx_v_local_tree_index;
    __pyx_t_89 = 2;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_88, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_89, __pyx_pybuffernd_top_level_values.diminfo[1].strides) = __pyx_t_25;

    /* "awe_ml/classifier_cython.pyx":2573
 *             top_level_values[local_tree_index,1]=probability
 *             top_level_values[local_tree_index,2]= self.full_tree_vector[1].p0[predicted_class]
 *             top_level_values[local_tree_index,3]=weight             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_90 = __pyx_v_local_tree_index;
    __pyx_t_91 = 3;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_90, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_91, __pyx_pybuffernd_top_level_values.diminfo[1].strides) = __pyx_v_weight;
  }

  /* "awe_ml/classifier_cython.pyx":2577
 * 
 *         # sort by weight
 *         inds = top_level_values[:,3].argsort()             # <<<<<<<<<<<<<<
 *         top_level_values = top_level_values[inds[::-1]]
 * 
 */
  __pyx_t_82 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_top_level_values), __pyx_tuple__20); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_82, __pyx_n_s_argsort); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
  __pyx_t_82 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_82 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_82)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_82);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_82) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_82); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2577, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2577, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_inds, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":2578
 *         # sort by weight
 *         inds = top_level_values[:,3].argsort()
 *         top_level_values = top_level_values[inds[::-1]]             # <<<<<<<<<<<<<<
 * 
 *         #create string to store all data and then write to file:
 */
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_inds, __pyx_slice__21); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_top_level_values), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 2578, __pyx_L1_error)
  __pyx_t_83 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_top_level_values.rcbuffer->pybuffer);
    __pyx_t_5 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_top_level_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_83, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_5 < 0)) {
      PyErr_Fetch(&__pyx_t_76, &__pyx_t_79, &__pyx_t_78);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_top_level_values.rcbuffer->pybuffer, (PyObject*)__pyx_v_top_level_values, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_76); Py_XDECREF(__pyx_t_79); Py_XDECREF(__pyx_t_78);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_76, __pyx_t_79, __pyx_t_78);
      }
      __pyx_t_76 = __pyx_t_79 = __pyx_t_78 = 0;
    }
    __pyx_pybuffernd_top_level_values.diminfo[0].strides = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_top_level_values.diminfo[0].shape = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_top_level_values.diminfo[1].strides = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_top_level_values.diminfo[1].shape = __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 2578, __pyx_L1_error)
  }
  __pyx_t_83 = 0;
  __Pyx_DECREF_SET(__pyx_v_top_level_values, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":2582
 *         #create string to store all data and then write to file:
 *         #use C++ string for fast appends
 *         data_string_cpp  = <string> b"feature, weighted_probability, original_probability, weight\n"             # <<<<<<<<<<<<<<
 *         for local_tree_index in range(n_features_in_level):
 *             comb_feat_ind= <np_long> top_level_values[local_tree_index,0]
 */
  __pyx_t_66 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_feature_weighted_probability_ori); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2582, __pyx_L1_error)
  __pyx_v_data_string_cpp = ((std::string)__pyx_t_66);

  /* "awe_ml/classifier_cython.pyx":2583
 *         #use C++ string for fast appends
 *         data_string_cpp  = <string> b"feature, weighted_probability, original_probability, weight\n"
 *         for local_tree_index in range(n_features_in_level):             # <<<<<<<<<<<<<<
 *             comb_feat_ind= <np_long> top_level_values[local_tree_index,0]
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 */
  __pyx_t_11 = __pyx_v_n_features_in_level;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_local_tree_index = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2584
 *         data_string_cpp  = <string> b"feature, weighted_probability, original_probability, weight\n"
 *         for local_tree_index in range(n_features_in_level):
 *             comb_feat_ind= <np_long> top_level_values[local_tree_index,0]             # <<<<<<<<<<<<<<
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 *             data_string_cpp+=<char*>", "
 */
    __pyx_t_92 = __pyx_v_local_tree_index;
    __pyx_t_93 = 0;
    __pyx_v_comb_feat_ind = ((__pyx_t_6awe_ml_17classifier_cython_np_long)(*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_92, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_93, __pyx_pybuffernd_top_level_values.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2585
 *         for local_tree_index in range(n_features_in_level):
 *             comb_feat_ind= <np_long> top_level_values[local_tree_index,0]
 *             data_string_cpp+=self.get_name(comb_feat_ind)             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,1])
 */
    __pyx_v_data_string_cpp += ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->get_name(__pyx_v_self, __pyx_v_comb_feat_ind);

    /* "awe_ml/classifier_cython.pyx":2586
 *             comb_feat_ind= <np_long> top_level_values[local_tree_index,0]
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 *             data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,1])
 *             data_string_cpp+=<char*>", "
 */
    __pyx_v_data_string_cpp += ((char *)((char *)", "));

    /* "awe_ml/classifier_cython.pyx":2587
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,1])             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,2])
 */
    __pyx_t_94 = __pyx_v_local_tree_index;
    __pyx_t_95 = 1;
    __pyx_v_data_string_cpp += std::to_string((*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_94, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_95, __pyx_pybuffernd_top_level_values.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2588
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,1])
 *             data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,2])
 *             data_string_cpp+=<char*>", "
 */
    __pyx_v_data_string_cpp += ((char *)((char *)", "));

    /* "awe_ml/classifier_cython.pyx":2589
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,1])
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,2])             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,3])
 */
    __pyx_t_96 = __pyx_v_local_tree_index;
    __pyx_t_97 = 2;
    __pyx_v_data_string_cpp += std::to_string((*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_96, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_97, __pyx_pybuffernd_top_level_values.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2590
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,2])
 *             data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,3])
 *             data_string_cpp+=<char*>"\n"
 */
    __pyx_v_data_string_cpp += ((char *)((char *)", "));

    /* "awe_ml/classifier_cython.pyx":2591
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,2])
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,3])             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>"\n"
 * 
 */
    __pyx_t_98 = __pyx_v_local_tree_index;
    __pyx_t_99 = 3;
    __pyx_v_data_string_cpp += std::to_string((*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_top_level_values.rcbuffer->pybuffer.buf, __pyx_t_98, __pyx_pybuffernd_top_level_values.diminfo[0].strides, __pyx_t_99, __pyx_pybuffernd_top_level_values.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2592
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(top_level_values[local_tree_index,3])
 *             data_string_cpp+=<char*>"\n"             # <<<<<<<<<<<<<<
 * 
 *         # print (data_string)
 */
    __pyx_v_data_string_cpp += ((char *)((char *)"\n"));
  }

  /* "awe_ml/classifier_cython.pyx":2596
 *         # print (data_string)
 * 
 *         if filename_prefix is not None:             # <<<<<<<<<<<<<<
 *             with open(filename_prefix+"_top_of_tree.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))
 */
  __pyx_t_14 = (__pyx_v_filename_prefix != ((PyObject*)Py_None));
  __pyx_t_69 = (__pyx_t_14 != 0);
  if (__pyx_t_69) {

    /* "awe_ml/classifier_cython.pyx":2597
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_top_of_tree.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
    /*with:*/ {
      __pyx_t_2 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_filename_prefix, __pyx_kp_u_top_of_tree_csv); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_INCREF(__pyx_n_u_w);
      __Pyx_GIVEREF(__pyx_n_u_w);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_w);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_78 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_78)) __PYX_ERR(1, 2597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_78);
      __pyx_t_82 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2597, __pyx_L104_error)
      __Pyx_GOTREF(__pyx_t_82);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_82))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_82);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_82);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_82, function);
        }
      }
      if (__pyx_t_3) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_82, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2597, __pyx_L104_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_82); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2597, __pyx_L104_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
      __pyx_t_82 = __pyx_t_1;
      __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_79, &__pyx_t_76, &__pyx_t_77);
          __Pyx_XGOTREF(__pyx_t_79);
          __Pyx_XGOTREF(__pyx_t_76);
          __Pyx_XGOTREF(__pyx_t_77);
          /*try:*/ {
            __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_82);
            __pyx_t_82 = 0;

            /* "awe_ml/classifier_cython.pyx":2598
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_top_of_tree.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2598, __pyx_L108_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_v_data_string_cpp, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2598, __pyx_L108_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
              }
            }
            if (!__pyx_t_3) {
              __pyx_t_82 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2598, __pyx_L108_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_GOTREF(__pyx_t_82);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_2)) {
                PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
                __pyx_t_82 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2598, __pyx_L108_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_82);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
                PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_1};
                __pyx_t_82 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2598, __pyx_L108_error)
                __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                __Pyx_GOTREF(__pyx_t_82);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              } else
              #endif
              {
                __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2598, __pyx_L108_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
                __Pyx_GIVEREF(__pyx_t_1);
                PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_1);
                __pyx_t_1 = 0;
                __pyx_t_82 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2598, __pyx_L108_error)
                __Pyx_GOTREF(__pyx_t_82);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;

            /* "awe_ml/classifier_cython.pyx":2597
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_top_of_tree.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
          }
          __Pyx_XDECREF(__pyx_t_79); __pyx_t_79 = 0;
          __Pyx_XDECREF(__pyx_t_76); __pyx_t_76 = 0;
          __Pyx_XDECREF(__pyx_t_77); __pyx_t_77 = 0;
          goto __pyx_L113_try_end;
          __pyx_L108_error:;
          __Pyx_XDECREF(__pyx_t_81); __pyx_t_81 = 0;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_82); __pyx_t_82 = 0;
          __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_34, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_38, 1);
          /*except:*/ {
            __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.analyze_single_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_82, &__pyx_t_2, &__pyx_t_4) < 0) __PYX_ERR(1, 2597, __pyx_L110_except_error)
            __Pyx_GOTREF(__pyx_t_82);
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_1 = PyTuple_Pack(3, __pyx_t_82, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2597, __pyx_L110_except_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_80 = __Pyx_PyObject_Call(__pyx_t_78, __pyx_t_1, NULL);
            __Pyx_DECREF(__pyx_t_78); __pyx_t_78 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_80)) __PYX_ERR(1, 2597, __pyx_L110_except_error)
            __Pyx_GOTREF(__pyx_t_80);
            __pyx_t_69 = __Pyx_PyObject_IsTrue(__pyx_t_80);
            __Pyx_DECREF(__pyx_t_80); __pyx_t_80 = 0;
            if (__pyx_t_69 < 0) __PYX_ERR(1, 2597, __pyx_L110_except_error)
            __pyx_t_14 = ((!(__pyx_t_69 != 0)) != 0);
            if (__pyx_t_14) {
              __Pyx_GIVEREF(__pyx_t_82);
              __Pyx_GIVEREF(__pyx_t_2);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_ErrRestoreWithState(__pyx_t_82, __pyx_t_2, __pyx_t_4);
              __pyx_t_82 = 0; __pyx_t_2 = 0; __pyx_t_4 = 0; 
              __PYX_ERR(1, 2597, __pyx_L110_except_error)
            }
            __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            goto __pyx_L109_exception_handled;
          }
          __pyx_L110_except_error:;
          __Pyx_XGIVEREF(__pyx_t_79);
          __Pyx_XGIVEREF(__pyx_t_76);
          __Pyx_XGIVEREF(__pyx_t_77);
          __Pyx_ExceptionReset(__pyx_t_79, __pyx_t_76, __pyx_t_77);
          goto __pyx_L1_error;
          __pyx_L109_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_79);
          __Pyx_XGIVEREF(__pyx_t_76);
          __Pyx_XGIVEREF(__pyx_t_77);
          __Pyx_ExceptionReset(__pyx_t_79, __pyx_t_76, __pyx_t_77);
          __pyx_L113_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_78) {
            __pyx_t_77 = __Pyx_PyObject_Call(__pyx_t_78, __pyx_tuple__22, NULL);
            __Pyx_DECREF(__pyx_t_78); __pyx_t_78 = 0;
            if (unlikely(!__pyx_t_77)) __PYX_ERR(1, 2597, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_77);
            __Pyx_DECREF(__pyx_t_77); __pyx_t_77 = 0;
          }
          goto __pyx_L107;
        }
        __pyx_L107:;
      }
      goto __pyx_L117;
      __pyx_L104_error:;
      __Pyx_DECREF(__pyx_t_78); __pyx_t_78 = 0;
      goto __pyx_L1_error;
      __pyx_L117:;
    }

    /* "awe_ml/classifier_cython.pyx":2596
 *         # print (data_string)
 * 
 *         if filename_prefix is not None:             # <<<<<<<<<<<<<<
 *             with open(filename_prefix+"_top_of_tree.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))
 */
  }

  /* "awe_ml/classifier_cython.pyx":2602
 * 
 *         ### save to pandas dataframe
 *         top_of_tree_df = pd.read_csv(BytesIO(data_string_cpp))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_82 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BytesIO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_data_string_cpp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2602, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_81 = PyTuple_New(1+1); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_81);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_81, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_81, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_81, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_82))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_82);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_82);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_82, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_82, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2602, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_82)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_82, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_82)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_82, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_81 = PyTuple_New(1+1); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_81);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_81, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_81, 0+1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_82, __pyx_t_81, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2602, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
  __pyx_v_top_of_tree_df = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "awe_ml/classifier_cython.pyx":2620
 *         cdef np_long explainable_level
 * 
 *         for feature_ctr in range(n_unique_combos):             # <<<<<<<<<<<<<<
 *             explainable_level  = <np_long> explainable_values[feature_ctr,0]
 *             node_weight = explainable_values[feature_ctr,weight_ind+predicted_class]
 */
  __pyx_t_20 = __pyx_v_n_unique_combos;
  __pyx_t_27 = __pyx_t_20;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_27; __pyx_t_11+=1) {
    __pyx_v_feature_ctr = __pyx_t_11;

    /* "awe_ml/classifier_cython.pyx":2621
 * 
 *         for feature_ctr in range(n_unique_combos):
 *             explainable_level  = <np_long> explainable_values[feature_ctr,0]             # <<<<<<<<<<<<<<
 *             node_weight = explainable_values[feature_ctr,weight_ind+predicted_class]
 *             node_probability = explainable_values[feature_ctr,p_ind+predicted_class]
 */
    __pyx_t_100 = __pyx_v_feature_ctr;
    __pyx_t_101 = 0;
    __pyx_v_explainable_level = ((__pyx_t_6awe_ml_17classifier_cython_np_long)(*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_100 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_101 * __pyx_v_explainable_values.strides[1]) ))));

    /* "awe_ml/classifier_cython.pyx":2622
 *         for feature_ctr in range(n_unique_combos):
 *             explainable_level  = <np_long> explainable_values[feature_ctr,0]
 *             node_weight = explainable_values[feature_ctr,weight_ind+predicted_class]             # <<<<<<<<<<<<<<
 *             node_probability = explainable_values[feature_ctr,p_ind+predicted_class]
 * 
 */
    __pyx_t_102 = __pyx_v_feature_ctr;
    __pyx_t_103 = (__pyx_v_weight_ind + __pyx_v_predicted_class);
    __pyx_v_node_weight = (*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_102 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_103 * __pyx_v_explainable_values.strides[1]) )));

    /* "awe_ml/classifier_cython.pyx":2623
 *             explainable_level  = <np_long> explainable_values[feature_ctr,0]
 *             node_weight = explainable_values[feature_ctr,weight_ind+predicted_class]
 *             node_probability = explainable_values[feature_ctr,p_ind+predicted_class]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_104 = __pyx_v_feature_ctr;
    __pyx_t_105 = (__pyx_v_p_ind + __pyx_v_predicted_class);
    __pyx_v_node_probability = (*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_104 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_105 * __pyx_v_explainable_values.strides[1]) )));

    /* "awe_ml/classifier_cython.pyx":2627
 * 
 *             #iterate over features and split weight and probability over all parents
 *             for parent_ctr in range(explainable_level):             # <<<<<<<<<<<<<<
 *                 comb_feat_ind = <np_long> explainable_values[feature_ctr,feature_ind+parent_ctr]
 *                 if feature_weights.find(comb_feat_ind) == feature_weights.end():
 */
    __pyx_t_12 = __pyx_v_explainable_level;
    __pyx_t_13 = __pyx_t_12;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_13; __pyx_t_15+=1) {
      __pyx_v_parent_ctr = __pyx_t_15;

      /* "awe_ml/classifier_cython.pyx":2628
 *             #iterate over features and split weight and probability over all parents
 *             for parent_ctr in range(explainable_level):
 *                 comb_feat_ind = <np_long> explainable_values[feature_ctr,feature_ind+parent_ctr]             # <<<<<<<<<<<<<<
 *                 if feature_weights.find(comb_feat_ind) == feature_weights.end():
 *                     feature_weights[comb_feat_ind]=node_weight/explainable_level
 */
      __pyx_t_106 = __pyx_v_feature_ctr;
      __pyx_t_107 = (__pyx_v_feature_ind + __pyx_v_parent_ctr);
      __pyx_v_comb_feat_ind = ((__pyx_t_6awe_ml_17classifier_cython_np_long)(*((__pyx_t_6awe_ml_17classifier_cython_np_float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_explainable_values.data + __pyx_t_106 * __pyx_v_explainable_values.strides[0]) ) + __pyx_t_107 * __pyx_v_explainable_values.strides[1]) ))));

      /* "awe_ml/classifier_cython.pyx":2629
 *             for parent_ctr in range(explainable_level):
 *                 comb_feat_ind = <np_long> explainable_values[feature_ctr,feature_ind+parent_ctr]
 *                 if feature_weights.find(comb_feat_ind) == feature_weights.end():             # <<<<<<<<<<<<<<
 *                     feature_weights[comb_feat_ind]=node_weight/explainable_level
 *                     weighted_probability[comb_feat_ind]=node_probability*node_weight/explainable_level
 */
      __pyx_t_14 = ((__pyx_v_feature_weights.find(__pyx_v_comb_feat_ind) == __pyx_v_feature_weights.end()) != 0);
      if (__pyx_t_14) {

        /* "awe_ml/classifier_cython.pyx":2630
 *                 comb_feat_ind = <np_long> explainable_values[feature_ctr,feature_ind+parent_ctr]
 *                 if feature_weights.find(comb_feat_ind) == feature_weights.end():
 *                     feature_weights[comb_feat_ind]=node_weight/explainable_level             # <<<<<<<<<<<<<<
 *                     weighted_probability[comb_feat_ind]=node_probability*node_weight/explainable_level
 *                 else:
 */
        (__pyx_v_feature_weights[__pyx_v_comb_feat_ind]) = (__pyx_v_node_weight / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_explainable_level));

        /* "awe_ml/classifier_cython.pyx":2631
 *                 if feature_weights.find(comb_feat_ind) == feature_weights.end():
 *                     feature_weights[comb_feat_ind]=node_weight/explainable_level
 *                     weighted_probability[comb_feat_ind]=node_probability*node_weight/explainable_level             # <<<<<<<<<<<<<<
 *                 else:
 *                     feature_weights[comb_feat_ind]+=node_weight/explainable_level
 */
        (__pyx_v_weighted_probability[__pyx_v_comb_feat_ind]) = ((__pyx_v_node_probability * __pyx_v_node_weight) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_explainable_level));

        /* "awe_ml/classifier_cython.pyx":2629
 *             for parent_ctr in range(explainable_level):
 *                 comb_feat_ind = <np_long> explainable_values[feature_ctr,feature_ind+parent_ctr]
 *                 if feature_weights.find(comb_feat_ind) == feature_weights.end():             # <<<<<<<<<<<<<<
 *                     feature_weights[comb_feat_ind]=node_weight/explainable_level
 *                     weighted_probability[comb_feat_ind]=node_probability*node_weight/explainable_level
 */
        goto __pyx_L122;
      }

      /* "awe_ml/classifier_cython.pyx":2633
 *                     weighted_probability[comb_feat_ind]=node_probability*node_weight/explainable_level
 *                 else:
 *                     feature_weights[comb_feat_ind]+=node_weight/explainable_level             # <<<<<<<<<<<<<<
 *                     weighted_probability[comb_feat_ind]+=node_probability*node_weight/explainable_level
 * 
 */
      /*else*/ {
        __pyx_t_16 = __pyx_v_comb_feat_ind;
        (__pyx_v_feature_weights[__pyx_t_16]) = ((__pyx_v_feature_weights[__pyx_t_16]) + (__pyx_v_node_weight / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_explainable_level)));

        /* "awe_ml/classifier_cython.pyx":2634
 *                 else:
 *                     feature_weights[comb_feat_ind]+=node_weight/explainable_level
 *                     weighted_probability[comb_feat_ind]+=node_probability*node_weight/explainable_level             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_16 = __pyx_v_comb_feat_ind;
        (__pyx_v_weighted_probability[__pyx_t_16]) = ((__pyx_v_weighted_probability[__pyx_t_16]) + ((__pyx_v_node_probability * __pyx_v_node_weight) / ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_v_explainable_level)));
      }
      __pyx_L122:;
    }
  }

  /* "awe_ml/classifier_cython.pyx":2639
 *         # convert maps to strings
 * 
 *         n_features_in_level = weights_tree[1].size()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np_float, ndim=2] explain_by_feature = np.zeros((n_features_in_level,4),dtype = NP_FLOAT)
 *         #cdef np_float[:,:] explain_by_feature = np_explain_by_feature
 */
  __pyx_v_n_features_in_level = (__pyx_v_weights_tree[1]).size();

  /* "awe_ml/classifier_cython.pyx":2640
 * 
 *         n_features_in_level = weights_tree[1].size()
 *         cdef np.ndarray[np_float, ndim=2] explain_by_feature = np.zeros((n_features_in_level,4),dtype = NP_FLOAT)             # <<<<<<<<<<<<<<
 *         #cdef np_float[:,:] explain_by_feature = np_explain_by_feature
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_82 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_npy_int32(__pyx_v_n_features_in_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_81 = PyTuple_New(2); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_81);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_81, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_81, 1, __pyx_int_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_81);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_81);
  __pyx_t_81 = 0;
  __pyx_t_81 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_81);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_NP_FLOAT); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_81, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_82, __pyx_t_4, __pyx_t_81); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 2640, __pyx_L1_error)
  __pyx_t_108 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer, (PyObject*)__pyx_t_108, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_explain_by_feature = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 2640, __pyx_L1_error)
    } else {__pyx_pybuffernd_explain_by_feature.diminfo[0].strides = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_explain_by_feature.diminfo[0].shape = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_explain_by_feature.diminfo[1].strides = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_explain_by_feature.diminfo[1].shape = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_108 = 0;
  __pyx_v_explain_by_feature = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":2646
 *         cdef map[np_long, np_float].iterator weighted_probability_it
 * 
 *         feature_weights_it = feature_weights.begin()             # <<<<<<<<<<<<<<
 *         weighted_probability_it = weighted_probability.begin()
 * 
 */
  __pyx_v_feature_weights_it = __pyx_v_feature_weights.begin();

  /* "awe_ml/classifier_cython.pyx":2647
 * 
 *         feature_weights_it = feature_weights.begin()
 *         weighted_probability_it = weighted_probability.begin()             # <<<<<<<<<<<<<<
 * 
 *         for feature_ctr in range(n_features_in_level):
 */
  __pyx_v_weighted_probability_it = __pyx_v_weighted_probability.begin();

  /* "awe_ml/classifier_cython.pyx":2649
 *         weighted_probability_it = weighted_probability.begin()
 * 
 *         for feature_ctr in range(n_features_in_level):             # <<<<<<<<<<<<<<
 *             comb_feat_ind = deref(weighted_probability_it).first
 *             explain_by_feature[feature_ctr,0]=comb_feat_ind
 */
  __pyx_t_11 = __pyx_v_n_features_in_level;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_feature_ctr = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2650
 * 
 *         for feature_ctr in range(n_features_in_level):
 *             comb_feat_ind = deref(weighted_probability_it).first             # <<<<<<<<<<<<<<
 *             explain_by_feature[feature_ctr,0]=comb_feat_ind
 *             explain_by_feature[feature_ctr,1]=deref(weighted_probability_it).second/deref(feature_weights_it).second
 */
    __pyx_t_15 = (*__pyx_v_weighted_probability_it).first;
    __pyx_v_comb_feat_ind = __pyx_t_15;

    /* "awe_ml/classifier_cython.pyx":2651
 *         for feature_ctr in range(n_features_in_level):
 *             comb_feat_ind = deref(weighted_probability_it).first
 *             explain_by_feature[feature_ctr,0]=comb_feat_ind             # <<<<<<<<<<<<<<
 *             explain_by_feature[feature_ctr,1]=deref(weighted_probability_it).second/deref(feature_weights_it).second
 *             explain_by_feature[feature_ctr,3]=deref(feature_weights_it).second
 */
    __pyx_t_109 = __pyx_v_feature_ctr;
    __pyx_t_110 = 0;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_109, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_110, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides) = __pyx_v_comb_feat_ind;

    /* "awe_ml/classifier_cython.pyx":2652
 *             comb_feat_ind = deref(weighted_probability_it).first
 *             explain_by_feature[feature_ctr,0]=comb_feat_ind
 *             explain_by_feature[feature_ctr,1]=deref(weighted_probability_it).second/deref(feature_weights_it).second             # <<<<<<<<<<<<<<
 *             explain_by_feature[feature_ctr,3]=deref(feature_weights_it).second
 *             #go from label to global tree index to p0
 */
    __pyx_t_111 = __pyx_v_feature_ctr;
    __pyx_t_112 = 1;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_111, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_112, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides) = ((*__pyx_v_weighted_probability_it).second / (*__pyx_v_feature_weights_it).second);

    /* "awe_ml/classifier_cython.pyx":2653
 *             explain_by_feature[feature_ctr,0]=comb_feat_ind
 *             explain_by_feature[feature_ctr,1]=deref(weighted_probability_it).second/deref(feature_weights_it).second
 *             explain_by_feature[feature_ctr,3]=deref(feature_weights_it).second             # <<<<<<<<<<<<<<
 *             #go from label to global tree index to p0
 * 
 */
    __pyx_t_25 = (*__pyx_v_feature_weights_it).second;
    __pyx_t_113 = __pyx_v_feature_ctr;
    __pyx_t_114 = 3;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_113, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_114, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides) = __pyx_t_25;

    /* "awe_ml/classifier_cython.pyx":2657
 * 
 *             #search node_label_list to find full_tree_ind
 *             for full_tree_index in range(self.full_tree_vector[1].n_nodes):             # <<<<<<<<<<<<<<
 *                 self.full_tree_vector[1].set_node(full_tree_index)
 *                 if self.full_tree_vector[1].label[0]==comb_feat_ind:
 */
    __pyx_t_20 = (__pyx_v_self->full_tree_vector[1]).n_nodes;
    __pyx_t_27 = __pyx_t_20;
    for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_27; __pyx_t_15+=1) {
      __pyx_v_full_tree_index = __pyx_t_15;

      /* "awe_ml/classifier_cython.pyx":2658
 *             #search node_label_list to find full_tree_ind
 *             for full_tree_index in range(self.full_tree_vector[1].n_nodes):
 *                 self.full_tree_vector[1].set_node(full_tree_index)             # <<<<<<<<<<<<<<
 *                 if self.full_tree_vector[1].label[0]==comb_feat_ind:
 *                     break
 */
      (__pyx_v_self->full_tree_vector[1]).set_node(__pyx_v_full_tree_index);

      /* "awe_ml/classifier_cython.pyx":2659
 *             for full_tree_index in range(self.full_tree_vector[1].n_nodes):
 *                 self.full_tree_vector[1].set_node(full_tree_index)
 *                 if self.full_tree_vector[1].label[0]==comb_feat_ind:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      try {
        __pyx_t_16 = (__pyx_v_self->full_tree_vector[1]).label[0];
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 2659, __pyx_L1_error)
      }
      __pyx_t_14 = ((__pyx_t_16 == __pyx_v_comb_feat_ind) != 0);
      if (__pyx_t_14) {

        /* "awe_ml/classifier_cython.pyx":2660
 *                 self.full_tree_vector[1].set_node(full_tree_index)
 *                 if self.full_tree_vector[1].label[0]==comb_feat_ind:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             explain_by_feature[feature_ctr,2]= self.full_tree_vector[1].p0[predicted_class]
 */
        goto __pyx_L126_break;

        /* "awe_ml/classifier_cython.pyx":2659
 *             for full_tree_index in range(self.full_tree_vector[1].n_nodes):
 *                 self.full_tree_vector[1].set_node(full_tree_index)
 *                 if self.full_tree_vector[1].label[0]==comb_feat_ind:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }
    }
    __pyx_L126_break:;

    /* "awe_ml/classifier_cython.pyx":2662
 *                     break
 * 
 *             explain_by_feature[feature_ctr,2]= self.full_tree_vector[1].p0[predicted_class]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_t_25 = (__pyx_v_self->full_tree_vector[1]).p0[__pyx_v_predicted_class];
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 2662, __pyx_L1_error)
    }
    __pyx_t_115 = __pyx_v_feature_ctr;
    __pyx_t_116 = 2;
    *__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_115, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_116, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides) = __pyx_t_25;

    /* "awe_ml/classifier_cython.pyx":2665
 * 
 * 
 *             inc(feature_weights_it)             # <<<<<<<<<<<<<<
 *             inc(weighted_probability_it)
 * 
 */
    (void)((++__pyx_v_feature_weights_it));

    /* "awe_ml/classifier_cython.pyx":2666
 * 
 *             inc(feature_weights_it)
 *             inc(weighted_probability_it)             # <<<<<<<<<<<<<<
 * 
 *         # print(explain_by_feature)
 */
    (void)((++__pyx_v_weighted_probability_it));
  }

  /* "awe_ml/classifier_cython.pyx":2671
 * 
 *         # sort be weight
 *         inds = explain_by_feature[:,3].argsort()             # <<<<<<<<<<<<<<
 *         explain_by_feature = explain_by_feature[inds[::-1]]
 * 
 */
  __pyx_t_81 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_explain_by_feature), __pyx_tuple__24); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_81);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_81, __pyx_n_s_argsort); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
  __pyx_t_81 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_81 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_81)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_81);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_81) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_81); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2671, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2671, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_inds, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":2672
 *         # sort be weight
 *         inds = explain_by_feature[:,3].argsort()
 *         explain_by_feature = explain_by_feature[inds[::-1]]             # <<<<<<<<<<<<<<
 * 
 *         #create string to store all data and then write to file:
 */
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_inds, __pyx_slice__25); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_explain_by_feature), __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 2672, __pyx_L1_error)
  __pyx_t_108 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer);
    __pyx_t_5 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer, (PyObject*)__pyx_t_108, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_5 < 0)) {
      PyErr_Fetch(&__pyx_t_78, &__pyx_t_77, &__pyx_t_76);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer, (PyObject*)__pyx_v_explain_by_feature, &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_78); Py_XDECREF(__pyx_t_77); Py_XDECREF(__pyx_t_76);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_78, __pyx_t_77, __pyx_t_76);
      }
      __pyx_t_78 = __pyx_t_77 = __pyx_t_76 = 0;
    }
    __pyx_pybuffernd_explain_by_feature.diminfo[0].strides = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_explain_by_feature.diminfo[0].shape = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_explain_by_feature.diminfo[1].strides = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_explain_by_feature.diminfo[1].shape = __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 2672, __pyx_L1_error)
  }
  __pyx_t_108 = 0;
  __Pyx_DECREF_SET(__pyx_v_explain_by_feature, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "awe_ml/classifier_cython.pyx":2675
 * 
 *         #create string to store all data and then write to file:
 *         data_string_cpp  = <string> b"feature, weighted_probability, original_probability, weight\n"             # <<<<<<<<<<<<<<
 *         for local_tree_index in range(n_features_in_level):
 *             comb_feat_ind= <np_long> explain_by_feature[local_tree_index,0]
 */
  __pyx_t_66 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_feature_weighted_probability_ori); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 2675, __pyx_L1_error)
  __pyx_v_data_string_cpp = ((std::string)__pyx_t_66);

  /* "awe_ml/classifier_cython.pyx":2676
 *         #create string to store all data and then write to file:
 *         data_string_cpp  = <string> b"feature, weighted_probability, original_probability, weight\n"
 *         for local_tree_index in range(n_features_in_level):             # <<<<<<<<<<<<<<
 *             comb_feat_ind= <np_long> explain_by_feature[local_tree_index,0]
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 */
  __pyx_t_11 = __pyx_v_n_features_in_level;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_local_tree_index = __pyx_t_13;

    /* "awe_ml/classifier_cython.pyx":2677
 *         data_string_cpp  = <string> b"feature, weighted_probability, original_probability, weight\n"
 *         for local_tree_index in range(n_features_in_level):
 *             comb_feat_ind= <np_long> explain_by_feature[local_tree_index,0]             # <<<<<<<<<<<<<<
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 *             data_string_cpp+=<char*>", "
 */
    __pyx_t_117 = __pyx_v_local_tree_index;
    __pyx_t_118 = 0;
    __pyx_v_comb_feat_ind = ((__pyx_t_6awe_ml_17classifier_cython_np_long)(*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_117, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_118, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2678
 *         for local_tree_index in range(n_features_in_level):
 *             comb_feat_ind= <np_long> explain_by_feature[local_tree_index,0]
 *             data_string_cpp+=self.get_name(comb_feat_ind)             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,1])
 */
    __pyx_v_data_string_cpp += ((struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self->__pyx_vtab)->get_name(__pyx_v_self, __pyx_v_comb_feat_ind);

    /* "awe_ml/classifier_cython.pyx":2679
 *             comb_feat_ind= <np_long> explain_by_feature[local_tree_index,0]
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 *             data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,1])
 *             data_string_cpp+=<char*>", "
 */
    __pyx_v_data_string_cpp += ((char *)((char *)", "));

    /* "awe_ml/classifier_cython.pyx":2680
 *             data_string_cpp+=self.get_name(comb_feat_ind)
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,1])             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,2])
 */
    __pyx_t_119 = __pyx_v_local_tree_index;
    __pyx_t_120 = 1;
    __pyx_v_data_string_cpp += std::to_string((*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_119, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_120, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2681
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,1])
 *             data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,2])
 *             data_string_cpp+=<char*>", "
 */
    __pyx_v_data_string_cpp += ((char *)((char *)", "));

    /* "awe_ml/classifier_cython.pyx":2682
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,1])
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,2])             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,3])
 */
    __pyx_t_121 = __pyx_v_local_tree_index;
    __pyx_t_122 = 2;
    __pyx_v_data_string_cpp += std::to_string((*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_121, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_122, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2683
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,2])
 *             data_string_cpp+=<char*>", "             # <<<<<<<<<<<<<<
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,3])
 *             data_string_cpp+=<char*>"\n"
 */
    __pyx_v_data_string_cpp += ((char *)((char *)", "));

    /* "awe_ml/classifier_cython.pyx":2684
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,2])
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,3])             # <<<<<<<<<<<<<<
 *             data_string_cpp+=<char*>"\n"
 * 
 */
    __pyx_t_123 = __pyx_v_local_tree_index;
    __pyx_t_124 = 3;
    __pyx_v_data_string_cpp += std::to_string((*__Pyx_BufPtrStrided2d(__pyx_t_6awe_ml_17classifier_cython_np_float *, __pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer.buf, __pyx_t_123, __pyx_pybuffernd_explain_by_feature.diminfo[0].strides, __pyx_t_124, __pyx_pybuffernd_explain_by_feature.diminfo[1].strides)));

    /* "awe_ml/classifier_cython.pyx":2685
 *             data_string_cpp+=<char*>", "
 *             data_string_cpp+=to_string(explain_by_feature[local_tree_index,3])
 *             data_string_cpp+=<char*>"\n"             # <<<<<<<<<<<<<<
 * 
 *         # print (data_string)
 */
    __pyx_v_data_string_cpp += ((char *)((char *)"\n"));
  }

  /* "awe_ml/classifier_cython.pyx":2689
 *         # print (data_string)
 * 
 *         if filename_prefix is not None:             # <<<<<<<<<<<<<<
 *             with open(filename_prefix+"_by_feature_shared.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))
 */
  __pyx_t_14 = (__pyx_v_filename_prefix != ((PyObject*)Py_None));
  __pyx_t_69 = (__pyx_t_14 != 0);
  if (__pyx_t_69) {

    /* "awe_ml/classifier_cython.pyx":2690
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_by_feature_shared.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
    /*with:*/ {
      __pyx_t_4 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_filename_prefix, __pyx_kp_u_by_feature_shared_csv); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
      __Pyx_INCREF(__pyx_n_u_w);
      __Pyx_GIVEREF(__pyx_n_u_w);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_w);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_76 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_exit); if (unlikely(!__pyx_t_76)) __PYX_ERR(1, 2690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_76);
      __pyx_t_81 = __Pyx_PyObject_LookupSpecial(__pyx_t_4, __pyx_n_s_enter); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2690, __pyx_L131_error)
      __Pyx_GOTREF(__pyx_t_81);
      __pyx_t_82 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_81))) {
        __pyx_t_82 = PyMethod_GET_SELF(__pyx_t_81);
        if (likely(__pyx_t_82)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_81);
          __Pyx_INCREF(__pyx_t_82);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_81, function);
        }
      }
      if (__pyx_t_82) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_81, __pyx_t_82); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2690, __pyx_L131_error)
        __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_81); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2690, __pyx_L131_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
      __pyx_t_81 = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      /*try:*/ {
        {
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __Pyx_ExceptionSave(&__pyx_t_77, &__pyx_t_78, &__pyx_t_79);
          __Pyx_XGOTREF(__pyx_t_77);
          __Pyx_XGOTREF(__pyx_t_78);
          __Pyx_XGOTREF(__pyx_t_79);
          /*try:*/ {
            __Pyx_XDECREF_SET(__pyx_v_f, __pyx_t_81);
            __pyx_t_81 = 0;

            /* "awe_ml/classifier_cython.pyx":2691
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_by_feature_shared.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 *         ### save to pandas dataframe
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2691, __pyx_L135_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_data_string_cpp, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2691, __pyx_L135_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_82 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_82 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_82)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_82);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
              }
            }
            if (!__pyx_t_82) {
              __pyx_t_81 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2691, __pyx_L135_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GOTREF(__pyx_t_81);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_4)) {
                PyObject *__pyx_temp[2] = {__pyx_t_82, __pyx_t_2};
                __pyx_t_81 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2691, __pyx_L135_error)
                __Pyx_XDECREF(__pyx_t_82); __pyx_t_82 = 0;
                __Pyx_GOTREF(__pyx_t_81);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
                PyObject *__pyx_temp[2] = {__pyx_t_82, __pyx_t_2};
                __pyx_t_81 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2691, __pyx_L135_error)
                __Pyx_XDECREF(__pyx_t_82); __pyx_t_82 = 0;
                __Pyx_GOTREF(__pyx_t_81);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              } else
              #endif
              {
                __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2691, __pyx_L135_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_GIVEREF(__pyx_t_82); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_82); __pyx_t_82 = NULL;
                __Pyx_GIVEREF(__pyx_t_2);
                PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_2);
                __pyx_t_2 = 0;
                __pyx_t_81 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2691, __pyx_L135_error)
                __Pyx_GOTREF(__pyx_t_81);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;

            /* "awe_ml/classifier_cython.pyx":2690
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_by_feature_shared.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
          }
          __Pyx_XDECREF(__pyx_t_77); __pyx_t_77 = 0;
          __Pyx_XDECREF(__pyx_t_78); __pyx_t_78 = 0;
          __Pyx_XDECREF(__pyx_t_79); __pyx_t_79 = 0;
          goto __pyx_L140_try_end;
          __pyx_L135_error:;
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_82); __pyx_t_82 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_81); __pyx_t_81 = 0;
          __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_34, 1);
          __PYX_XDEC_MEMVIEW(&__pyx_t_38, 1);
          /*except:*/ {
            __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.analyze_single_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
            if (__Pyx_GetException(&__pyx_t_81, &__pyx_t_4, &__pyx_t_1) < 0) __PYX_ERR(1, 2690, __pyx_L137_except_error)
            __Pyx_GOTREF(__pyx_t_81);
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_2 = PyTuple_Pack(3, __pyx_t_81, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2690, __pyx_L137_except_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_80 = __Pyx_PyObject_Call(__pyx_t_76, __pyx_t_2, NULL);
            __Pyx_DECREF(__pyx_t_76); __pyx_t_76 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_80)) __PYX_ERR(1, 2690, __pyx_L137_except_error)
            __Pyx_GOTREF(__pyx_t_80);
            __pyx_t_69 = __Pyx_PyObject_IsTrue(__pyx_t_80);
            __Pyx_DECREF(__pyx_t_80); __pyx_t_80 = 0;
            if (__pyx_t_69 < 0) __PYX_ERR(1, 2690, __pyx_L137_except_error)
            __pyx_t_14 = ((!(__pyx_t_69 != 0)) != 0);
            if (__pyx_t_14) {
              __Pyx_GIVEREF(__pyx_t_81);
              __Pyx_GIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_1);
              __Pyx_ErrRestoreWithState(__pyx_t_81, __pyx_t_4, __pyx_t_1);
              __pyx_t_81 = 0; __pyx_t_4 = 0; __pyx_t_1 = 0; 
              __PYX_ERR(1, 2690, __pyx_L137_except_error)
            }
            __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            goto __pyx_L136_exception_handled;
          }
          __pyx_L137_except_error:;
          __Pyx_XGIVEREF(__pyx_t_77);
          __Pyx_XGIVEREF(__pyx_t_78);
          __Pyx_XGIVEREF(__pyx_t_79);
          __Pyx_ExceptionReset(__pyx_t_77, __pyx_t_78, __pyx_t_79);
          goto __pyx_L1_error;
          __pyx_L136_exception_handled:;
          __Pyx_XGIVEREF(__pyx_t_77);
          __Pyx_XGIVEREF(__pyx_t_78);
          __Pyx_XGIVEREF(__pyx_t_79);
          __Pyx_ExceptionReset(__pyx_t_77, __pyx_t_78, __pyx_t_79);
          __pyx_L140_try_end:;
        }
      }
      /*finally:*/ {
        /*normal exit:*/{
          if (__pyx_t_76) {
            __pyx_t_79 = __Pyx_PyObject_Call(__pyx_t_76, __pyx_tuple__26, NULL);
            __Pyx_DECREF(__pyx_t_76); __pyx_t_76 = 0;
            if (unlikely(!__pyx_t_79)) __PYX_ERR(1, 2690, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_79);
            __Pyx_DECREF(__pyx_t_79); __pyx_t_79 = 0;
          }
          goto __pyx_L134;
        }
        __pyx_L134:;
      }
      goto __pyx_L144;
      __pyx_L131_error:;
      __Pyx_DECREF(__pyx_t_76); __pyx_t_76 = 0;
      goto __pyx_L1_error;
      __pyx_L144:;
    }

    /* "awe_ml/classifier_cython.pyx":2689
 *         # print (data_string)
 * 
 *         if filename_prefix is not None:             # <<<<<<<<<<<<<<
 *             with open(filename_prefix+"_by_feature_shared.csv", 'w') as f:
 *                 f.write(data_string_cpp.decode('UTF-8'))
 */
  }

  /* "awe_ml/classifier_cython.pyx":2694
 * 
 *         ### save to pandas dataframe
 *         features_df = pd.read_csv(BytesIO(data_string_cpp))             # <<<<<<<<<<<<<<
 * 
 *         return combos_df, features_df, top_of_tree_df
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_81 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_81);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_BytesIO); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_82 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_data_string_cpp); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 2694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_82); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2694, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_82};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_82};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_82);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_82);
      __pyx_t_82 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_81))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_81);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_81);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_81, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_81, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2694, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_81)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_81, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_81)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_81, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_81, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_81); __pyx_t_81 = 0;
  __pyx_v_features_df = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":2696
 *         features_df = pd.read_csv(BytesIO(data_string_cpp))
 * 
 *         return combos_df, features_df, top_of_tree_df             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_combos_df);
  __Pyx_GIVEREF(__pyx_v_combos_df);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_combos_df);
  __Pyx_INCREF(__pyx_v_features_df);
  __Pyx_GIVEREF(__pyx_v_features_df);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_features_df);
  __Pyx_INCREF(__pyx_v_top_of_tree_df);
  __Pyx_GIVEREF(__pyx_v_top_of_tree_df);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_top_of_tree_df);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "awe_ml/classifier_cython.pyx":2152
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cpdef analyze_single_probability(self,example, str filename_prefix="./results"):#None):#             # <<<<<<<<<<<<<<
 *         """
 *         Analyzes a prediction and breaks down the components that go into the prediction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_34, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_38, 1);
  __Pyx_XDECREF(__pyx_t_81);
  __Pyx_XDECREF(__pyx_t_82);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_top_level_values.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.analyze_single_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_explain_by_feature.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_top_level_values.rcbuffer->pybuffer);
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_example_2d, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_example_view, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_explainable_values, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_parental_label, 1);
  __Pyx_XDECREF(__pyx_v_inds);
  __Pyx_XDECREF(__pyx_v_rev_inds);
  __Pyx_XDECREF(__pyx_v_header);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF(__pyx_v_combos_df);
  __Pyx_XDECREF((PyObject *)__pyx_v_top_level_values);
  __Pyx_XDECREF(__pyx_v_top_of_tree_df);
  __Pyx_XDECREF((PyObject *)__pyx_v_explain_by_feature);
  __Pyx_XDECREF(__pyx_v_features_df);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_21analyze_single_probability(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_20analyze_single_probability[] = "\n        Analyzes a prediction and breaks down the components that go into the prediction\n        :param example:\n        :return:\n        ";
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_21analyze_single_probability(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_example = 0;
  PyObject *__pyx_v_filename_prefix = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("analyze_single_probability (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_example,&__pyx_n_s_filename_prefix,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_kp_u_results);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_example)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename_prefix);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "analyze_single_probability") < 0)) __PYX_ERR(1, 2152, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_example = values[0];
    __pyx_v_filename_prefix = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("analyze_single_probability", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.analyze_single_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename_prefix), (&PyUnicode_Type), 1, "filename_prefix", 1))) __PYX_ERR(1, 2152, __pyx_L1_error)
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_20analyze_single_probability(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), __pyx_v_example, __pyx_v_filename_prefix);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_20analyze_single_probability(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_example, PyObject *__pyx_v_filename_prefix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability __pyx_t_2;
  __Pyx_RefNannySetupContext("analyze_single_probability", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.filename_prefix = __pyx_v_filename_prefix;
  __pyx_t_1 = __pyx_vtabptr_6awe_ml_17classifier_cython_AWE_ML_Cython->analyze_single_probability(__pyx_v_self, __pyx_v_example, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.analyze_single_probability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":152
 *     cdef np_float ave_corr
 *     cdef list feature_names_txt
 *     cdef public object classes_  #cython error checking does not want this set before fit, but cython needs it declared.  modifed cython error checking to avoid error             # <<<<<<<<<<<<<<
 *     cdef readonly np_long n_classes,
 *     cdef string independence_model_c
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes____get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes____get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->classes_);
  __pyx_r = __pyx_v_self->classes_;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->classes_);
  __Pyx_DECREF(__pyx_v_self->classes_);
  __pyx_v_self->classes_ = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__4__del__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->classes_);
  __Pyx_DECREF(__pyx_v_self->classes_);
  __pyx_v_self->classes_ = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":153
 *     cdef list feature_names_txt
 *     cdef public object classes_  #cython error checking does not want this set before fit, but cython needs it declared.  modifed cython error checking to avoid error
 *     cdef readonly np_long n_classes,             # <<<<<<<<<<<<<<
 *     cdef string independence_model_c
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9n_classes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9n_classes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9n_classes___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9n_classes___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_classes); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.n_classes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":156
 *     cdef string independence_model_c
 * 
 *     cdef public np_long max_fully_connected_depth, n_max_classify, max_depth, n_min_to_add_leaf, features_per_node #n_jobs             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_fully_connected_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.max_fully_connected_depth.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 156, __pyx_L1_error)
  __pyx_v_self->max_fully_connected_depth = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.max_fully_connected_depth.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_max_classify); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.n_max_classify.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 156, __pyx_L1_error)
  __pyx_v_self->n_max_classify = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.n_max_classify.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->max_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.max_depth.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 156, __pyx_L1_error)
  __pyx_v_self->max_depth = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.max_depth.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->n_min_to_add_leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.n_min_to_add_leaf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 156, __pyx_L1_error)
  __pyx_v_self->n_min_to_add_leaf = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.n_min_to_add_leaf.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_self->features_per_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.features_per_node.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(1, 156, __pyx_L1_error)
  __pyx_v_self->features_per_node = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.features_per_node.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":159
 * 
 * 
 *     cdef public str node_split_model, probability_scaling_method, usefulness_model, independence_model, _estimator_type             # <<<<<<<<<<<<<<
 * 
 *     cdef public np_float node_split_fraction, noise_exponent, n_noise, noise_scale#, noise_exponent2
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->node_split_model);
  __pyx_r = __pyx_v_self->node_split_model;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 159, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->node_split_model);
  __Pyx_DECREF(__pyx_v_self->node_split_model);
  __pyx_v_self->node_split_model = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.node_split_model.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_4__del__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->node_split_model);
  __Pyx_DECREF(__pyx_v_self->node_split_model);
  __pyx_v_self->node_split_model = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->probability_scaling_method);
  __pyx_r = __pyx_v_self->probability_scaling_method;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 159, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->probability_scaling_method);
  __Pyx_DECREF(__pyx_v_self->probability_scaling_method);
  __pyx_v_self->probability_scaling_method = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.probability_scaling_method.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_4__del__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->probability_scaling_method);
  __Pyx_DECREF(__pyx_v_self->probability_scaling_method);
  __pyx_v_self->probability_scaling_method = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->usefulness_model);
  __pyx_r = __pyx_v_self->usefulness_model;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 159, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->usefulness_model);
  __Pyx_DECREF(__pyx_v_self->usefulness_model);
  __pyx_v_self->usefulness_model = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.usefulness_model.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_4__del__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->usefulness_model);
  __Pyx_DECREF(__pyx_v_self->usefulness_model);
  __pyx_v_self->usefulness_model = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->independence_model);
  __pyx_r = __pyx_v_self->independence_model;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 159, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->independence_model);
  __Pyx_DECREF(__pyx_v_self->independence_model);
  __pyx_v_self->independence_model = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.independence_model.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_4__del__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->independence_model);
  __Pyx_DECREF(__pyx_v_self->independence_model);
  __pyx_v_self->independence_model = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_estimator_type);
  __pyx_r = __pyx_v_self->_estimator_type;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(1, 159, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_estimator_type);
  __Pyx_DECREF(__pyx_v_self->_estimator_type);
  __pyx_v_self->_estimator_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython._estimator_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_4__del__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_estimator_type);
  __Pyx_DECREF(__pyx_v_self->_estimator_type);
  __pyx_v_self->_estimator_type = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":161
 *     cdef public str node_split_model, probability_scaling_method, usefulness_model, independence_model, _estimator_type
 * 
 *     cdef public np_float node_split_fraction, noise_exponent, n_noise, noise_scale#, noise_exponent2             # <<<<<<<<<<<<<<
 *     cdef public object noise_exponent2
 *     cdef np_long[:,:] X
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->node_split_fraction); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.node_split_fraction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 161, __pyx_L1_error)
  __pyx_v_self->node_split_fraction = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.node_split_fraction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->noise_exponent); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.noise_exponent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 161, __pyx_L1_error)
  __pyx_v_self->noise_exponent = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.noise_exponent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->n_noise); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.n_noise.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 161, __pyx_L1_error)
  __pyx_v_self->n_noise = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.n_noise.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->noise_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.noise_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(1, 161, __pyx_L1_error)
  __pyx_v_self->noise_scale = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("awe_ml.classifier_cython.AWE_ML_Cython.noise_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "awe_ml/classifier_cython.pyx":162
 * 
 *     cdef public np_float node_split_fraction, noise_exponent, n_noise, noise_scale#, noise_exponent2
 *     cdef public object noise_exponent2             # <<<<<<<<<<<<<<
 *     cdef np_long[:,:] X
 *     cdef np_long[:] y
 */

/* Python wrapper */
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2___get__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2___get__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->noise_exponent2);
  __pyx_r = __pyx_v_self->noise_exponent2;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_2__set__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_2__set__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->noise_exponent2);
  __Pyx_DECREF(__pyx_v_self->noise_exponent2);
  __pyx_v_self->noise_exponent2 = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_4__del__(((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_4__del__(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->noise_exponent2);
  __Pyx_DECREF(__pyx_v_self->noise_exponent2);
  __pyx_v_self->noise_exponent2 = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":225
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":228
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 229, __pyx_L1_error)

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":232
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 233, __pyx_L1_error)

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":236
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":241
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":242
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":247
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":249
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":253
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":254
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":260
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 263, __pyx_L1_error)

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 282, __pyx_L1_error)
      break;
    }

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_8 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_8 == ((char *)NULL))) __PYX_ERR(2, 289, __pyx_L1_error)
    __pyx_v_f = __pyx_t_8;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":295
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":298
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":778
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":781
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":788
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":787
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":792
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":802
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 805, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 805, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 806, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 806, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":807
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 807, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 807, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 807, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 810, __pyx_L1_error)

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 814, __pyx_L1_error)

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":812
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":832
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 834, __pyx_L1_error)

        /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":843
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 843, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 844, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 845, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":846
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 855, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 860, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":861
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":979
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":982
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":983
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":984
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":985
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":989
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":988
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":991
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":987
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":998
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 998, __pyx_L3_error)

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":999
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 999, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1000, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":997
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":996
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1004
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1004, __pyx_L3_error)

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1005
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1005, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1006, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1006, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1003
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1002
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1010
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1010, __pyx_L3_error)

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1011
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1011, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1012, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1012, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1009
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1008
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(const std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_npy_int32((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_long(const std::vector<long>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_long", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_long")
 * cdef object __pyx_convert_vector_to_py_long(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_long")
 * cdef object __pyx_convert_vector_to_py_long(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float(const std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float")
 * cdef object __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(std::pair<std::vector<long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(std::pair<std::vector<long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_vector_3c_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(const std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_float((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(const std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(const std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(const std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert__to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(const std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> ::value_type const *__pyx_v_key_value;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_npy_int32(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > ::value_type const *__pyx_v_key_value;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_npy_int32(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py___pyx_t_6awe_ml_17classifier_cython_np_long____std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float(std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float> ::value_type const *__pyx_v_key_value;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_pair_to_py___pyx_t_6awe_ml_17classifier_cython_np_long______pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(3, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_npy_int32(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_________pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_______std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(3, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_npy_int32(__pyx_v_item); if (unlikely((__pyx_t_5 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((__pyx_t_6awe_ml_17classifier_cython_np_long)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<long>  __pyx_convert_vector_from_py_long(PyObject *__pyx_v_o) {
  std::vector<long>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_long", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_long(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_v_item); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((long)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_long(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_long")
 * cdef vector[X] __pyx_convert_vector_from_py_long(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<std::vector<long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<std::vector<long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::vector<long>  __pyx_t_5;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_from_py_long(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = std::pair<std::vector<long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > (((std::vector<long> )__pyx_t_5), ((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> )__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_t_5;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > (((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> )__pyx_t_5), ((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::pair<std::vector<long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<std::vector<long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::vector<long>  __pyx_t_5;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_from_py_long(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = std::pair<std::vector<long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > (((std::vector<long> )__pyx_t_5), ((std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > )__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_std_3a__3a_vector_3c_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_float(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> >  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e___(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > >  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e___(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_float_3e____3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

static struct __pyx_t_6awe_ml_17classifier_cython_node_info_t __pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(PyObject *__pyx_v_obj) {
  struct __pyx_t_6awe_ml_17classifier_cython_node_info_t __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_6awe_ml_17classifier_cython_node_info_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_10;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", 0);

  /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, ((char const *)"Expected %.16s, got %.200s"), ((char *)"a mapping"), Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['counts_index']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['counts_index']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'counts_index'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_counts_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 17, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['counts_index']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['counts_index']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'counts_index'")
 *     result.counts_index = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(3, 18, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['counts_index']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'counts_index'")             # <<<<<<<<<<<<<<
 *     result.counts_index = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 19, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 19, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['counts_index']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'counts_index'")
 *     result.counts_index = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['parents_index_begin']
 */
  __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 20, __pyx_L1_error)
  __pyx_v_result.counts_index = __pyx_t_10;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'counts_index'")
 *     result.counts_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_begin']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.counts_index = value
 *     try:
 *         value = obj['parents_index_begin']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_parents_index_begin); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 22, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'counts_index'")
 *     result.counts_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_begin']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['parents_index_begin']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")
 *     result.parents_index_begin = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(3, 23, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['parents_index_begin']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")             # <<<<<<<<<<<<<<
 *     result.parents_index_begin = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 24, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 24, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'counts_index'")
 *     result.counts_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_begin']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")
 *     result.parents_index_begin = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['parents_index_end']
 */
  __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 25, __pyx_L1_error)
  __pyx_v_result.parents_index_begin = __pyx_t_10;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")
 *     result.parents_index_begin = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_end']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":27
 *     result.parents_index_begin = value
 *     try:
 *         value = obj['parents_index_end']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_parents_index_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 27, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")
 *     result.parents_index_begin = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_end']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":28
 *     try:
 *         value = obj['parents_index_end']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")
 *     result.parents_index_end = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(3, 28, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":29
 *         value = obj['parents_index_end']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")             # <<<<<<<<<<<<<<
 *     result.parents_index_end = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 29, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 29, __pyx_L22_except_error)
    }
    goto __pyx_L22_except_error;
    __pyx_L22_except_error:;

    /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")
 *     result.parents_index_begin = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_end']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "FromPyStructUtility":30
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")
 *     result.parents_index_end = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['updated_index']
 */
  __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 30, __pyx_L1_error)
  __pyx_v_result.parents_index_end = __pyx_t_10;

  /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")
 *     result.parents_index_end = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['updated_index']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":32
 *     result.parents_index_end = value
 *     try:
 *         value = obj['updated_index']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'updated_index'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_updated_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 32, __pyx_L28_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")
 *     result.parents_index_end = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['updated_index']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L33_try_end;
    __pyx_L28_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":33
 *     try:
 *         value = obj['updated_index']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'updated_index'")
 *     result.updated_index = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(3, 33, __pyx_L30_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":34
 *         value = obj['updated_index']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'updated_index'")             # <<<<<<<<<<<<<<
 *     result.updated_index = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 34, __pyx_L30_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 34, __pyx_L30_except_error)
    }
    goto __pyx_L30_except_error;
    __pyx_L30_except_error:;

    /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")
 *     result.parents_index_end = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['updated_index']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L33_try_end:;
  }

  /* "FromPyStructUtility":35
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'updated_index'")
 *     result.updated_index = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['size']
 */
  __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 35, __pyx_L1_error)
  __pyx_v_result.updated_index = __pyx_t_10;

  /* "FromPyStructUtility":36
 *         raise ValueError("No value specified for struct attribute 'updated_index'")
 *     result.updated_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['size']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":37
 *     result.updated_index = value
 *     try:
 *         value = obj['size']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'size'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 37, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":36
 *         raise ValueError("No value specified for struct attribute 'updated_index'")
 *     result.updated_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['size']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L41_try_end;
    __pyx_L36_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":38
 *     try:
 *         value = obj['size']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'size'")
 *     result.size = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(3, 38, __pyx_L38_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":39
 *         value = obj['size']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'size'")             # <<<<<<<<<<<<<<
 *     result.size = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 39, __pyx_L38_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 39, __pyx_L38_except_error)
    }
    goto __pyx_L38_except_error;
    __pyx_L38_except_error:;

    /* "FromPyStructUtility":36
 *         raise ValueError("No value specified for struct attribute 'updated_index'")
 *     result.updated_index = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['size']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L41_try_end:;
  }

  /* "FromPyStructUtility":40
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'size'")
 *     result.size = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['depth']
 */
  __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 40, __pyx_L1_error)
  __pyx_v_result.size = __pyx_t_10;

  /* "FromPyStructUtility":41
 *         raise ValueError("No value specified for struct attribute 'size'")
 *     result.size = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['depth']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":42
 *     result.size = value
 *     try:
 *         value = obj['depth']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'depth'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_depth); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 42, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":41
 *         raise ValueError("No value specified for struct attribute 'size'")
 *     result.size = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['depth']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L49_try_end;
    __pyx_L44_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":43
 *     try:
 *         value = obj['depth']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'depth'")
 *     result.depth = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(3, 43, __pyx_L46_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":44
 *         value = obj['depth']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'depth'")             # <<<<<<<<<<<<<<
 *     result.depth = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 44, __pyx_L46_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 44, __pyx_L46_except_error)
    }
    goto __pyx_L46_except_error;
    __pyx_L46_except_error:;

    /* "FromPyStructUtility":41
 *         raise ValueError("No value specified for struct attribute 'size'")
 *     result.size = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['depth']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L49_try_end:;
  }

  /* "FromPyStructUtility":45
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'depth'")
 *     result.depth = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['parents_index_step']
 */
  __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 45, __pyx_L1_error)
  __pyx_v_result.depth = __pyx_t_10;

  /* "FromPyStructUtility":46
 *         raise ValueError("No value specified for struct attribute 'depth'")
 *     result.depth = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_step']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":47
 *     result.depth = value
 *     try:
 *         value = obj['parents_index_step']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_step'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_parents_index_step); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 47, __pyx_L52_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":46
 *         raise ValueError("No value specified for struct attribute 'depth'")
 *     result.depth = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_step']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L57_try_end;
    __pyx_L52_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":48
 *     try:
 *         value = obj['parents_index_step']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'parents_index_step'")
 *     result.parents_index_step = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(3, 48, __pyx_L54_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":49
 *         value = obj['parents_index_step']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_step'")             # <<<<<<<<<<<<<<
 *     result.parents_index_step = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 49, __pyx_L54_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(3, 49, __pyx_L54_except_error)
    }
    goto __pyx_L54_except_error;
    __pyx_L54_except_error:;

    /* "FromPyStructUtility":46
 *         raise ValueError("No value specified for struct attribute 'depth'")
 *     result.depth = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['parents_index_step']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L57_try_end:;
  }

  /* "FromPyStructUtility":50
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_step'")
 *     result.parents_index_step = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_10 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_10 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 50, __pyx_L1_error)
  __pyx_v_result.parents_index_step = __pyx_t_10;

  /* "FromPyStructUtility":51
 *         raise ValueError("No value specified for struct attribute 'parents_index_step'")
 *     result.parents_index_step = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t")
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  __pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(PyObject *__pyx_v_o) {
  std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_t_6awe_ml_17classifier_cython_node_info_t __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert__from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t")
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_5;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_npy_int32(__pyx_v_x); if (unlikely((__pyx_t_5 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_npy_int32(__pyx_v_y); if (unlikely((__pyx_t_6 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> (((__pyx_t_6awe_ml_17classifier_cython_np_long)__pyx_t_5), ((__pyx_t_6awe_ml_17classifier_cython_np_long)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef map[X,Y] __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

static std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_d = 0;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_v_m;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_8;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_9;
  __Pyx_RefNannySetupContext("__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "map.from_py":175
 * @cname("__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef map[X,Y] __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:
 *     cdef dict d = o             # <<<<<<<<<<<<<<
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_o))||((__pyx_v_o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_o)->tp_name), 0))) __PYX_ERR(3, 175, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_o;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.from_py":177
 *     cdef dict d = o
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():             # <<<<<<<<<<<<<<
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(3, 177, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(3, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "map.from_py":178
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    __pyx_t_8 = __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 178, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyInt_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_9 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 178, __pyx_L1_error)
    __pyx_v_m.insert(std::pair<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> (((std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_8), ((__pyx_t_6awe_ml_17classifier_cython_np_long)__pyx_t_9)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "map.from_py":179
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef map[X,Y] __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("map.from_py.__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_d = 0;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_v_m;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_8;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_9;
  __Pyx_RefNannySetupContext("__pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "map.from_py":175
 * @cname("__pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:
 *     cdef dict d = o             # <<<<<<<<<<<<<<
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_o))||((__pyx_v_o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_o)->tp_name), 0))) __PYX_ERR(3, 175, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_o;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.from_py":177
 *     cdef dict d = o
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():             # <<<<<<<<<<<<<<
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(3, 177, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(3, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "map.from_py":178
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    __pyx_t_8 = __Pyx_PyInt_As_npy_int32(__pyx_v_key); if (unlikely((__pyx_t_8 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 178, __pyx_L1_error)
    __pyx_t_9 = __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 178, __pyx_L1_error)
    __pyx_v_m.insert(std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > (((__pyx_t_6awe_ml_17classifier_cython_np_long)__pyx_t_8), ((std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_9)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "map.from_py":179
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef map[X,Y] __pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("map.from_py.__pyx_convert_map_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_d = 0;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_v_m;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_8;
  __pyx_t_6awe_ml_17classifier_cython_np_float __pyx_t_9;
  __Pyx_RefNannySetupContext("__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float", 0);

  /* "map.from_py":175
 * @cname("__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float")
 * cdef map[X,Y] __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float(object o) except *:
 *     cdef dict d = o             # <<<<<<<<<<<<<<
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_o))||((__pyx_v_o) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_o)->tp_name), 0))) __PYX_ERR(3, 175, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_o;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.from_py":177
 *     cdef dict d = o
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():             # <<<<<<<<<<<<<<
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_d == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "iteritems");
    __PYX_ERR(3, 177, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_d, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(3, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "map.from_py":178
 *     cdef map[X,Y] m
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))             # <<<<<<<<<<<<<<
 *     return m
 * 
 */
    __pyx_t_8 = __pyx_convert_pair_from_py___pyx_t_6awe_ml_17classifier_cython_np_long__and___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 178, __pyx_L1_error)
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_9 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(3, 178, __pyx_L1_error)
    __pyx_v_m.insert(std::pair<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float> (((std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_8), ((__pyx_t_6awe_ml_17classifier_cython_np_float)__pyx_t_9)));
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "map.from_py":179
 *     for key, value in d.iteritems():
 *         m.insert(pair[X,Y](<X>key, <Y>value))
 *     return m             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_m;
  goto __pyx_L0;

  /* "map.from_py":174
 * 
 * @cname("__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float")
 * cdef map[X,Y] __pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef dict d = o
 *     cdef map[X,Y] m
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("map.from_py.__pyx_convert_map_from_py_std_3a__3a_pair_3c___pyx_t_6awe_ml_17classifier_cython_np_long_2c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_float", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_5;
  __pyx_t_6awe_ml_17classifier_cython_np_long __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_npy_int32(__pyx_v_y); if (unlikely((__pyx_t_6 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> (((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_5), ((__pyx_t_6awe_ml_17classifier_cython_np_long)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and___pyx_t_6awe_ml_17classifier_cython_np_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_5;
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > (((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_5), ((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  __pyx_t_5;
  std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(3, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_convert_vector_from_py___pyx_t_6awe_ml_17classifier_cython_np_long(__pyx_v_x); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e___(__pyx_v_y); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_r = std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > (((std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> )__pyx_t_5), ((std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > )__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e_____and_std_3a__3a_pair_3c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____2c_std_3a__3a_vector_3c___pyx_t_6awe_ml_17classifier_cython_np_long_3e____3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":121
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(3, 121, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(3, 121, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 121, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 121, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 122, __pyx_L3_error)
    } else {

      /* "View.MemoryView":122
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 121, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(3, 121, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(3, 121, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":121
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":128
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(3, 128, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(3, 128, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":129
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":131
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":132
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 132, __pyx_L1_error)

    /* "View.MemoryView":131
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":134
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":135
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 135, __pyx_L1_error)

    /* "View.MemoryView":134
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":137
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":138
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":137
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":139
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(3, 139, __pyx_L1_error)
  __pyx_t_5 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":140
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(3, 140, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(3, 140, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_6;

  /* "View.MemoryView":143
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":144
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":146
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":147
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 147, __pyx_L1_error)

    /* "View.MemoryView":146
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":150
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(3, 150, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_dim = __pyx_t_8;
    __pyx_v_idx = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":151
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":152
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_9);
      __pyx_t_3 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(3, 152, __pyx_L1_error)

      /* "View.MemoryView":151
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":153
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":150
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "View.MemoryView":156
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(3, 156, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":157
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":158
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":156
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":159
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(3, 159, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":160
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":161
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":159
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":163
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(3, 163, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":165
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":168
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":169
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 169, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":170
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":173
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":174
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":175
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(3, 175, __pyx_L1_error)

      /* "View.MemoryView":174
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":177
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":178
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":179
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(3, 179, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(3, 179, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_self->len / __pyx_v_itemsize);
      __pyx_t_8 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_8; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":180
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":181
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":177
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":170
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":121
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":184
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":185
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":186
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 186, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":187
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":186
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":188
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 188, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":189
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":188
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":190
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":191
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 191, __pyx_L1_error)

    /* "View.MemoryView":190
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":192
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":193
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":194
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":195
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":196
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":198
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":199
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":201
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":202
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":201
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":204
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":206
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":184
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":210
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":211
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":212
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":211
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":213
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":215
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":214
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":217
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":213
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":218
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":210
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":221
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":222
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":221
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":225
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":226
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":227
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":225
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":229
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":230
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":229
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":232
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":233
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":232
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":235
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":236
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":235
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":238
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":239
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(3, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":238
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":243
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":247
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":248
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":247
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":250
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":251
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(3, 251, __pyx_L1_error)

    /* "View.MemoryView":250
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":254
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":243
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":280
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(3, 280, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":281
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":280
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":282
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":283
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":282
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self.name,)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":5
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":11
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self.name,)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(3, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":297
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":299
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":303
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":305
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":306
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":305
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":308
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":297
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":344
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(3, 344, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 344, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 344, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 344, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 344, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":345
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":346
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":347
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":348
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 348, __pyx_L1_error)

    /* "View.MemoryView":349
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":350
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":351
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":349
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":347
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":354
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":355
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":356
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":354
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":357
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":358
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":359
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":360
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(3, 360, __pyx_L1_error)

      /* "View.MemoryView":359
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":357
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":362
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":363
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":362
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":365
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":367
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":369
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":344
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":371
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":372
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":373
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":372
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  }

  /* "View.MemoryView":377
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":378
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":379
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":380
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":381
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":383
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":382
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":381
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":384
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":379
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":386
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":377
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":371
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":388
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":390
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":392
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 392, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 392, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 392, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 392, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":393
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 393, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(3, 393, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":392
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":395
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":388
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":398
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":399
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":400
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":399
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":402
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 402, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(3, 402, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":405
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 405, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":406
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":405
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":408
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(3, 408, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":409
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":398
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":411
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":412
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":413
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 413, __pyx_L1_error)

    /* "View.MemoryView":412
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":415
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(3, 415, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(3, 415, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":417
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 417, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":418
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":419
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 419, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":420
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":419
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":422
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(3, 422, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 422, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":417
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":424
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":411
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":426
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":427
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":428
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":429
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int((__pyx_v_self->flags | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 429, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":430
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 430, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":429
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 429, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 429, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":428
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "View.MemoryView":431
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(3, 431, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":432
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":428
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":427
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags|PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":434
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":426
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":436
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":440
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(3, 440, __pyx_L1_error)

  /* "View.MemoryView":441
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(3, 441, __pyx_L1_error)

  /* "View.MemoryView":442
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":440
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 440, __pyx_L1_error)

  /* "View.MemoryView":436
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":444
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":446
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":451
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":453
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":454
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":455
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":456
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(3, 456, __pyx_L1_error)

      /* "View.MemoryView":455
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":457
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":453
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":459
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":461
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":462
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":463
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":462
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":465
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 465, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":469
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":470
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "View.MemoryView":469
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":471
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":474
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":444
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":476
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":477
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(3, 477, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":478
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":476
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":480
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":483
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":486
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":487
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":488
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 488, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 488, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 488, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 488, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 488, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 488, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":487
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":492
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":493
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 493, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":492
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":494
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "View.MemoryView":489
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 489, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(3, 489, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":490
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 490, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(3, 490, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":487
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":480
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":496
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":499
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":504
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":505
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 505, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(3, 505, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":504
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":507
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 507, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 507, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(3, 507, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":509
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(3, 509, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":510
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":509
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":510
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":496
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":513
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":514
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":515
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 515, __pyx_L1_error)

    /* "View.MemoryView":514
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":517
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":518
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":517
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":520
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":522
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":522
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":525
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":527
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":530
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":532
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":532
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":535
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":537
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":538
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":539
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":540
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":541
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":542
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":513
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":548
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":549
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(3, 549, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":550
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(3, 550, __pyx_L1_error)

  /* "View.MemoryView":551
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":548
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":554
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":555
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":554
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":558
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":559
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":558
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":562
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":563
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":565
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 565, __pyx_L1_error)

    /* "View.MemoryView":563
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":567
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(3, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":562
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":570
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":571
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":572
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__55, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":571
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":574
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(3, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":570
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":577
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":578
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":577
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":581
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":582
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":581
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":585
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":586
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":585
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":589
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":590
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":591
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":593
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 593, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":594
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":596
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":590
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":598
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":589
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":600
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":601
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":602
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":601
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":604
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":600
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":606
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":607
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":608
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":607
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":606
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":610
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":611
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":610
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":614
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":617
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":618
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":614
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":620
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":624
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":620
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":626
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":628
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":630
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":631
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 631, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":636
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":626
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":638
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":640
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":642
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":643
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 643, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":648
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":638
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":652
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":653
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":654
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":655
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":652
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":658
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":659
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":658
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":661
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":666
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":667
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":666
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":669
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":671
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":672
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":673
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":674
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 674, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(3, 674, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 674, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(3, 674, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 674, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 674, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":675
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":676
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":677
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(3, 677, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__58);
            __Pyx_GIVEREF(__pyx_slice__58);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__58);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(3, 677, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":678
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":676
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":680
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__59); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(3, 680, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":681
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":675
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":683
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":684
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(3, 684, __pyx_L1_error)

        /* "View.MemoryView":683
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":686
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":687
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(3, 687, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":674
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":689
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(3, 689, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":690
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":691
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__60);
        __Pyx_GIVEREF(__pyx_slice__60);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__60);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(3, 691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":690
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":693
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":661
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":695
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":696
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":697
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":698
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(3, 698, __pyx_L1_error)

      /* "View.MemoryView":697
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":695
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":705
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":706
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":713
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":717
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(3, 717, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":719
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":720
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(3, 720, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":721
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":719
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":723
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":724
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":730
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":731
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":736
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":737
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":741
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 741, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(3, 741, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(3, 741, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 741, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 741, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":742
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":746
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 746, __pyx_L1_error)

      /* "View.MemoryView":743
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(3, 743, __pyx_L1_error)

      /* "View.MemoryView":742
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":749
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":750
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":751
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":752
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":753
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":749
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":755
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 755, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 755, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 755, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":756
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 756, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 756, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":757
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 757, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 757, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":759
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 759, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":760
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":761
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":763
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(3, 763, __pyx_L1_error)

      /* "View.MemoryView":769
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":741
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":771
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":772
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":773
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(3, 773, __pyx_L1_error) }

    /* "View.MemoryView":774
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(3, 774, __pyx_L1_error) }

    /* "View.MemoryView":772
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(3, 772, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":771
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":777
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":777
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(3, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":705
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":802
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":822
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":824
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":825
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":824
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":826
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":827
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(3, 827, __pyx_L1_error)

      /* "View.MemoryView":826
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":822
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":830
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":832
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":833
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(3, 833, __pyx_L1_error)

      /* "View.MemoryView":832
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":836
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":837
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":838
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":839
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":840
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":839
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":837
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":841
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":842
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":843
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":842
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":845
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":841
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":836
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":847
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":848
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":847
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":850
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":852
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":853
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":854
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":855
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":856
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":855
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":853
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":857
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":858
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":857
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":852
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":860
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":861
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":860
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":863
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":865
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":866
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":865
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":870
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":872
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":873
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":872
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":875
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":876
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":875
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":879
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":880
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":881
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":884
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":885
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":884
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":887
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":889
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":891
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":892
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":891
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":894
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":895
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(3, 894, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":890
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":897
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":889
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":899
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":802
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":905
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":907
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":908
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":911
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":912
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(3, 912, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(3, 912, __pyx_L1_error)
    }
    __pyx_v_shape = (__pyx_v_view->len / __pyx_v_itemsize);

    /* "View.MemoryView":913
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":911
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":915
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":916
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":917
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":918
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":917
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":920
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":921
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":922
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":923
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(3, 923, __pyx_L1_error)

      /* "View.MemoryView":922
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":920
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":925
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":926
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 926, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 926, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 926, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 926, __pyx_L1_error)

    /* "View.MemoryView":925
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":928
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":929
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":930
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":929
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":932
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":905
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":938
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;

  /* "View.MemoryView":939
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":941
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":942
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":946
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = (__pyx_v_ndim / 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":947
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":948
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":949
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":951
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":952
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(3, 952, __pyx_L1_error)

      /* "View.MemoryView":951
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":954
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":938
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":971
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":972
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":971
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":974
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":975
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":976
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":975
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":978
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":974
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":980
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":981
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":982
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(3, 982, __pyx_L1_error)

    /* "View.MemoryView":981
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":984
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":980
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":987
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":988
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":987
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":994
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1002
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1003
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1002
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1008
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1010
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1011
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1013
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1014
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1016
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1017
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1018
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1019
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1020
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1022
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1023
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1022
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1025
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1027
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1028
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1031
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1032
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1033
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1034
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1035
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1033
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1037
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1038
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1038, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1039
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 1039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 1039, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1041
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1042
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1044
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":994
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1047
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1050
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1051
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(3, 1051, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1052
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1050
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1054
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1055
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1047
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1058
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1062
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1063
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1064
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1066
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1067
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1069
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1070
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1071
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1072
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1058
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1075
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1078
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1079
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1075
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1089
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1090
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1091
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1089
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1093
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1094
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1096
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1098
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1104
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1105
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1106
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1105
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1108
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1104
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1111
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1116
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1117
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1119
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1120
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1121
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1122
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1120
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1124
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1130
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1129
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1132
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1111
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1135
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1142
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1143
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1144
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1145
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1147
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1148
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1149
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1148
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1150
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1148
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1152
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1153
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1154
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1155
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1147
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1157
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1158
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1162
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1163
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1135
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1165
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1168
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1165
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1172
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1175
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1177
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1178
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1180
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1172
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1183
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1192
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1193
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1194
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1195
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1192
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1197
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1198
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1201
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1183
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1204
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;

  /* "View.MemoryView":1215
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1216
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1218
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1219
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1220
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(3, 1220, __pyx_L1_error)

    /* "View.MemoryView":1219
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1223
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1224
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1225
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1226
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1227
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1229
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1233
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1235
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1238
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1240
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1242
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1204
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1247
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1250
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1249
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(3, 1249, __pyx_L1_error)

  /* "View.MemoryView":1247
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1254
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1254, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1254, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(3, 1254, __pyx_L1_error)

  /* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1259
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1259, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1259, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1259, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 1259, __pyx_L1_error)

    /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1261
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(3, 1261, __pyx_L1_error)
  }

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1264
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;

  /* "View.MemoryView":1272
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1273
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1275
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1276
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1277
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1280
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1281
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1280
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1282
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1283
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1282
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1285
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1287
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1288
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1289
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1290
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1291
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1289
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1293
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(3, 1293, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1288
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1295
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1296
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(3, 1296, __pyx_L1_error)

      /* "View.MemoryView":1295
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1298
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1300
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1301
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1300
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1303
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(3, 1303, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1304
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1298
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1306
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1309
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1310
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1309
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1311
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1312
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1311
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1314
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1317
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1318
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1319
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1320
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1314
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1306
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1322
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1325
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(3, 1325, __pyx_L1_error)

    /* "View.MemoryView":1326
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(3, 1326, __pyx_L1_error)

    /* "View.MemoryView":1322
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1328
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1329
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1330
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1332
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1333
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1264
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1336
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1340
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1342
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1343
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1344
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1345
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1347
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1348
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1349
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1350
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1336
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1358
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1362
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1363
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1362
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1358
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1367
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1370
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1367
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1377
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1378
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1379
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1380
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1379
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1382
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1378
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1384
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1385
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1387
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1393
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1396
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1397
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1399
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1393
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1403
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1407
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1408
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1410
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1411
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1412
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1413
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1410
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1415
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1418
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1403
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(3, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(3, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(3, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(3, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(3, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(3, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":11
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(3, 11, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 11, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 11, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":12
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(3, 12, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 12, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":11
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6awe_ml_17classifier_cython_AWE_ML_Cython __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython;

static PyObject *__pyx_tp_new_6awe_ml_17classifier_cython_AWE_ML_Cython(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)o);
  p->__pyx_vtab = __pyx_vtabptr_6awe_ml_17classifier_cython_AWE_ML_Cython;
  new((void*)&(p->independence_model_c)) std::string();
  new((void*)&(p->n_feature_categories_)) std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ();
  new((void*)&(p->classification_values_list)) std::vector<ClassificationValues<__pyx_t_6awe_ml_17classifier_cython_np_float> > ();
  new((void*)&(p->full_tree_vector)) std::vector<FullTreeData<__pyx_t_6awe_ml_17classifier_cython_np_float,__pyx_t_6awe_ml_17classifier_cython_np_long> > ();
  new((void*)&(p->full_tree_indicies_list)) std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > ();
  new((void*)&(p->full_tree_to_local_tree_lookup_list)) std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > ();
  new((void*)&(p->local_weight_tree)) std::vector<std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_float> > > > ();
  new((void*)&(p->node_info)) std::vector<struct __pyx_t_6awe_ml_17classifier_cython_node_info_t> ();
  new((void*)&(p->children_list)) std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > ();
  new((void*)&(p->feature_pair_to_comb_feat_ind)) std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> ();
  new((void*)&(p->comb_feat_ind_to_feature_pair)) std::map<__pyx_t_6awe_ml_17classifier_cython_np_long,std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> > ();
  new((void*)&(p->correlation_map)) std::map<std::pair<__pyx_t_6awe_ml_17classifier_cython_np_long,__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_float> ();
  new((void*)&(p->node_label_to_index_dict_list)) std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,__pyx_t_6awe_ml_17classifier_cython_np_long> > ();
  new((void*)&(p->nodes)) std::vector<std::map<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::pair<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> ,std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > > > ();
  p->feature_names_txt = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->classes_ = Py_None; Py_INCREF(Py_None);
  p->node_split_model = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->probability_scaling_method = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->usefulness_model = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->independence_model = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_estimator_type = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->noise_exponent2 = Py_None; Py_INCREF(Py_None);
  p->categorical_feature_inds = Py_None; Py_INCREF(Py_None);
  p->binning_method = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->categorical_bin_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->numeric_bin_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->noise_exponent_obj = Py_None; Py_INCREF(Py_None);
  p->node_split_fraction_obj = Py_None; Py_INCREF(Py_None);
  p->n_noise_obj = Py_None; Py_INCREF(Py_None);
  p->X.data = NULL;
  p->X.memview = NULL;
  p->y.data = NULL;
  p->y.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc_6awe_ml_17classifier_cython_AWE_ML_Cython(PyObject *o) {
  struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *p = (struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->independence_model_c);
  __Pyx_call_destructor(p->n_feature_categories_);
  __Pyx_call_destructor(p->classification_values_list);
  __Pyx_call_destructor(p->full_tree_vector);
  __Pyx_call_destructor(p->full_tree_indicies_list);
  __Pyx_call_destructor(p->full_tree_to_local_tree_lookup_list);
  __Pyx_call_destructor(p->local_weight_tree);
  __Pyx_call_destructor(p->node_info);
  __Pyx_call_destructor(p->children_list);
  __Pyx_call_destructor(p->feature_pair_to_comb_feat_ind);
  __Pyx_call_destructor(p->comb_feat_ind_to_feature_pair);
  __Pyx_call_destructor(p->correlation_map);
  __Pyx_call_destructor(p->node_label_to_index_dict_list);
  __Pyx_call_destructor(p->nodes);
  Py_CLEAR(p->feature_names_txt);
  Py_CLEAR(p->classes_);
  Py_CLEAR(p->node_split_model);
  Py_CLEAR(p->probability_scaling_method);
  Py_CLEAR(p->usefulness_model);
  Py_CLEAR(p->independence_model);
  Py_CLEAR(p->_estimator_type);
  Py_CLEAR(p->noise_exponent2);
  Py_CLEAR(p->categorical_feature_inds);
  Py_CLEAR(p->binning_method);
  Py_CLEAR(p->categorical_bin_list);
  Py_CLEAR(p->numeric_bin_list);
  Py_CLEAR(p->noise_exponent_obj);
  Py_CLEAR(p->node_split_fraction_obj);
  Py_CLEAR(p->n_noise_obj);
  __PYX_XDEC_MEMVIEW(&p->X, 1);
  __PYX_XDEC_MEMVIEW(&p->y, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6awe_ml_17classifier_cython_AWE_ML_Cython(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *p = (struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)o;
  if (p->feature_names_txt) {
    e = (*v)(p->feature_names_txt, a); if (e) return e;
  }
  if (p->classes_) {
    e = (*v)(p->classes_, a); if (e) return e;
  }
  if (p->noise_exponent2) {
    e = (*v)(p->noise_exponent2, a); if (e) return e;
  }
  if (p->categorical_feature_inds) {
    e = (*v)(p->categorical_feature_inds, a); if (e) return e;
  }
  if (p->categorical_bin_list) {
    e = (*v)(p->categorical_bin_list, a); if (e) return e;
  }
  if (p->numeric_bin_list) {
    e = (*v)(p->numeric_bin_list, a); if (e) return e;
  }
  if (p->noise_exponent_obj) {
    e = (*v)(p->noise_exponent_obj, a); if (e) return e;
  }
  if (p->node_split_fraction_obj) {
    e = (*v)(p->node_split_fraction_obj, a); if (e) return e;
  }
  if (p->n_noise_obj) {
    e = (*v)(p->n_noise_obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6awe_ml_17classifier_cython_AWE_ML_Cython(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *p = (struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *)o;
  tmp = ((PyObject*)p->feature_names_txt);
  p->feature_names_txt = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->classes_);
  p->classes_ = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->noise_exponent2);
  p->noise_exponent2 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->categorical_feature_inds);
  p->categorical_feature_inds = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->categorical_bin_list);
  p->categorical_bin_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->numeric_bin_list);
  p->numeric_bin_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->noise_exponent_obj);
  p->noise_exponent_obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->node_split_fraction_obj);
  p->node_split_fraction_obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->n_noise_obj);
  p->n_noise_obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_classes_(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_classes_(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__3__set__(o, v);
  }
  else {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_8classes__5__del__(o);
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_classes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9n_classes_1__get__(o);
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_fully_connected_depth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_fully_connected_depth(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_25max_fully_connected_depth_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_max_classify(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_max_classify(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14n_max_classify_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_depth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_depth(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9max_depth_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_min_to_add_leaf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_min_to_add_leaf(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17n_min_to_add_leaf_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_features_per_node(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_features_per_node(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17features_per_node_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_3__set__(o, v);
  }
  else {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16node_split_model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_probability_scaling_method(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_probability_scaling_method(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_3__set__(o, v);
  }
  else {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_26probability_scaling_method_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_usefulness_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_usefulness_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_3__set__(o, v);
  }
  else {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_16usefulness_model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_independence_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_independence_model(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_3__set__(o, v);
  }
  else {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_18independence_model_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython__estimator_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython__estimator_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_3__set__(o, v);
  }
  else {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15_estimator_type_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_fraction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_fraction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19node_split_fraction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_14noise_exponent_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_noise(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_noise(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7n_noise_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11noise_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_1__get__(o);
}

static int __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_3__set__(o, v);
  }
  else {
    return __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15noise_exponent2_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_6awe_ml_17classifier_cython_AWE_ML_Cython[] = {
  {"__getstate__", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_3__getstate__, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_5__setstate__, METH_O, 0},
  {"get_params", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_7get_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_params", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_9set_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"fit", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_11fit, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_10fit},
  {"predict", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_13predict, METH_O, __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_12predict},
  {"classify", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_15classify, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_14classify},
  {"predict_proba", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_17predict_proba, METH_O, __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_16predict_proba},
  {"find_probability", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_19find_probability, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_18find_probability},
  {"analyze_single_probability", (PyCFunction)__pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_21analyze_single_probability, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython_20analyze_single_probability},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6awe_ml_17classifier_cython_AWE_ML_Cython[] = {
  {(char *)"classes_", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_classes_, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_classes_, (char *)0, 0},
  {(char *)"n_classes", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_classes, 0, (char *)0, 0},
  {(char *)"max_fully_connected_depth", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_fully_connected_depth, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_fully_connected_depth, (char *)0, 0},
  {(char *)"n_max_classify", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_max_classify, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_max_classify, (char *)0, 0},
  {(char *)"max_depth", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_depth, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_max_depth, (char *)0, 0},
  {(char *)"n_min_to_add_leaf", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_min_to_add_leaf, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_min_to_add_leaf, (char *)0, 0},
  {(char *)"features_per_node", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_features_per_node, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_features_per_node, (char *)0, 0},
  {(char *)"node_split_model", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_model, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_model, (char *)0, 0},
  {(char *)"probability_scaling_method", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_probability_scaling_method, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_probability_scaling_method, (char *)0, 0},
  {(char *)"usefulness_model", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_usefulness_model, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_usefulness_model, (char *)0, 0},
  {(char *)"independence_model", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_independence_model, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_independence_model, (char *)0, 0},
  {(char *)"_estimator_type", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython__estimator_type, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython__estimator_type, (char *)0, 0},
  {(char *)"node_split_fraction", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_fraction, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_node_split_fraction, (char *)0, 0},
  {(char *)"noise_exponent", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent, (char *)0, 0},
  {(char *)"n_noise", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_noise, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_n_noise, (char *)0, 0},
  {(char *)"noise_scale", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_scale, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_scale, (char *)0, 0},
  {(char *)"noise_exponent2", __pyx_getprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent2, __pyx_setprop_6awe_ml_17classifier_cython_13AWE_ML_Cython_noise_exponent2, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython = {
  PyVarObject_HEAD_INIT(0, 0)
  "awe_ml.classifier_cython.AWE_ML_Cython", /*tp_name*/
  sizeof(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6awe_ml_17classifier_cython_AWE_ML_Cython, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6awe_ml_17classifier_cython_AWE_ML_Cython, /*tp_traverse*/
  __pyx_tp_clear_6awe_ml_17classifier_cython_AWE_ML_Cython, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6awe_ml_17classifier_cython_AWE_ML_Cython, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6awe_ml_17classifier_cython_AWE_ML_Cython, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6awe_ml_17classifier_cython_13AWE_ML_Cython_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6awe_ml_17classifier_cython_AWE_ML_Cython, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "awe_ml.classifier_cython.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "awe_ml.classifier_cython.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "awe_ml.classifier_cython.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "awe_ml.classifier_cython._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_classifier_cython(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_classifier_cython},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "classifier_cython",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_0_4g_1_4g, __pyx_k_0_4g_1_4g, sizeof(__pyx_k_0_4g_1_4g), 0, 1, 0, 0},
  {&__pyx_kp_u_0_4g_1_4g_2, __pyx_k_0_4g_1_4g_2, sizeof(__pyx_k_0_4g_1_4g_2), 0, 1, 0, 0},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_BytesIO, __pyx_k_BytesIO, sizeof(__pyx_k_BytesIO), 0, 0, 1, 1},
  {&__pyx_n_u_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 1, 0, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_u_Can_only_use_independence_models, __pyx_k_Can_only_use_independence_models, sizeof(__pyx_k_Can_only_use_independence_models), 0, 1, 0, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_kp_u_Cannot_set_parameter_no_such_par, __pyx_k_Cannot_set_parameter_no_such_par, sizeof(__pyx_k_Cannot_set_parameter_no_such_par), 0, 1, 0, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_u_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 1, 0, 1},
  {&__pyx_kp_u_FX, __pyx_k_FX, sizeof(__pyx_k_FX), 0, 1, 0, 0},
  {&__pyx_n_u_F_2, __pyx_k_F_2, sizeof(__pyx_k_F_2), 0, 1, 0, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_u_Input_does_not_have_correct_numb, __pyx_k_Input_does_not_have_correct_numb, sizeof(__pyx_k_Input_does_not_have_correct_numb), 0, 1, 0, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_NP_FLOAT, __pyx_k_NP_FLOAT, sizeof(__pyx_k_NP_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_NP_LONG, __pyx_k_NP_LONG, sizeof(__pyx_k_NP_LONG), 0, 0, 1, 1},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_3, __pyx_k_No_value_specified_for_struct_at_3, sizeof(__pyx_k_No_value_specified_for_struct_at_3), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_4, __pyx_k_No_value_specified_for_struct_at_4, sizeof(__pyx_k_No_value_specified_for_struct_at_4), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_5, __pyx_k_No_value_specified_for_struct_at_5, sizeof(__pyx_k_No_value_specified_for_struct_at_5), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_6, __pyx_k_No_value_specified_for_struct_at_6, sizeof(__pyx_k_No_value_specified_for_struct_at_6), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_7, __pyx_k_No_value_specified_for_struct_at_7, sizeof(__pyx_k_No_value_specified_for_struct_at_7), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_u_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 1, 0, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_u_This_should_be_0, __pyx_k_This_should_be_0, sizeof(__pyx_k_This_should_be_0), 0, 1, 0, 0},
  {&__pyx_kp_u_This_should_be_1, __pyx_k_This_should_be_1, sizeof(__pyx_k_This_should_be_1), 0, 1, 0, 0},
  {&__pyx_kp_u_This_should_be_1_2, __pyx_k_This_should_be_1_2, sizeof(__pyx_k_This_should_be_1_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Trying_to_predict_without_callin, __pyx_k_Trying_to_predict_without_callin, sizeof(__pyx_k_Trying_to_predict_without_callin), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_kp_u_Unknown_Scaling_Model, __pyx_k_Unknown_Scaling_Model, sizeof(__pyx_k_Unknown_Scaling_Model), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_Usefulness_Model, __pyx_k_Unknown_Usefulness_Model, sizeof(__pyx_k_Unknown_Usefulness_Model), 0, 1, 0, 0},
  {&__pyx_kp_u_Unkown_node_split_model, __pyx_k_Unkown_node_split_model, sizeof(__pyx_k_Unkown_node_split_model), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_kp_u_W_C, __pyx_k_W_C, sizeof(__pyx_k_W_C), 0, 1, 0, 0},
  {&__pyx_n_u_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 1, 0, 1},
  {&__pyx_n_s_X_in, __pyx_k_X_in, sizeof(__pyx_k_X_in), 0, 0, 1, 1},
  {&__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
  {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 1, 0, 0},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_amax, __pyx_k_amax, sizeof(__pyx_k_amax), 0, 0, 1, 1},
  {&__pyx_n_s_analyze_single_probability, __pyx_k_analyze_single_probability, sizeof(__pyx_k_analyze_single_probability), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_argmax, __pyx_k_argmax, sizeof(__pyx_k_argmax), 0, 0, 1, 1},
  {&__pyx_n_s_argsort, __pyx_k_argsort, sizeof(__pyx_k_argsort), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_astype, __pyx_k_astype, sizeof(__pyx_k_astype), 0, 0, 1, 1},
  {&__pyx_n_u_ave_corr, __pyx_k_ave_corr, sizeof(__pyx_k_ave_corr), 0, 1, 0, 1},
  {&__pyx_kp_u_average_correlation, __pyx_k_average_correlation, sizeof(__pyx_k_average_correlation), 0, 1, 0, 0},
  {&__pyx_kp_u_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 1, 0, 0},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_kp_u_bin_0, __pyx_k_bin_0, sizeof(__pyx_k_bin_0), 0, 1, 0, 0},
  {&__pyx_n_s_binning_method, __pyx_k_binning_method, sizeof(__pyx_k_binning_method), 0, 0, 1, 1},
  {&__pyx_n_u_binning_method, __pyx_k_binning_method, sizeof(__pyx_k_binning_method), 0, 1, 0, 1},
  {&__pyx_kp_u_by_feature_shared_csv, __pyx_k_by_feature_shared_csv, sizeof(__pyx_k_by_feature_shared_csv), 0, 1, 0, 0},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_categorical_bin_list, __pyx_k_categorical_bin_list, sizeof(__pyx_k_categorical_bin_list), 0, 0, 1, 1},
  {&__pyx_n_u_categorical_bin_list, __pyx_k_categorical_bin_list, sizeof(__pyx_k_categorical_bin_list), 0, 1, 0, 1},
  {&__pyx_n_s_categorical_feature_inds, __pyx_k_categorical_feature_inds, sizeof(__pyx_k_categorical_feature_inds), 0, 0, 1, 1},
  {&__pyx_n_u_categorical_feature_inds, __pyx_k_categorical_feature_inds, sizeof(__pyx_k_categorical_feature_inds), 0, 1, 0, 1},
  {&__pyx_n_s_check_X_y, __pyx_k_check_X_y, sizeof(__pyx_k_check_X_y), 0, 0, 1, 1},
  {&__pyx_n_s_check_array, __pyx_k_check_array, sizeof(__pyx_k_check_array), 0, 0, 1, 1},
  {&__pyx_n_u_children_list, __pyx_k_children_list, sizeof(__pyx_k_children_list), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_u_classes, __pyx_k_classes, sizeof(__pyx_k_classes), 0, 1, 0, 1},
  {&__pyx_n_u_classification_values_list, __pyx_k_classification_values_list, sizeof(__pyx_k_classification_values_list), 0, 1, 0, 1},
  {&__pyx_n_u_classifier, __pyx_k_classifier, sizeof(__pyx_k_classifier), 0, 1, 0, 1},
  {&__pyx_n_s_classify, __pyx_k_classify, sizeof(__pyx_k_classify), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_u_comb_feat_ind_to_feature_pair, __pyx_k_comb_feat_ind_to_feature_pair, sizeof(__pyx_k_comb_feat_ind_to_feature_pair), 0, 1, 0, 1},
  {&__pyx_kp_u_combos_csv, __pyx_k_combos_csv, sizeof(__pyx_k_combos_csv), 0, 1, 0, 0},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_kp_u_correlation, __pyx_k_correlation, sizeof(__pyx_k_correlation), 0, 1, 0, 0},
  {&__pyx_n_u_correlation_map, __pyx_k_correlation_map, sizeof(__pyx_k_correlation_map), 0, 1, 0, 1},
  {&__pyx_n_s_counts_index, __pyx_k_counts_index, sizeof(__pyx_k_counts_index), 0, 0, 1, 1},
  {&__pyx_n_s_deep, __pyx_k_deep, sizeof(__pyx_k_deep), 0, 0, 1, 1},
  {&__pyx_n_s_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_example, __pyx_k_example, sizeof(__pyx_k_example), 0, 0, 1, 1},
  {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
  {&__pyx_kp_u_f1, __pyx_k_f1, sizeof(__pyx_k_f1), 0, 1, 0, 0},
  {&__pyx_kp_u_f1_comb, __pyx_k_f1_comb, sizeof(__pyx_k_f1_comb), 0, 1, 0, 0},
  {&__pyx_kp_u_f2, __pyx_k_f2, sizeof(__pyx_k_f2), 0, 1, 0, 0},
  {&__pyx_kp_u_f2_comb, __pyx_k_f2_comb, sizeof(__pyx_k_f2_comb), 0, 1, 0, 0},
  {&__pyx_kp_u_feature_feature_name_dimension_d, __pyx_k_feature_feature_name_dimension_d, sizeof(__pyx_k_feature_feature_name_dimension_d), 0, 1, 0, 0},
  {&__pyx_n_s_feature_names_txt, __pyx_k_feature_names_txt, sizeof(__pyx_k_feature_names_txt), 0, 0, 1, 1},
  {&__pyx_n_u_feature_names_txt, __pyx_k_feature_names_txt, sizeof(__pyx_k_feature_names_txt), 0, 1, 0, 1},
  {&__pyx_n_u_feature_pair_to_comb_feat_ind, __pyx_k_feature_pair_to_comb_feat_ind, sizeof(__pyx_k_feature_pair_to_comb_feat_ind), 0, 1, 0, 1},
  {&__pyx_kp_b_feature_weighted_probability_ori, __pyx_k_feature_weighted_probability_ori, sizeof(__pyx_k_feature_weighted_probability_ori), 0, 0, 0, 0},
  {&__pyx_n_s_features_per_node, __pyx_k_features_per_node, sizeof(__pyx_k_features_per_node), 0, 0, 1, 1},
  {&__pyx_n_u_features_per_node, __pyx_k_features_per_node, sizeof(__pyx_k_features_per_node), 0, 1, 0, 1},
  {&__pyx_n_s_filename_prefix, __pyx_k_filename_prefix, sizeof(__pyx_k_filename_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_find_probability, __pyx_k_find_probability, sizeof(__pyx_k_find_probability), 0, 0, 1, 1},
  {&__pyx_n_s_fit, __pyx_k_fit, sizeof(__pyx_k_fit), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_force_all_finite, __pyx_k_force_all_finite, sizeof(__pyx_k_force_all_finite), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_full, __pyx_k_full, sizeof(__pyx_k_full), 0, 0, 1, 1},
  {&__pyx_n_u_full_tree_indicies_list, __pyx_k_full_tree_indicies_list, sizeof(__pyx_k_full_tree_indicies_list), 0, 1, 0, 1},
  {&__pyx_n_u_full_tree_to_local_tree_lookup_l, __pyx_k_full_tree_to_local_tree_lookup_l, sizeof(__pyx_k_full_tree_to_local_tree_lookup_l), 0, 1, 0, 1},
  {&__pyx_n_u_full_tree_vector, __pyx_k_full_tree_vector, sizeof(__pyx_k_full_tree_vector), 0, 1, 0, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_u_gini, __pyx_k_gini, sizeof(__pyx_k_gini), 0, 1, 0, 1},
  {&__pyx_n_u_gini_random, __pyx_k_gini_random, sizeof(__pyx_k_gini_random), 0, 1, 0, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_u_imbalanced_reciprocal, __pyx_k_imbalanced_reciprocal, sizeof(__pyx_k_imbalanced_reciprocal), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_independence_model, __pyx_k_independence_model, sizeof(__pyx_k_independence_model), 0, 0, 1, 1},
  {&__pyx_n_u_independence_model, __pyx_k_independence_model, sizeof(__pyx_k_independence_model), 0, 1, 0, 1},
  {&__pyx_n_u_independence_model_c, __pyx_k_independence_model_c, sizeof(__pyx_k_independence_model_c), 0, 1, 0, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_io, __pyx_k_io, sizeof(__pyx_k_io), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_kp_u_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 1, 0, 0},
  {&__pyx_n_u_local_weight_tree, __pyx_k_local_weight_tree, sizeof(__pyx_k_local_weight_tree), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_bins, __pyx_k_max_bins, sizeof(__pyx_k_max_bins), 0, 0, 1, 1},
  {&__pyx_n_u_max_bins, __pyx_k_max_bins, sizeof(__pyx_k_max_bins), 0, 1, 0, 1},
  {&__pyx_n_s_max_depth, __pyx_k_max_depth, sizeof(__pyx_k_max_depth), 0, 0, 1, 1},
  {&__pyx_n_u_max_depth, __pyx_k_max_depth, sizeof(__pyx_k_max_depth), 0, 1, 0, 1},
  {&__pyx_n_s_max_fully_connected_depth, __pyx_k_max_fully_connected_depth, sizeof(__pyx_k_max_fully_connected_depth), 0, 0, 1, 1},
  {&__pyx_n_u_max_fully_connected_depth, __pyx_k_max_fully_connected_depth, sizeof(__pyx_k_max_fully_connected_depth), 0, 1, 0, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_kp_u_n_11, __pyx_k_n_11, sizeof(__pyx_k_n_11), 0, 1, 0, 0},
  {&__pyx_kp_u_n_1x, __pyx_k_n_1x, sizeof(__pyx_k_n_1x), 0, 1, 0, 0},
  {&__pyx_n_u_n_classes, __pyx_k_n_classes, sizeof(__pyx_k_n_classes), 0, 1, 0, 1},
  {&__pyx_n_u_n_feature_categories, __pyx_k_n_feature_categories, sizeof(__pyx_k_n_feature_categories), 0, 1, 0, 1},
  {&__pyx_n_u_n_features, __pyx_k_n_features, sizeof(__pyx_k_n_features), 0, 1, 0, 1},
  {&__pyx_n_s_n_max_classify, __pyx_k_n_max_classify, sizeof(__pyx_k_n_max_classify), 0, 0, 1, 1},
  {&__pyx_n_u_n_max_classify, __pyx_k_n_max_classify, sizeof(__pyx_k_n_max_classify), 0, 1, 0, 1},
  {&__pyx_n_s_n_min_to_add_leaf, __pyx_k_n_min_to_add_leaf, sizeof(__pyx_k_n_min_to_add_leaf), 0, 0, 1, 1},
  {&__pyx_n_u_n_min_to_add_leaf, __pyx_k_n_min_to_add_leaf, sizeof(__pyx_k_n_min_to_add_leaf), 0, 1, 0, 1},
  {&__pyx_n_s_n_noise, __pyx_k_n_noise, sizeof(__pyx_k_n_noise), 0, 0, 1, 1},
  {&__pyx_n_u_n_noise, __pyx_k_n_noise, sizeof(__pyx_k_n_noise), 0, 1, 0, 1},
  {&__pyx_n_u_n_noise_obj, __pyx_k_n_noise_obj, sizeof(__pyx_k_n_noise_obj), 0, 1, 0, 1},
  {&__pyx_kp_u_n_x1, __pyx_k_n_x1, sizeof(__pyx_k_n_x1), 0, 1, 0, 0},
  {&__pyx_kp_u_n_xx, __pyx_k_n_xx, sizeof(__pyx_k_n_xx), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nbins, __pyx_k_nbins, sizeof(__pyx_k_nbins), 0, 0, 1, 1},
  {&__pyx_n_u_nbins, __pyx_k_nbins, sizeof(__pyx_k_nbins), 0, 1, 0, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_newaxis, __pyx_k_newaxis, sizeof(__pyx_k_newaxis), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_u_node_info, __pyx_k_node_info, sizeof(__pyx_k_node_info), 0, 1, 0, 1},
  {&__pyx_n_u_node_label_to_index_dict_list, __pyx_k_node_label_to_index_dict_list, sizeof(__pyx_k_node_label_to_index_dict_list), 0, 1, 0, 1},
  {&__pyx_n_s_node_split_fraction, __pyx_k_node_split_fraction, sizeof(__pyx_k_node_split_fraction), 0, 0, 1, 1},
  {&__pyx_n_u_node_split_fraction, __pyx_k_node_split_fraction, sizeof(__pyx_k_node_split_fraction), 0, 1, 0, 1},
  {&__pyx_n_u_node_split_fraction_obj, __pyx_k_node_split_fraction_obj, sizeof(__pyx_k_node_split_fraction_obj), 0, 1, 0, 1},
  {&__pyx_n_s_node_split_model, __pyx_k_node_split_model, sizeof(__pyx_k_node_split_model), 0, 0, 1, 1},
  {&__pyx_n_u_node_split_model, __pyx_k_node_split_model, sizeof(__pyx_k_node_split_model), 0, 1, 0, 1},
  {&__pyx_n_u_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 1, 0, 1},
  {&__pyx_n_s_noise_exponent, __pyx_k_noise_exponent, sizeof(__pyx_k_noise_exponent), 0, 0, 1, 1},
  {&__pyx_n_u_noise_exponent, __pyx_k_noise_exponent, sizeof(__pyx_k_noise_exponent), 0, 1, 0, 1},
  {&__pyx_n_s_noise_exponent2, __pyx_k_noise_exponent2, sizeof(__pyx_k_noise_exponent2), 0, 0, 1, 1},
  {&__pyx_n_u_noise_exponent2, __pyx_k_noise_exponent2, sizeof(__pyx_k_noise_exponent2), 0, 1, 0, 1},
  {&__pyx_n_u_noise_exponent_obj, __pyx_k_noise_exponent_obj, sizeof(__pyx_k_noise_exponent_obj), 0, 1, 0, 1},
  {&__pyx_n_u_noise_scale, __pyx_k_noise_scale, sizeof(__pyx_k_noise_scale), 0, 1, 0, 1},
  {&__pyx_n_u_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 1, 0, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numeric_bin_list, __pyx_k_numeric_bin_list, sizeof(__pyx_k_numeric_bin_list), 0, 0, 1, 1},
  {&__pyx_n_u_numeric_bin_list, __pyx_k_numeric_bin_list, sizeof(__pyx_k_numeric_bin_list), 0, 1, 0, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_kp_u_parent_not_found_something_is_br, __pyx_k_parent_not_found_something_is_br, sizeof(__pyx_k_parent_not_found_something_is_br), 0, 1, 0, 0},
  {&__pyx_n_s_parents_index_begin, __pyx_k_parents_index_begin, sizeof(__pyx_k_parents_index_begin), 0, 0, 1, 1},
  {&__pyx_n_s_parents_index_end, __pyx_k_parents_index_end, sizeof(__pyx_k_parents_index_end), 0, 0, 1, 1},
  {&__pyx_n_s_parents_index_step, __pyx_k_parents_index_step, sizeof(__pyx_k_parents_index_step), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_predict_proba, __pyx_k_predict_proba, sizeof(__pyx_k_predict_proba), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_probabilities, __pyx_k_probabilities, sizeof(__pyx_k_probabilities), 0, 0, 1, 1},
  {&__pyx_n_s_probability_scaling_method, __pyx_k_probability_scaling_method, sizeof(__pyx_k_probability_scaling_method), 0, 0, 1, 1},
  {&__pyx_n_u_probability_scaling_method, __pyx_k_probability_scaling_method, sizeof(__pyx_k_probability_scaling_method), 0, 1, 0, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_u_qcut, __pyx_k_qcut, sizeof(__pyx_k_qcut), 0, 1, 0, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_csv, __pyx_k_read_csv, sizeof(__pyx_k_read_csv), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_u_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 1, 0, 0},
  {&__pyx_n_s_save_intermediates, __pyx_k_save_intermediates, sizeof(__pyx_k_save_intermediates), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_u_simple, __pyx_k_simple, sizeof(__pyx_k_simple), 0, 1, 0, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sklearn_utils_multiclass, __pyx_k_sklearn_utils_multiclass, sizeof(__pyx_k_sklearn_utils_multiclass), 0, 0, 1, 1},
  {&__pyx_n_s_sklearn_utils_validation, __pyx_k_sklearn_utils_validation, sizeof(__pyx_k_sklearn_utils_validation), 0, 0, 1, 1},
  {&__pyx_kp_u_something_is_wrong_with_yo_indep, __pyx_k_something_is_wrong_with_yo_indep, sizeof(__pyx_k_something_is_wrong_with_yo_indep), 0, 1, 0, 0},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_kp_u_top_of_tree_csv, __pyx_k_top_of_tree_csv, sizeof(__pyx_k_top_of_tree_csv), 0, 1, 0, 0},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unique_labels, __pyx_k_unique_labels, sizeof(__pyx_k_unique_labels), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_kp_u_unknown_independence_model, __pyx_k_unknown_independence_model, sizeof(__pyx_k_unknown_independence_model), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_updated_index, __pyx_k_updated_index, sizeof(__pyx_k_updated_index), 0, 0, 1, 1},
  {&__pyx_n_s_usefulness_model, __pyx_k_usefulness_model, sizeof(__pyx_k_usefulness_model), 0, 0, 1, 1},
  {&__pyx_n_u_usefulness_model, __pyx_k_usefulness_model, sizeof(__pyx_k_usefulness_model), 0, 1, 0, 1},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
  {&__pyx_n_u_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 1, 0, 1},
  {&__pyx_n_s_y_in, __pyx_k_y_in, sizeof(__pyx_k_y_in), 0, 0, 1, 1},
  {&__pyx_n_s_y_numeric, __pyx_k_y_numeric, sizeof(__pyx_k_y_numeric), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(1, 574, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 700, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(1, 1105, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 1728, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(1, 2541, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 810, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1000, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(3, 14, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(3, 18, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(3, 147, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(3, 399, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(3, 608, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(3, 827, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "awe_ml/classifier_cython.pyx":273
 * 
 *         ### initialize memory view objects
 *         self.X= np.zeros((0,0), dtype=NP_LONG)             # <<<<<<<<<<<<<<
 *         self.y = np.zeros((0), dtype=NP_LONG)
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_tuple_); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "awe_ml/classifier_cython.pyx":274
 *         ### initialize memory view objects
 *         self.X= np.zeros((0,0), dtype=NP_LONG)
 *         self.y = np.zeros((0), dtype=NP_LONG)             # <<<<<<<<<<<<<<
 * 
 *         ####hack for sci-kitlearn checks
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "awe_ml/classifier_cython.pyx":700
 * 
 *         if self.independence_model_c !=b"none" and self.max_fully_connected_depth<2:
 *             raise ValueError("Can only use independence models when max_fully_connected_depth>=2")             # <<<<<<<<<<<<<<
 * 
 *         self.noise_scale = self.n_max_classify**self.noise_exponent
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Can_only_use_independence_models); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "awe_ml/classifier_cython.pyx":1677
 *         # Check if fit had been called
 *         if self.X.size<=0:
 *             raise ValueError("Trying to predict without calling fit")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Trying_to_predict_without_callin); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 1677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "awe_ml/classifier_cython.pyx":1685
 * 
 *         if len(X.shape)==1:
 *             X=X[np.newaxis,:]             # <<<<<<<<<<<<<<
 * 
 *         # Input validation
 */
  __pyx_slice__7 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__7)) __PYX_ERR(1, 1685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__7);
  __Pyx_GIVEREF(__pyx_slice__7);

  /* "awe_ml/classifier_cython.pyx":1689
 *         # Input validation
 *         if X.shape[1]!=self.n_features:
 *             raise ValueError("Input does not have correct number of features")             # <<<<<<<<<<<<<<
 * 
 *         # bin input data if needed
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Input_does_not_have_correct_numb); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 1689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "awe_ml/classifier_cython.pyx":1806
 *             for level in range(tree_depth):
 *                 if level==0:
 *                     independence_array = np.full( (1,1),1, order = 'C', dtype=NP_FLOAT) # null values are assigned to -1             # <<<<<<<<<<<<<<
 *                 else:
 *                     local_tree_size = full_tree_indicies_list[level].size()
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_tuple__9, __pyx_int_1); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "awe_ml/classifier_cython.pyx":1882
 *                                 break
 *                         else:
 *                             raise ValueError("parent not found something is broken")             # <<<<<<<<<<<<<<
 * 
 *                         # print("parent_index_ctr=",parent_index_ctr)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_parent_not_found_something_is_br); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 1882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "awe_ml/classifier_cython.pyx":2035
 *                             #DEBUG:
 *                             if independence<=0 or independence>1:
 *                                 raise ValueError ("something is wrong with yo independence, code broken")             # <<<<<<<<<<<<<<
 *                             # compute usefulness  (compiler should unswitch the if statements from the loop, but it needs to be tested)
 *                                 #choose usefulness computation model based on settings:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_something_is_wrong_with_yo_indep); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "awe_ml/classifier_cython.pyx":2499
 * 
 *         inds = np.argsort(explainable_values[:,weight_ind+predicted_class])
 *         rev_inds = inds[::-1]             # <<<<<<<<<<<<<<
 * 
 *         ############## save all feature combos
 */
  __pyx_slice__13 = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice__13)) __PYX_ERR(1, 2499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__13);
  __Pyx_GIVEREF(__pyx_slice__13);

  /* "awe_ml/classifier_cython.pyx":2541
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_combos.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 2541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "awe_ml/classifier_cython.pyx":2577
 * 
 *         # sort by weight
 *         inds = top_level_values[:,3].argsort()             # <<<<<<<<<<<<<<
 *         top_level_values = top_level_values[inds[::-1]]
 * 
 */
  __pyx_slice__19 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__19)) __PYX_ERR(1, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__19);
  __Pyx_GIVEREF(__pyx_slice__19);
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_slice__19, __pyx_int_3); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 2577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "awe_ml/classifier_cython.pyx":2578
 *         # sort by weight
 *         inds = top_level_values[:,3].argsort()
 *         top_level_values = top_level_values[inds[::-1]]             # <<<<<<<<<<<<<<
 * 
 *         #create string to store all data and then write to file:
 */
  __pyx_slice__21 = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice__21)) __PYX_ERR(1, 2578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__21);
  __Pyx_GIVEREF(__pyx_slice__21);

  /* "awe_ml/classifier_cython.pyx":2597
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_top_of_tree.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "awe_ml/classifier_cython.pyx":2671
 * 
 *         # sort be weight
 *         inds = explain_by_feature[:,3].argsort()             # <<<<<<<<<<<<<<
 *         explain_by_feature = explain_by_feature[inds[::-1]]
 * 
 */
  __pyx_slice__23 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__23)) __PYX_ERR(1, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__23);
  __Pyx_GIVEREF(__pyx_slice__23);
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_slice__23, __pyx_int_3); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 2671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "awe_ml/classifier_cython.pyx":2672
 *         # sort be weight
 *         inds = explain_by_feature[:,3].argsort()
 *         explain_by_feature = explain_by_feature[inds[::-1]]             # <<<<<<<<<<<<<<
 * 
 *         #create string to store all data and then write to file:
 */
  __pyx_slice__25 = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice__25)) __PYX_ERR(1, 2672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__25);
  __Pyx_GIVEREF(__pyx_slice__25);

  /* "awe_ml/classifier_cython.pyx":2690
 * 
 *         if filename_prefix is not None:
 *             with open(filename_prefix+"_by_feature_shared.csv", 'w') as f:             # <<<<<<<<<<<<<<
 *                 f.write(data_string_cpp.decode('UTF-8'))
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1000
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(2, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1006
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "../../../../../ProgramData/Anaconda3/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1012
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "FromPyStructUtility":19
 *         value = obj['counts_index']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'counts_index'")             # <<<<<<<<<<<<<<
 *     result.counts_index = value
 *     try:
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "FromPyStructUtility":24
 *         value = obj['parents_index_begin']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_begin'")             # <<<<<<<<<<<<<<
 *     result.parents_index_begin = value
 *     try:
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(3, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "FromPyStructUtility":29
 *         value = obj['parents_index_end']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_end'")             # <<<<<<<<<<<<<<
 *     result.parents_index_end = value
 *     try:
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_3); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "FromPyStructUtility":34
 *         value = obj['updated_index']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'updated_index'")             # <<<<<<<<<<<<<<
 *     result.updated_index = value
 *     try:
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_4); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "FromPyStructUtility":39
 *         value = obj['size']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'size'")             # <<<<<<<<<<<<<<
 *     result.size = value
 *     try:
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_5); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(3, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "FromPyStructUtility":44
 *         value = obj['depth']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'depth'")             # <<<<<<<<<<<<<<
 *     result.depth = value
 *     try:
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_6); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(3, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "FromPyStructUtility":49
 *         value = obj['parents_index_step']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'parents_index_step'")             # <<<<<<<<<<<<<<
 *     result.parents_index_step = value
 *     return result
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_7); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(3, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "View.MemoryView":132
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "View.MemoryView":135
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "View.MemoryView":138
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_n_s_ASCII); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(3, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "View.MemoryView":147
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(3, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "View.MemoryView":175
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(3, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "View.MemoryView":191
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(3, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "View.MemoryView":413
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(3, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "View.MemoryView":490
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(3, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "View.MemoryView":515
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(3, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "View.MemoryView":565
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(3, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "View.MemoryView":572
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__55 = PyTuple_New(1); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(3, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__55, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "View.MemoryView":677
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__58 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__58)) __PYX_ERR(3, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__58);
  __Pyx_GIVEREF(__pyx_slice__58);

  /* "View.MemoryView":680
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
  __pyx_slice__59 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__59)) __PYX_ERR(3, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__59);
  __Pyx_GIVEREF(__pyx_slice__59);

  /* "View.MemoryView":691
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
  __pyx_slice__60 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__60)) __PYX_ERR(3, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__60);
  __Pyx_GIVEREF(__pyx_slice__60);

  /* "View.MemoryView":698
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(3, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(3, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "View.MemoryView":285
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(3, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "View.MemoryView":286
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(3, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "View.MemoryView":287
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "View.MemoryView":290
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(3, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "View.MemoryView":291
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(3, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_tuple__69 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_4 = PyFloat_FromDouble(0.4); if (unlikely(!__pyx_float_0_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_6awe_ml_17classifier_cython_AWE_ML_Cython = &__pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.get_name = (std::string (*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_get_name;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.fit = (PyObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit *__pyx_optional_args))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_fit;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.compute_noise_value = (__pyx_t_6awe_ml_17classifier_cython_np_float (*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long const &))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_compute_noise_value;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.create_and_process_node = (PyObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, __pyx_t_6awe_ml_17classifier_cython_np_long &))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_and_process_node;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.create_children = (PyObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __pyx_t_6awe_ml_17classifier_cython_np_long &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_children;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.add_parent_label = (void (*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, __pyx_t_6awe_ml_17classifier_cython_np_long &, std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long>  &, __pyx_t_6awe_ml_17classifier_cython_np_long &))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_add_parent_label;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.create_classifier_tree = (PyObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_create_classifier_tree;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.find_used_feature_combos = (PyObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __Pyx_memviewslice, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &, std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> >  &, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &, std::vector<std::vector<std::vector<__pyx_t_6awe_ml_17classifier_cython_np_long> > >  &))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_used_feature_combos;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.validate_X = (__Pyx_memviewslice (*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_validate_X;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.predict_proba = (PyObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_predict_proba;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.find_probability = (PyArrayObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, __Pyx_memviewslice, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability *__pyx_optional_args))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_find_probability;
  __pyx_vtable_6awe_ml_17classifier_cython_AWE_ML_Cython.analyze_single_probability = (PyObject *(*)(struct __pyx_obj_6awe_ml_17classifier_cython_AWE_ML_Cython *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability *__pyx_optional_args))__pyx_f_6awe_ml_17classifier_cython_13AWE_ML_Cython_analyze_single_probability;
  if (PyType_Ready(&__pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython) < 0) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython.tp_dictoffset && __pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(1, 147, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__.doc = __pyx_doc_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6awe_ml_17classifier_cython_13AWE_ML_Cython___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython.tp_dict, __pyx_vtabptr_6awe_ml_17classifier_cython_AWE_ML_Cython) < 0) __PYX_ERR(1, 147, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "AWE_ML_Cython", (PyObject *)&__pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython) < 0) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_ptype_6awe_ml_17classifier_cython_AWE_ML_Cython = &__pyx_type_6awe_ml_17classifier_cython_AWE_ML_Cython;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(3, 104, __pyx_L1_error)
  __pyx_type___pyx_array.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(3, 104, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(3, 104, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(3, 278, __pyx_L1_error)
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(3, 278, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(3, 329, __pyx_L1_error)
  __pyx_type___pyx_memoryview.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(3, 329, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(3, 329, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(3, 960, __pyx_L1_error)
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(3, 960, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(3, 960, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(4, 9, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(2, 164, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(2, 186, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(2, 190, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(2, 872, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("awe_ml.binning"); if (!__pyx_t_1) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "bin_data", (void (**)(void))&__pyx_f_6awe_ml_7binning_bin_data, "PyObject *(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6awe_ml_7binning_bin_data *__pyx_optional_args)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "bin_data_given_bins", (void (**)(void))&__pyx_f_6awe_ml_7binning_bin_data_given_bins, "__Pyx_memviewslice (PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initclassifier_cython(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initclassifier_cython(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_classifier_cython(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_classifier_cython(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_classifier_cython(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyThread_type_lock __pyx_t_3[8];
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_classifier_cython(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("classifier_cython", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_awe_ml__classifier_cython) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "awe_ml.classifier_cython")) {
      if (unlikely(PyDict_SetItemString(modules, "awe_ml.classifier_cython", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() != 0)) goto __pyx_L1_error;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "awe_ml/classifier_cython.pyx":22
 * 
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":26
 * cimport cython
 * 
 * from warnings import warn             # <<<<<<<<<<<<<<
 * 
 * from sklearn.utils.multiclass import unique_labels
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_warn);
  __Pyx_GIVEREF(__pyx_n_s_warn);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_warn);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_warnings, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_warn); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warn, __pyx_t_1) < 0) __PYX_ERR(1, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":28
 * from warnings import warn
 * 
 * from sklearn.utils.multiclass import unique_labels             # <<<<<<<<<<<<<<
 * 
 * from libc.math cimport log, lround, sqrt
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_unique_labels);
  __Pyx_GIVEREF(__pyx_n_s_unique_labels);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_unique_labels);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sklearn_utils_multiclass, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_unique_labels); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unique_labels, __pyx_t_2) < 0) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":44
 * from libc.stdlib cimport malloc, free
 * from cython cimport view
 * from sklearn.utils.validation import check_X_y, check_array # check_is_fitted             # <<<<<<<<<<<<<<
 * 
 * import pandas as pd
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_check_X_y);
  __Pyx_GIVEREF(__pyx_n_s_check_X_y);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_check_X_y);
  __Pyx_INCREF(__pyx_n_s_check_array);
  __Pyx_GIVEREF(__pyx_n_s_check_array);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_check_array);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sklearn_utils_validation, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_check_X_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_X_y, __pyx_t_1) < 0) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_check_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_array, __pyx_t_1) < 0) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":46
 * from sklearn.utils.validation import check_X_y, check_array # check_is_fitted
 * 
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from io import BytesIO
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pandas, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_2) < 0) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":47
 * 
 * import pandas as pd
 * from io import BytesIO             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BytesIO);
  __Pyx_GIVEREF(__pyx_n_s_BytesIO);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BytesIO);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_io, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BytesIO); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BytesIO, __pyx_t_2) < 0) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":51
 * 
 * #  all integers are 32 bit numpy ints and all floats are 64 bit numpy floats
 * NP_LONG = np.int32             # <<<<<<<<<<<<<<
 * NP_FLOAT= np.float64
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int32); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NP_LONG, __pyx_t_2) < 0) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "awe_ml/classifier_cython.pyx":52
 * #  all integers are 32 bit numpy ints and all floats are 64 bit numpy floats
 * NP_LONG = np.int32
 * NP_FLOAT= np.float64             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NP_FLOAT, __pyx_t_1) < 0) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "awe_ml/classifier_cython.pyx":1
 * #distutils: language = c++             # <<<<<<<<<<<<<<
 * #cython: profile=False,wraparound=False, cdivision=True, boundscheck=False, initializedcheck=False, language_level=3
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":208
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(3, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":285
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":286
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":287
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":290
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":291
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":315
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":316
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_3[0] = PyThread_allocate_lock();
  __pyx_t_3[1] = PyThread_allocate_lock();
  __pyx_t_3[2] = PyThread_allocate_lock();
  __pyx_t_3[3] = PyThread_allocate_lock();
  __pyx_t_3[4] = PyThread_allocate_lock();
  __pyx_t_3[5] = PyThread_allocate_lock();
  __pyx_t_3[6] = PyThread_allocate_lock();
  __pyx_t_3[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_3, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":544
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(3, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":990
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(3, 990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_1) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":9
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init awe_ml.classifier_cython", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init awe_ml.classifier_cython");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCall */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* MemviewSliceInit */
    static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (!buf) {
        PyErr_SetString(PyExc_ValueError,
            "buf is NULL.");
        goto fail;
    } else if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* PyCFunctionFastCall */
    #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
    #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* DictGetItem */
    #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* KeywordStringCheck */
    static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCallMethod0 */
      static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
      static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
      static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
      static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
      static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
      static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
      static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* GetAttr */
      static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
      static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* BytesEquals */
      static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
      static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyErrFetchRestore */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
      #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* UnpackUnboundCMethod */
      static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
      #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
      static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* WriteUnraisableException */
      static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetItemInt */
      static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectCallMethod1 */
      static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* append */
      static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* ObjectGetItem */
      #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* IsLittleEndian */
      static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
      static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
        static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((unsigned)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferFallbackError */
        static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* ExtTypeTest */
        static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SetItemInt */
        static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* decode_c_bytes */
          static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* SaveResetException */
          #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A3
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
          #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrExceptionMatches */
            #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* decode_c_string */
            static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetAttr3 */
            static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* SwapException */
            #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
            #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* None */
            static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* ImportFrom */
            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObject_GenericGetAttrNoDict */
            #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
            #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
            static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
            static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
            #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


            /* MemviewSliceIsContig */
            static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
            static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
            static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* TypeInfoCompare */
            static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
            static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets && buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
            static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_long, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int32(npy_int32 value) {
    const npy_int32 neg_one = (npy_int32) -1, const_zero = (npy_int32) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_int32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_int32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int32),
                                     little, !is_unsigned);
    }
}

/* MemviewDtypeToObject */
            static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_long(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_npy_int32(*(__pyx_t_6awe_ml_17classifier_cython_np_long *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_long(const char *itemp, PyObject *obj) {
    __pyx_t_6awe_ml_17classifier_cython_np_long value = __Pyx_PyInt_As_npy_int32(obj);
    if ((value == ((npy_int32)-1)) && PyErr_Occurred())
        return 0;
    *(__pyx_t_6awe_ml_17classifier_cython_np_long *) itemp = value;
    return 1;
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_struct____pyx_t_6awe_ml_17classifier_cython_node_info_t(struct __pyx_t_6awe_ml_17classifier_cython_node_info_t s) {
              PyObject* res;
              PyObject* member;
              res = __Pyx_PyDict_NewPresized(7); if (unlikely(!res)) return NULL;
              member = __Pyx_PyInt_From_npy_int32(s.counts_index); if (unlikely(!member)) goto bad;
              if (unlikely(PyDict_SetItem(res, __pyx_n_s_counts_index, member) < 0)) goto bad;
              Py_DECREF(member);
              member = __Pyx_PyInt_From_npy_int32(s.parents_index_begin); if (unlikely(!member)) goto bad;
              if (unlikely(PyDict_SetItem(res, __pyx_n_s_parents_index_begin, member) < 0)) goto bad;
              Py_DECREF(member);
              member = __Pyx_PyInt_From_npy_int32(s.parents_index_end); if (unlikely(!member)) goto bad;
              if (unlikely(PyDict_SetItem(res, __pyx_n_s_parents_index_end, member) < 0)) goto bad;
              Py_DECREF(member);
              member = __Pyx_PyInt_From_npy_int32(s.updated_index); if (unlikely(!member)) goto bad;
              if (unlikely(PyDict_SetItem(res, __pyx_n_s_updated_index, member) < 0)) goto bad;
              Py_DECREF(member);
              member = __Pyx_PyInt_From_npy_int32(s.size); if (unlikely(!member)) goto bad;
              if (unlikely(PyDict_SetItem(res, __pyx_n_s_size, member) < 0)) goto bad;
              Py_DECREF(member);
              member = __Pyx_PyInt_From_npy_int32(s.depth); if (unlikely(!member)) goto bad;
              if (unlikely(PyDict_SetItem(res, __pyx_n_s_depth, member) < 0)) goto bad;
              Py_DECREF(member);
              member = __Pyx_PyInt_From_npy_int32(s.parents_index_step); if (unlikely(!member)) goto bad;
              if (unlikely(PyDict_SetItem(res, __pyx_n_s_parents_index_step, member) < 0)) goto bad;
              Py_DECREF(member);
              return res;
              bad:
              Py_XDECREF(member);
              Py_DECREF(res);
              return NULL;
            }
            /* MemviewDtypeToObject */
            static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_6awe_ml_7binning_np_long(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_npy_int32(*(__pyx_t_6awe_ml_7binning_np_long *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_6awe_ml_7binning_np_long(const char *itemp, PyObject *obj) {
    __pyx_t_6awe_ml_7binning_np_long value = __Pyx_PyInt_As_npy_int32(obj);
    if ((value == ((npy_int32)-1)) && PyErr_Occurred())
        return 0;
    *(__pyx_t_6awe_ml_7binning_np_long *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
            static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_6awe_ml_17classifier_cython_np_float(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(__pyx_t_6awe_ml_17classifier_cython_np_float *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_6awe_ml_17classifier_cython_np_float(const char *itemp, PyObject *obj) {
    __pyx_t_6awe_ml_17classifier_cython_np_float value = __pyx_PyFloat_AsDouble(obj);
    if ((value == ((npy_float64)-1)) && PyErr_Occurred())
        return 0;
    *(__pyx_t_6awe_ml_17classifier_cython_np_float *) itemp = value;
    return 1;
}

/* Declarations */
            #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
            #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0, -1);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
            #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
            #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = 1.0 / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = 1.0 / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0, -1);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* MemviewSliceCopyTemplate */
            static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
            static CYTHON_INLINE npy_int32 __Pyx_PyInt_As_npy_int32(PyObject *x) {
    const npy_int32 neg_one = (npy_int32) -1, const_zero = (npy_int32) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_int32) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_int32, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_int32) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int32) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_int32, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_int32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) >= 2 * PyLong_SHIFT) {
                            return (npy_int32) (((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) >= 3 * PyLong_SHIFT) {
                            return (npy_int32) (((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) >= 4 * PyLong_SHIFT) {
                            return (npy_int32) (((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_int32) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_int32) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int32) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int32) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_int32, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_int32,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_int32) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int32) (((npy_int32)-1)*(((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_int32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int32) ((((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int32) (((npy_int32)-1)*(((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int32) ((((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int32) (((npy_int32)-1)*(((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int32) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int32) ((((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_int32) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int32) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_int32 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_int32) -1;
        }
    } else {
        npy_int32 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_int32) -1;
        val = __Pyx_PyInt_As_npy_int32(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_int32");
    return (npy_int32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_int32");
    return (npy_int32) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) -1, const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* ObjectToMemviewSlice */
            static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_long(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_long, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
            static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
            static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_6awe_ml_17classifier_cython_np_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_6awe_ml_17classifier_cython_np_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
            #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
            #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FunctionImport */
            #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
